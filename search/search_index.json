{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my home on the internet!!! I\u2019ve marked down my grinding journey as a software developer, inspired by the idea of The Ph.D. Grind: A Ph.D. Student Memoir Software engineers normally read more, grind more technologies and then use less and elegant code in work. The software engineer journey is a pursuit of craftsmanship spirit. :fontawesome-solid-sync: :fontawesome-solid-coffee: :fontawesome-solid-sync: Happy coding! Happy life!","title":"Home"},{"location":"blog/","text":"Blog \u2693\ufe0e","title":"Blog"},{"location":"blog/#blog","text":"","title":"Blog"},{"location":"blog/CS-Bachelor/Database/no_sql/","text":"Non-SQL DB \u2693\ufe0e XPath tutorial - basics - EduTech Wiki","title":"Database"},{"location":"blog/CS-Bachelor/Database/no_sql/#non-sql-db","text":"XPath tutorial - basics - EduTech Wiki","title":"Non-SQL DB"},{"location":"blog/CS-Bachelor/Database/sql/","text":"SQL DB \u2693\ufe0e Database index \u2693\ufe0e Fill Factor: Understanding SQL Server Index Fill Factor Setting Index creation SQL: SQL - Indexes - Tutorialspoint Inde architecture type: Relational Algebra - Tutorialspoint \u2693\ufe0e Relational Algebra Introduction - scranton Relational Algebra - juniata SQL JOINS - w3resource Relational Algebra Jeffrey D. Ullman \u2693\ufe0e Database Systems: The Complete Book OLAP-Online analytical processing - Wikipedia \u2693\ufe0e Cubes - OLAP Framework \u2014 Cubes 1.0.1 documentation Apache Pinot Apache Kylin Database normalization - Wikipedia \u2693\ufe0e","title":"Sql"},{"location":"blog/CS-Bachelor/Database/sql/#sql-db","text":"","title":"SQL DB"},{"location":"blog/CS-Bachelor/Database/sql/#database-index","text":"Fill Factor: Understanding SQL Server Index Fill Factor Setting Index creation SQL: SQL - Indexes - Tutorialspoint Inde architecture type:","title":"Database index"},{"location":"blog/CS-Bachelor/Database/sql/#relational-algebra---tutorialspoint","text":"Relational Algebra Introduction - scranton Relational Algebra - juniata SQL JOINS - w3resource Relational Algebra","title":"Relational Algebra - Tutorialspoint"},{"location":"blog/CS-Bachelor/Database/sql/#jeffrey-d-ullman","text":"Database Systems: The Complete Book","title":"Jeffrey D. Ullman"},{"location":"blog/CS-Bachelor/Database/sql/#olap-online-analytical-processing---wikipedia","text":"Cubes - OLAP Framework \u2014 Cubes 1.0.1 documentation Apache Pinot Apache Kylin","title":"OLAP-Online analytical processing - Wikipedia"},{"location":"blog/CS-Bachelor/Database/sql/#database-normalization---wikipedia","text":"","title":"Database normalization - Wikipedia"},{"location":"blog/CS-Bachelor/algorithms/","tags":["Algorithms"],"text":"Sorting Greedy Dynamic programming","title":"Algorithms"},{"location":"blog/CS-Bachelor/algorithms/dp_maximum_subarray_kadane_algorithm/","tags":["Algorithms"],"text":"DP Maximum Subarray - Kadane\u2019s Algorithm \u2693\ufe0e Maximum Subarray - Monisha Mathew - Medium Maximum Subarray, using DP - Monisha Mathew - Medium DP in Depth Explanation\u2026 Divide the problem into several steps Find the data structure. Store the solution of the sub-problem Every DP starts with a matrix.","title":"DP Maximum Subarray - Kadane\u2019s Algorithm"},{"location":"blog/CS-Bachelor/algorithms/dp_maximum_subarray_kadane_algorithm/#dp-maximum-subarray---kadanes-algorithm","text":"Maximum Subarray - Monisha Mathew - Medium Maximum Subarray, using DP - Monisha Mathew - Medium DP in Depth Explanation\u2026 Divide the problem into several steps Find the data structure. Store the solution of the sub-problem Every DP starts with a matrix.","title":"DP Maximum Subarray - Kadane\u2019s Algorithm"},{"location":"blog/CS-Bachelor/algorithms/greedy_vs_dp/","tags":["Algorithms"],"text":"Greedy vs DP \u2693\ufe0e Greedy Keys: \u2693\ufe0e Have a optimal solutio in every step. It\u2019s not necessary the optimal solution though. Each step DP \u2693\ufe0e Steps: 1.","title":"Greedy vs DP"},{"location":"blog/CS-Bachelor/algorithms/greedy_vs_dp/#greedy-vs-dp","text":"","title":"Greedy vs DP"},{"location":"blog/CS-Bachelor/algorithms/greedy_vs_dp/#greedy-keys","text":"Have a optimal solutio in every step. It\u2019s not necessary the optimal solution though. Each step","title":"Greedy Keys:"},{"location":"blog/CS-Bachelor/algorithms/greedy_vs_dp/#dp","text":"Steps: 1.","title":"DP"},{"location":"blog/CS-Bachelor/algorithms/majority_element_-_boyer%E2%80%93moore_majority_vote/","text":"Majority Element - Boyer\u2013Moore majority vote \u2693\ufe0e Boyer\u2013Moore majority vote algorithm - Wikipedia 169. Majority Element 229. Majority Element II \u4e00\u4e9b\u6469\u5c14\u6295\u7968\u6cd5\u7684\u601d\u8003\u548c\u7406\u89e3_\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5_qq_31839461\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 Intuition \u2693\ufe0e If we had some way of counting instances of the majority element as +1 and instances of any other element as \u22121, summing them would make it obvious that the majority element is indeed the majority element. Algorithm \u2693\ufe0e Essentially, what Boyer-Moore does is look for a suffix sufsuf of nums where suf[0]suf[0] is the majority element in that suffix. To do this, we maintain a count, which is incremented whenever we see an instance of our current candidate for majority element and decremented whenever we see anything else. Whenever count equals 0, we effectively forget about everything in nums up to the current index and consider the current number as the candidate for majority element. It is not immediately obvious why we can get away with forgetting prefixes of nums - consider the following examples (pipes are inserted to separate runs of nonzero count). \\[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 7, 7, 7, 7\\] Here, the 7 at index 0 is selected to be the first candidate for majority element. count will eventually reach 0 after index 5 is processed, so the 5 at index 6 will be the next candidate. In this case, 7 is the true majority element, so by disregarding this prefix, we are ignoring an equal number of majority and minority elements - therefore, 7 will still be the majority element in the suffix formed by throwing away the first prefix. \\[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 5, 5, 5, 5\\] Now, the majority element is 5 (we changed the last run of the array from 7s to 5s), but our first candidate is still 7. In this case, our candidate is not the true majority element, but we still cannot discard more majority elements than minority elements (this would imply that count could reach -1 before we reassign candidate, which is obviously false). Therefore, given that it is impossible (in both cases) to discard more majority elements than minority elements, we are safe in discarding the prefix and attempting to recursively solve the majority element problem for the suffix. Eventually, a suffix will be found for which count does not hit 0, and the majority element of that suffix will necessarily be the same as the majority element of the overall array.","title":"Majority Element - Boyer\u2013Moore majority vote"},{"location":"blog/CS-Bachelor/algorithms/majority_element_-_boyer%E2%80%93moore_majority_vote/#majority-element---boyermoore-majority-vote","text":"Boyer\u2013Moore majority vote algorithm - Wikipedia 169. Majority Element 229. Majority Element II \u4e00\u4e9b\u6469\u5c14\u6295\u7968\u6cd5\u7684\u601d\u8003\u548c\u7406\u89e3_\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5_qq_31839461\u7684\u535a\u5ba2-CSDN\u535a\u5ba2","title":"Majority Element - Boyer\u2013Moore majority vote"},{"location":"blog/CS-Bachelor/algorithms/majority_element_-_boyer%E2%80%93moore_majority_vote/#intuition","text":"If we had some way of counting instances of the majority element as +1 and instances of any other element as \u22121, summing them would make it obvious that the majority element is indeed the majority element.","title":"Intuition"},{"location":"blog/CS-Bachelor/algorithms/majority_element_-_boyer%E2%80%93moore_majority_vote/#algorithm","text":"Essentially, what Boyer-Moore does is look for a suffix sufsuf of nums where suf[0]suf[0] is the majority element in that suffix. To do this, we maintain a count, which is incremented whenever we see an instance of our current candidate for majority element and decremented whenever we see anything else. Whenever count equals 0, we effectively forget about everything in nums up to the current index and consider the current number as the candidate for majority element. It is not immediately obvious why we can get away with forgetting prefixes of nums - consider the following examples (pipes are inserted to separate runs of nonzero count). \\[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 7, 7, 7, 7\\] Here, the 7 at index 0 is selected to be the first candidate for majority element. count will eventually reach 0 after index 5 is processed, so the 5 at index 6 will be the next candidate. In this case, 7 is the true majority element, so by disregarding this prefix, we are ignoring an equal number of majority and minority elements - therefore, 7 will still be the majority element in the suffix formed by throwing away the first prefix. \\[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 5, 5, 5, 5\\] Now, the majority element is 5 (we changed the last run of the array from 7s to 5s), but our first candidate is still 7. In this case, our candidate is not the true majority element, but we still cannot discard more majority elements than minority elements (this would imply that count could reach -1 before we reassign candidate, which is obviously false). Therefore, given that it is impossible (in both cases) to discard more majority elements than minority elements, we are safe in discarding the prefix and attempting to recursively solve the majority element problem for the suffix. Eventually, a suffix will be found for which count does not hit 0, and the majority element of that suffix will necessarily be the same as the majority element of the overall array.","title":"Algorithm"},{"location":"blog/CS-Bachelor/algorithms/np_complete/","text":"NP complete \u2693\ufe0e Decide if an algorithm is NP and find the approximate solution.","title":"NP complete"},{"location":"blog/CS-Bachelor/algorithms/np_complete/#np-complete","text":"Decide if an algorithm is NP and find the approximate solution.","title":"NP complete"},{"location":"blog/CS-Bachelor/algorithms/sorting_algorithm/","text":"Sorting algorithm \u2693\ufe0e Comparison sort \u2693\ufe0e Merge sort quick sort heap sort Non-comparison sort \u2693\ufe0e Counting sort bucket sort radix sort \u2019\u2018\u2019 \u2018\u2019\u2018","title":"Sorting algorithm"},{"location":"blog/CS-Bachelor/algorithms/sorting_algorithm/#sorting-algorithm","text":"","title":"Sorting algorithm"},{"location":"blog/CS-Bachelor/algorithms/sorting_algorithm/#comparison-sort","text":"Merge sort quick sort heap sort","title":"Comparison sort"},{"location":"blog/CS-Bachelor/algorithms/sorting_algorithm/#non-comparison-sort","text":"Counting sort bucket sort radix sort \u2019\u2018\u2019 \u2018\u2019\u2018","title":"Non-comparison sort"},{"location":"blog/CS-Bachelor/network/cmd/","text":"Ubuntu Command ip -c address nmcli nslookup","title":"Network"},{"location":"blog/CS-Bachelor/network/knowledge/","text":"Protocol Numbers TCP/IP Ports and Protocols | TCP/IP Ports and Protocols | Pearson IT Certification An overview of HTTP - HTTP | MDN Firewall Package filtering (IP/TCP layer) Session layer Connection tracking Application layer 7 Deep packet inspection - Wikipedia Web filtering Intrusion prevention systems User identity management Web application firewall Well-known ports","title":"Knowledge"},{"location":"blog/CS-Master/","tags":["OMSCS"],"text":"References \u2693\ufe0e Intro omscentral Specializations Current-Courses","title":"CS Master"},{"location":"blog/CS-Master/#references","text":"Intro omscentral Specializations Current-Courses","title":"References"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/","text":"Unified Software Process \u2693\ufe0e Key featuers \u2693\ufe0e Software process model \u2693\ufe0e Order of phases, transition criteria. Component based \u2693\ufe0e Software components Well definied interfaces. Tightly related to UML \u2693\ufe0e notation Basic principles Distinguish aspects \u2693\ufe0e Use-case driven Architecture-centric iteractive and incremental. UML \u2693\ufe0e A use case vs a use case model \u2693\ufe0e A use case model is a set of use cases. what are use case diagrams used for? \u2693\ufe0e Prioterize requirements. requirements elicitation test case design. Use-case Driven \u2693\ufe0e A system performs a sequence of actions in response to user input. Use cases capture this interaction. Architecture centric \u2693\ufe0e Use cases define the function Architecture defines the form. iteractive and incremental \u2693\ufe0e Give developers early feedbacks Mimize the risk of developing wrong system Accomdate evolving requirements","title":"CS6300 Software Development Process"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#unified-software-process","text":"","title":"Unified Software Process"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#key-featuers","text":"","title":"Key featuers"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#software-process-model","text":"Order of phases, transition criteria.","title":"Software process model"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#component-based","text":"Software components Well definied interfaces.","title":"Component based"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#tightly-related-to-uml","text":"notation Basic principles","title":"Tightly related to UML"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#distinguish-aspects","text":"Use-case driven Architecture-centric iteractive and incremental.","title":"Distinguish aspects"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#uml","text":"","title":"UML"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#a-use-case-vs-a-use-case-model","text":"A use case model is a set of use cases.","title":"A use case vs a use case model"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#what-are-use-case-diagrams-used-for","text":"Prioterize requirements. requirements elicitation test case design.","title":"what are use case diagrams used for?"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#use-case-driven","text":"A system performs a sequence of actions in response to user input. Use cases capture this interaction.","title":"Use-case Driven"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#architecture-centric","text":"Use cases define the function Architecture defines the form.","title":"Architecture centric"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/USP/#iteractive-and-incremental","text":"Give developers early feedbacks Mimize the risk of developing wrong system Accomdate evolving requirements","title":"iteractive and incremental"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/","text":"Linux kernel based system \u2693\ufe0e Basic architecture of android \u2693\ufe0e Android Apps \u2693\ufe0e Activity \u2693\ufe0e Service - Background, binding service \u2693\ufe0e Download Music playing Content Provider \u2693\ufe0e SQLite DB, e.g. address books, contacts. Insert Update Delete Query Broadcast receiver (pub-sub) \u2693\ufe0e Register for event notification Intents - > Late binding. \u2693\ufe0e Action Data Binding \u2693\ufe0e Direct (activity) Direct(service) Broadcast Manifest \u2693\ufe0e Android Activity Lifecycle \u2693\ufe0e","title":"Linux kernel based system"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#linux-kernel-based-system","text":"","title":"Linux kernel based system"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#basic-architecture-of-android","text":"","title":"Basic architecture of android"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#android-apps","text":"","title":"Android Apps"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#activity","text":"","title":"Activity"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#service---background-binding-service","text":"Download Music playing","title":"Service - Background, binding service"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#content-provider","text":"SQLite DB, e.g. address books, contacts. Insert Update Delete Query","title":"Content Provider"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#broadcast-receiver-pub-sub","text":"Register for event notification","title":"Broadcast receiver (pub-sub)"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#intents----late-binding","text":"Action Data","title":"Intents - &gt; Late binding."},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#binding","text":"Direct (activity) Direct(service) Broadcast","title":"Binding"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#manifest","text":"","title":"Manifest"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/android/#android-activity-lifecycle","text":"","title":"Android Activity Lifecycle"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/","text":"Intro and Overview \u2693\ufe0e The importance of Software Engineer(SE) The software crisis \u2693\ufe0e Rising demand for software Increasing software complexity Slow programmer\u2019s productivity growth Software process \u2693\ufe0e Waterfall Evolutionary prototyping RUP USP Agile Software Phases \u2693\ufe0e Requirements engineer Design Implementation Verification & Validation Maintenance Tools of the trade (software size and complexity) \u2693\ufe0e Development: Punch card to IDEs Language: Machine code -> High Level Languages Debugging: Print lines -> symbolic debuggers Tools \u2693\ufe0e IDEs VCS (Git) Coverage and verification tools Life Cycle Models \u2693\ufe0e Waterfall Spiral Rational Unified Process ( RUP ) - UML Evolutionary prototyping Agile Barry Boehm Interview \u2693\ufe0e Technology People Product Process Small projects - Agile Larger projects - more rigorous approach Cost of late correction \u2693\ufe0e Requirements \u2693\ufe0e Elicitation : collecting requirements from customers and stakeholders Analysis : study and deep understanding of requirements Specification : pseudo-represented and documented Validation : verify the requirements are correct. Management Design to specification \u2693\ufe0e Architecture design Abstract specification Interface design component design data structure algorithm design Implementation \u2693\ufe0e Four principles Reduction of complexity Anticipation of diversity Structure for validation Use of (external) standards. Verification & Validation \u2693\ufe0e Validation: did we build the right system? Verification: did we build the system right? Unit tests Integration System Maintenance \u2693\ufe0e Bug reports ( corrective maintenance) Feature request ( perfective maintenance) Environment change ( adaptive maintenance) Regression testing Software process model \u2693\ufe0e Waterfall - 1956 Spiral model - 1986 Specific expertise complex Evolutionary prototype Immediate feedback Difficult to plan Rational Unified Process(RUP) Agile: TDD Lifecycle Documents \u2693\ufe0e IEEE document definition Light-Weight documents Classic Mistakes \u2693\ufe0e People: Heroics work environment people management Process scheduling issues Planning issues Failures Product Gold plating Feature creep Research != Development Technology Silver-bullet syndrome Switching tools No version control IDE \u2693\ufe0e Android \u2693\ufe0e","title":"Notes"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#intro-and-overview","text":"The importance of Software Engineer(SE)","title":"Intro and Overview"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#the-software-crisis","text":"Rising demand for software Increasing software complexity Slow programmer\u2019s productivity growth","title":"The software crisis"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#software-process","text":"Waterfall Evolutionary prototyping RUP USP Agile","title":"Software process"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#software-phases","text":"Requirements engineer Design Implementation Verification & Validation Maintenance","title":"Software Phases"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#tools-of-the-trade-software-size-and-complexity","text":"Development: Punch card to IDEs Language: Machine code -> High Level Languages Debugging: Print lines -> symbolic debuggers","title":"Tools of the trade (software size and complexity)"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#tools","text":"IDEs VCS (Git) Coverage and verification tools","title":"Tools"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#life-cycle-models","text":"Waterfall Spiral Rational Unified Process ( RUP ) - UML Evolutionary prototyping Agile","title":"Life Cycle Models"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#barry-boehm-interview","text":"Technology People Product Process Small projects - Agile Larger projects - more rigorous approach","title":"Barry Boehm Interview"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#cost-of-late-correction","text":"","title":"Cost of late correction"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#requirements","text":"Elicitation : collecting requirements from customers and stakeholders Analysis : study and deep understanding of requirements Specification : pseudo-represented and documented Validation : verify the requirements are correct. Management","title":"Requirements"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#design-to-specification","text":"Architecture design Abstract specification Interface design component design data structure algorithm design","title":"Design to specification"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#implementation","text":"Four principles Reduction of complexity Anticipation of diversity Structure for validation Use of (external) standards.","title":"Implementation"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#verification--validation","text":"Validation: did we build the right system? Verification: did we build the system right? Unit tests Integration System","title":"Verification &amp; Validation"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#maintenance","text":"Bug reports ( corrective maintenance) Feature request ( perfective maintenance) Environment change ( adaptive maintenance) Regression testing","title":"Maintenance"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#software-process-model","text":"Waterfall - 1956 Spiral model - 1986 Specific expertise complex Evolutionary prototype Immediate feedback Difficult to plan Rational Unified Process(RUP) Agile: TDD","title":"Software process model"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#lifecycle-documents","text":"IEEE document definition Light-Weight documents","title":"Lifecycle Documents"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#classic-mistakes","text":"People: Heroics work environment people management Process scheduling issues Planning issues Failures Product Gold plating Feature creep Research != Development Technology Silver-bullet syndrome Switching tools No version control","title":"Classic Mistakes"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#ide","text":"","title":"IDE"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/notes/#android","text":"","title":"Android"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/","text":"Software Architecture(SWA) \u2693\ufe0e Interview of Nenad Medvidovic. \u2693\ufe0e Software Architecture: Foundations, Theory, and Practice 2009. Wiley, ISBN 978-0-470-16774-8 Software Erosion \u2693\ufe0e What\u2019s is software Architecture? \u2693\ufe0e Perry and Wolf SWA = {Elements(What), Form(How), Rationale(why)} Shaw and Garland. SWA is a level of design that involves * Description of elements from which systems are built * Interactions among those elements * Patterns that guide their composition * Constraints on these patterns A general definition of SWA \u2693\ufe0e A Set of principal design decisions about the system. Prescriptive Architecture \u2693\ufe0e It captures the design decisions prior to the system\u2019s construction. As-Conceived SWA. Prescriptive Arch should be modified first. However, this rarely happens. * Developers\u2019 sloppiness * Short deadlines * Lack of documented prescriptive architecture. Descriptive Architecture \u2693\ufe0e It describes how the system has actually been built. As implemented SWA. Architectural Degradation \u2693\ufe0e Arch drift \u2693\ufe0e Introduced orthogonal decisions to a system\u2019s prescriptive architecture. Arch erosion \u2693\ufe0e Introduced decisions violated a system\u2019s prescriptive architecture. Linux Kernel example Arch. Elements \u2693\ufe0e A software architecture typically is not a monolith. Elements Metaphors Components \u2693\ufe0e Processing elements: implement business logic and perform transformation on data. Date elements (information/state): elements contained information that is used in processing elements. Software Components \u2693\ufe0e Encapsulates a subset of the system\u2019s functionality and/or data. restrict access to that subset via an explicitly defined interface. Connectors \u2693\ufe0e Interaction elements: glue that holds different pieces together. Software connector: architectural entity affecting and regulating interaction. \u2693\ufe0e Arch. configuration \u2693\ufe0e Association between components and connectors of a software architecture. Architecture styles \u2693\ufe0e Pipe and filters: Unix commands, Event Driven: GUI Publish-subscribe: Twitter Client-Server : email Peer-to-peer REST","title":"Software Architecture(SWA)"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#software-architectureswa","text":"","title":"Software Architecture(SWA)"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#interview-of-nenad-medvidovic","text":"Software Architecture: Foundations, Theory, and Practice 2009. Wiley, ISBN 978-0-470-16774-8","title":"Interview of Nenad Medvidovic."},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#software-erosion","text":"","title":"Software Erosion"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#whats-is-software-architecture","text":"Perry and Wolf SWA = {Elements(What), Form(How), Rationale(why)} Shaw and Garland. SWA is a level of design that involves * Description of elements from which systems are built * Interactions among those elements * Patterns that guide their composition * Constraints on these patterns","title":"What's is software Architecture?"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#a-general-definition-of-swa","text":"A Set of principal design decisions about the system.","title":"A general definition of SWA"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#prescriptive-architecture","text":"It captures the design decisions prior to the system\u2019s construction. As-Conceived SWA. Prescriptive Arch should be modified first. However, this rarely happens. * Developers\u2019 sloppiness * Short deadlines * Lack of documented prescriptive architecture.","title":"Prescriptive Architecture"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#descriptive-architecture","text":"It describes how the system has actually been built. As implemented SWA.","title":"Descriptive Architecture"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#architectural-degradation","text":"","title":"Architectural Degradation"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#arch-drift","text":"Introduced orthogonal decisions to a system\u2019s prescriptive architecture.","title":"Arch drift"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#arch-erosion","text":"Introduced decisions violated a system\u2019s prescriptive architecture. Linux Kernel example","title":"Arch erosion"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#arch-elements","text":"A software architecture typically is not a monolith. Elements Metaphors","title":"Arch. Elements"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#components","text":"Processing elements: implement business logic and perform transformation on data. Date elements (information/state): elements contained information that is used in processing elements.","title":"Components"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#software-components","text":"Encapsulates a subset of the system\u2019s functionality and/or data. restrict access to that subset via an explicitly defined interface.","title":"Software Components"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#connectors","text":"Interaction elements: glue that holds different pieces together.","title":"Connectors"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#software-connector-architectural-entity-affecting-and-regulating-interaction","text":"","title":"Software connector: architectural entity affecting and regulating interaction."},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#arch-configuration","text":"Association between components and connectors of a software architecture.","title":"Arch. configuration"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_architecture/#architecture-styles","text":"Pipe and filters: Unix commands, Event Driven: GUI Publish-subscribe: Twitter Client-Server : email Peer-to-peer REST","title":"Architecture styles"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/","text":"Software Verification \u2693\ufe0e Verification approach. \u2693\ufe0e Testing Static verification Inspection/Review Formal proofs of correctness (state machine) Testing \u2693\ufe0e Input Domain D -> Software -> Output Domain O Individual test sets. Pro: No False positive Con: incomplete Verification \u2693\ufe0e all possible inputs (executions) for Input Domain D. Pro: Consider all program behaviors Con: False positives Inspection(Reviews, walk-through) \u2693\ufe0e Pro: systematic, thorough Con: informal, subjective Formal proofs \u2693\ufe0e Program implemented specifications. Pro: strong guarantees. Con: complex, expensive Testing \u2693\ufe0e Executing a program on a tiny sample of the input domain. * Dynamic technique * Optimistic approximation Successful tests Test granularity levels. \u2693\ufe0e Unit tests: one module Integration testing: a subset of several modules System testing: the whole system. System testing \u2693\ufe0e Acceptance testing: validation against customer requirements. Regression testing Alpha and Beta testing \u2693\ufe0e Users testing. Black-Box testing / Functional testing. \u2693\ufe0e Based on specification. Covered as much specified behavior Cannot reveal errors due to implementation details. Advantages: * Focus on the domain * No need for the coe, early test design * Catches logic defects * Applicable at all granularity levels A Systematic functional testing approach : 1. Functional specification 2. Identify independently testable features 3. Relevant inputs 4. Test cases specification 5. Test cases How to select test cases in the test domain? * Random selection * Partition of domains, e.g. x < 0, x = 0, x > 0 * Boundary values between domains. Category partition method \u2693\ufe0e Identify independently testable features Identify categories/characteristics Partition categories into choices Identify constraints among choices Eliminate meaningless combinations Reduce the number of test cases Three types: property\u2026if, error, single. Produce/evaluate test case specifications Generate test cases from test case specifications Model based testing \u2693\ufe0e Finite state machine Decision tables flow graphs historical models White-Box testing - Structured testing \u2693\ufe0e Based on the code. Cover as much coded behavior as possible. Cannot reveal errors due to missing paths. Basic assumption Executing the faulty statement is a necessary condition for a fault. Advantage \u2693\ufe0e Based on the code. Can be used to compare test suites Allows for covering the coded behavior. Categories \u2693\ufe0e Control-flow based data-flow based fault based Coverage Criteria \u2693\ufe0e Defined in terms of test requirements from the code. Result in test specifications, test cases. Statement Coverage \u2693\ufe0e Most used in the industry 80-90% Number of executed Statements / total number of Statements. Control flow graphs \u2693\ufe0e Branch coverage. \u2693\ufe0e Number of executed branches / total number of branches Condition coverage \u2693\ufe0e Test requirements: individual conditions in the program Coverage measure: number of conditions that are both T and F / Total number of conditions. Branch & Coverage(B&C) coverage \u2693\ufe0e Branches and individual conditions Modified condition/Decision coverage \u2693\ufe0e Key idea: test important combinations of conditions and limited testing costs. The FAA(Federal Aviation Administration) requires all software tested for MC|DC. extend branch and condition coverage with the requirement that each condition should affect the decision outcome independently. Other criteria \u2693\ufe0e Path coverage Data flow coverage Mutation coverage Test Criteria Subsumption","title":"Software Verification"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#software-verification","text":"","title":"Software Verification"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#verification-approach","text":"Testing Static verification Inspection/Review Formal proofs of correctness (state machine)","title":"Verification approach."},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#testing","text":"Input Domain D -> Software -> Output Domain O Individual test sets. Pro: No False positive Con: incomplete","title":"Testing"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#verification","text":"all possible inputs (executions) for Input Domain D. Pro: Consider all program behaviors Con: False positives","title":"Verification"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#inspectionreviews-walk-through","text":"Pro: systematic, thorough Con: informal, subjective","title":"Inspection(Reviews, walk-through)"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#formal-proofs","text":"Program implemented specifications. Pro: strong guarantees. Con: complex, expensive","title":"Formal proofs"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#testing_1","text":"Executing a program on a tiny sample of the input domain. * Dynamic technique * Optimistic approximation Successful tests","title":"Testing"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#test-granularity-levels","text":"Unit tests: one module Integration testing: a subset of several modules System testing: the whole system.","title":"Test granularity levels."},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#system-testing","text":"Acceptance testing: validation against customer requirements. Regression testing","title":"System testing"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#alpha-and-beta-testing","text":"Users testing.","title":"Alpha and Beta testing"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#black-box-testing--functional-testing","text":"Based on specification. Covered as much specified behavior Cannot reveal errors due to implementation details. Advantages: * Focus on the domain * No need for the coe, early test design * Catches logic defects * Applicable at all granularity levels A Systematic functional testing approach : 1. Functional specification 2. Identify independently testable features 3. Relevant inputs 4. Test cases specification 5. Test cases How to select test cases in the test domain? * Random selection * Partition of domains, e.g. x < 0, x = 0, x > 0 * Boundary values between domains.","title":"Black-Box testing / Functional testing."},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#category-partition-method","text":"Identify independently testable features Identify categories/characteristics Partition categories into choices Identify constraints among choices Eliminate meaningless combinations Reduce the number of test cases Three types: property\u2026if, error, single. Produce/evaluate test case specifications Generate test cases from test case specifications","title":"Category partition method"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#model-based-testing","text":"Finite state machine Decision tables flow graphs historical models","title":"Model based testing"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#white-box-testing---structured-testing","text":"Based on the code. Cover as much coded behavior as possible. Cannot reveal errors due to missing paths. Basic assumption Executing the faulty statement is a necessary condition for a fault.","title":"White-Box testing - Structured testing"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#advantage","text":"Based on the code. Can be used to compare test suites Allows for covering the coded behavior.","title":"Advantage"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#categories","text":"Control-flow based data-flow based fault based","title":"Categories"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#coverage-criteria","text":"Defined in terms of test requirements from the code. Result in test specifications, test cases.","title":"Coverage Criteria"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#statement-coverage","text":"Most used in the industry 80-90% Number of executed Statements / total number of Statements.","title":"Statement Coverage"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#control-flow-graphs","text":"","title":"Control flow graphs"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#branch-coverage","text":"Number of executed branches / total number of branches","title":"Branch coverage."},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#condition-coverage","text":"Test requirements: individual conditions in the program Coverage measure: number of conditions that are both T and F / Total number of conditions.","title":"Condition coverage"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#branch--coveragebc-coverage","text":"Branches and individual conditions","title":"Branch &amp; Coverage(B&amp;C) coverage"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#modified-conditiondecision-coverage","text":"Key idea: test important combinations of conditions and limited testing costs. The FAA(Federal Aviation Administration) requires all software tested for MC|DC. extend branch and condition coverage with the requirement that each condition should affect the decision outcome independently.","title":"Modified condition/Decision coverage"},{"location":"blog/CS-Master/CS6300-Software-Development-Process/software_verification/#other-criteria","text":"Path coverage Data flow coverage Mutation coverage Test Criteria Subsumption","title":"Other criteria"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/","tags":["OMSCS"],"text":"Topics \u2693\ufe0e Understand and apply object-oriented design techniques Develop and evaluate software architectures Select and use appropriate architectural styles Select and use appropriate software design patterns Express the specifications and design of an application using UML [Time Permitting] Discuss related issues (e.g., formal design language with OCL) Reference \u2693\ufe0e Craig Larman, Applying UML and Patterns (2005) Software Engineering Body of Knowledge (SWEBOKv3.0) UML At a Glance The Elements of Style, William Strunk, Jr. Lucid Chart UML tutorials Learning UML 2.0, Russ Miles, Kim Hamilton UML 2.0 in a Nutshell, Dan Pilone, Neil Pitman Domain-Driven Design: Tackling Complexity in the Heart of Software Object Mangagement Group(OMG) UML references \u2693\ufe0e OMG-Unified Modeling Language OMG-UML v1.4 OMG-OCL v2.0","title":"CS6310 Software Architecture and Design"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/#topics","text":"Understand and apply object-oriented design techniques Develop and evaluate software architectures Select and use appropriate architectural styles Select and use appropriate software design patterns Express the specifications and design of an application using UML [Time Permitting] Discuss related issues (e.g., formal design language with OCL)","title":"Topics"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/#reference","text":"Craig Larman, Applying UML and Patterns (2005) Software Engineering Body of Knowledge (SWEBOKv3.0) UML At a Glance The Elements of Style, William Strunk, Jr. Lucid Chart UML tutorials Learning UML 2.0, Russ Miles, Kim Hamilton UML 2.0 in a Nutshell, Dan Pilone, Neil Pitman Domain-Driven Design: Tackling Complexity in the Heart of Software","title":"Reference"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/#object-mangagement-groupomg-uml-references","text":"OMG-Unified Modeling Language OMG-UML v1.4 OMG-OCL v2.0","title":"Object Mangagement Group(OMG) UML references"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/","tags":["OMSCS"],"text":"Term Definition \u2693\ufe0e Design: Deliberative, purposive planning Engineering: Skillful or artful contrivance applying scientific and mathematical principles Craft: skilled occupation Art: user of skill, taste, and imagination in the production of aesthetic objects. Software Design \u2693\ufe0e The process of building a program while satisfying a problem\u2019s functional requirements and not violating its non-functional constraints. Two stages: \u2693\ufe0e Architectual Design: the process of identifying and assigning the responsibility for aspects of behavior to various modules or components of a software. Detailed design: the process of specifying the behavior of each of the system components that you\u2019ve identified during architectural design. Design Notations for algorithms \u2693\ufe0e Pseudo code structured programming Flow chart Decision tables Approaches\u2019 aspects \u2693\ufe0e Design method: a particular way of viewing the problem. OOD Structure design Role based design design representation how that design is going to be validated. Design issues \u2693\ufe0e top down, bottom up, inside up? Procedures, functions or nouns, objects. conceptual integrity vs cooperative development. trades-off between Long term maintainability and short term schedule What tools to use? How to validate the design? \u2693\ufe0e Independence of validators Dependence on design methods On-going versus after-the-fact Design Concepts \u2693\ufe0e Conceptual integrity Coupling: the extent two components depends on each other for successful execution. Cohension: The extent that the module or component has a single purpose or function. Information hiding: eencapsulating the capabilities that a particular module has behind an abstract interface. Abstraction and Refinement Arrays, structs, record, objects class hierarchy and generation Aesthetics \u2693\ufe0e Beauty, elegance, resolve to wholeness, harmony and radiance. It takes a lot of time and energy to come up with an elegant solution that looks quite simple on the surface, but really satisfies the complex requirements. Design philosophy \u2693\ufe0e Piete En related software design to four important philosophers. Descartes - analytic geometry. Marx - social processes and classes Martin Heidegger - tools Wittgenstein - the concept of language games, inventing a vocabulary for a particular problem.","title":"Introduction"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#term-definition","text":"Design: Deliberative, purposive planning Engineering: Skillful or artful contrivance applying scientific and mathematical principles Craft: skilled occupation Art: user of skill, taste, and imagination in the production of aesthetic objects.","title":"Term Definition"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#software-design","text":"The process of building a program while satisfying a problem\u2019s functional requirements and not violating its non-functional constraints.","title":"Software Design"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#two-stages","text":"Architectual Design: the process of identifying and assigning the responsibility for aspects of behavior to various modules or components of a software. Detailed design: the process of specifying the behavior of each of the system components that you\u2019ve identified during architectural design.","title":"Two stages:"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#design-notations-for-algorithms","text":"Pseudo code structured programming Flow chart Decision tables","title":"Design Notations for algorithms"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#approaches-aspects","text":"Design method: a particular way of viewing the problem. OOD Structure design Role based design design representation how that design is going to be validated.","title":"Approaches' aspects"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#design-issues","text":"top down, bottom up, inside up? Procedures, functions or nouns, objects. conceptual integrity vs cooperative development. trades-off between Long term maintainability and short term schedule What tools to use?","title":"Design issues"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#how-to-validate-the-design","text":"Independence of validators Dependence on design methods On-going versus after-the-fact","title":"How to validate the design?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#design-concepts","text":"Conceptual integrity Coupling: the extent two components depends on each other for successful execution. Cohension: The extent that the module or component has a single purpose or function. Information hiding: eencapsulating the capabilities that a particular module has behind an abstract interface. Abstraction and Refinement Arrays, structs, record, objects class hierarchy and generation","title":"Design Concepts"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#aesthetics","text":"Beauty, elegance, resolve to wholeness, harmony and radiance. It takes a lot of time and energy to come up with an elegant solution that looks quite simple on the surface, but really satisfies the complex requirements.","title":"Aesthetics"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/1.intro/#design-philosophy","text":"Piete En related software design to four important philosophers. Descartes - analytic geometry. Marx - social processes and classes Martin Heidegger - tools Wittgenstein - the concept of language games, inventing a vocabulary for a particular problem.","title":"Design philosophy"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/","tags":["OMSCS"],"text":"Overview and History \u2693\ufe0e UML Definition \u2693\ufe0e A language for specifying, visualizing, constructing, documenting - the artifacts of software systems - business modelling - non-software systems. Predecessor three amigos \u2693\ufe0e Object Modeling Technique(OMT) by General Electric, James Rumbaugh Book class model diagram - structural aspects state chart diagram - behavioral aspects data flow diagram - functional aspects Booch by Grady Booch Object-oriented software engineering (OOSE) by Ivar Jacobson UML \u201cunified\u201d achieves \u2693\ufe0e It ends many of differences It unifieds different systems\u2019s perspectives Business vs software Development phases internal concepts. UML usage \u2693\ufe0e design is concerned with the solution to that problem. analysis is concerned with the problem being solved. This courses will discuss three or four diagrams. Review of UML and views of a model \u2693\ufe0e The following diagrams Structural diagram shows pieces of the system and the relationships among them. \u2693\ufe0e Class Behavior diagram concerns the executions of the system. \u2693\ufe0e Use case statechart activity interaction - sequence and collaboration implementation \u2693\ufe0e component deployment Benefits of design diagram \u2693\ufe0e Pro \u2693\ufe0e Communication Support of existing methods Tool support Con \u2693\ufe0e Maintainability Diagrams for Analysis and Design \u2693\ufe0e Class Model Diagram and Object Diagram \u2693\ufe0e Dependencies: dashed line with an arrowhead Associations: solid line without arrowheads Aggregation embellishment to the association: solid line with a diamond. Generalization: a solid line with triangle. The only difference with Class Model Diagram: Object diagram contains title \u201cclassName:instance name\u201d Composite Structure Diagrams \u2693\ufe0e Component Diagram \u2693\ufe0e Deployment Diagram \u2693\ufe0e Packages Diagram \u2693\ufe0e Profile Diagram \u2693\ufe0e Use case Diagram \u2693\ufe0e Context Diagram \u2693\ufe0e Sequence Diagram \u2693\ufe0e Communication Diagram \u2693\ufe0e Activity Diagram \u2693\ufe0e Interaction Overview Diagram \u2693\ufe0e Timing Diagram \u2693\ufe0e State Diagram \u2693\ufe0e Object Constraint Language(OCL) \u2693\ufe0e Difference between Association, Aggregation and Composition References \u2693\ufe0e UML CheatSheet","title":"UML"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#overview-and-history","text":"","title":"Overview and History"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#uml-definition","text":"A language for specifying, visualizing, constructing, documenting - the artifacts of software systems - business modelling - non-software systems.","title":"UML Definition"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#predecessor-three-amigos","text":"Object Modeling Technique(OMT) by General Electric, James Rumbaugh Book class model diagram - structural aspects state chart diagram - behavioral aspects data flow diagram - functional aspects Booch by Grady Booch Object-oriented software engineering (OOSE) by Ivar Jacobson","title":"Predecessor three amigos"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#uml-unified-achieves","text":"It ends many of differences It unifieds different systems\u2019s perspectives Business vs software Development phases internal concepts.","title":"UML \"unified\" achieves"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#uml-usage","text":"design is concerned with the solution to that problem. analysis is concerned with the problem being solved. This courses will discuss three or four diagrams.","title":"UML usage"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#review-of-uml-and-views-of-a-model","text":"The following diagrams","title":"Review of UML and views of a model"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#structural-diagram-shows-pieces-of-the-system-and-the-relationships-among-them","text":"Class","title":"Structural diagram shows pieces of the system and the relationships among them."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#behavior-diagram-concerns-the-executions-of-the-system","text":"Use case statechart activity interaction - sequence and collaboration","title":"Behavior diagram concerns the executions of the system."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#implementation","text":"component deployment","title":"implementation"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#benefits-of-design-diagram","text":"","title":"Benefits of design diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#pro","text":"Communication Support of existing methods Tool support","title":"Pro"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#con","text":"Maintainability","title":"Con"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#diagrams-for-analysis-and-design","text":"","title":"Diagrams for Analysis and Design"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#class-model-diagram-and-object-diagram","text":"Dependencies: dashed line with an arrowhead Associations: solid line without arrowheads Aggregation embellishment to the association: solid line with a diamond. Generalization: a solid line with triangle. The only difference with Class Model Diagram: Object diagram contains title \u201cclassName:instance name\u201d","title":"Class Model Diagram and Object Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#composite-structure-diagrams","text":"","title":"Composite Structure Diagrams"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#component-diagram","text":"","title":"Component Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#deployment-diagram","text":"","title":"Deployment Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#packages-diagram","text":"","title":"Packages Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#profile-diagram","text":"","title":"Profile Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#use-case-diagram","text":"","title":"Use case Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#context-diagram","text":"","title":"Context Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#sequence-diagram","text":"","title":"Sequence Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#communication-diagram","text":"","title":"Communication Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#activity-diagram","text":"","title":"Activity Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#interaction-overview-diagram","text":"","title":"Interaction Overview Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#timing-diagram","text":"","title":"Timing Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#state-diagram","text":"","title":"State Diagram"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#object-constraint-languageocl","text":"Difference between Association, Aggregation and Composition","title":"Object Constraint Language(OCL)"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/2.UML/#references","text":"UML CheatSheet","title":"References"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/","tags":["OMSCS"],"text":"Chapter 2 \u2693\ufe0e What\u2019s Design? \u2693\ufe0e Design is both \u201cthe process of defining the architecture, components, interfaces and other characteristics of a system or component\u201d the result of the above process. Design steps \u2693\ufe0e Generate various models Analyze and evaluate their solutions and tradeoffs according to requirements. Use resulting model to plan system verification, validation, construction and testing. The difference between Verification and Validation Verification vs Validation A wicked problem is a problem with no definitive solution. Breakdowns Diagrams \u2693\ufe0e 1.Software Requirements \u2693\ufe0e 2.Software Design \u2693\ufe0e 3.Software Construction(Coding) \u2693\ufe0e 4.Software Testing \u2693\ufe0e 5.Software Maintenance \u2693\ufe0e 6.Software Configuration Management \u2693\ufe0e 7.Software Engineering Management \u2693\ufe0e 8.Software Engineering Process \u2693\ufe0e 9.Software Engineering Models And Methods \u2693\ufe0e 10.Software Quality \u2693\ufe0e 11.Software Engineering Professional Practice \u2693\ufe0e 12.Software Engineering Economics \u2693\ufe0e 13.Computing Foundations \u2693\ufe0e 14.Mathematical Foundations \u2693\ufe0e 15.Engineering Foundations \u2693\ufe0e Reference \u2693\ufe0e Software Engineering Body of Knowledge V3.0 - SWEBOK V3.0, 2014","title":"SWEBOK notes"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#chapter-2","text":"","title":"Chapter 2"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#whats-design","text":"Design is both \u201cthe process of defining the architecture, components, interfaces and other characteristics of a system or component\u201d the result of the above process.","title":"What's Design?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#design-steps","text":"Generate various models Analyze and evaluate their solutions and tradeoffs according to requirements. Use resulting model to plan system verification, validation, construction and testing. The difference between Verification and Validation Verification vs Validation A wicked problem is a problem with no definitive solution.","title":"Design steps"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#breakdowns-diagrams","text":"","title":"Breakdowns Diagrams"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#1software-requirements","text":"","title":"1.Software Requirements"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#2software-design","text":"","title":"2.Software Design"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#3software-constructioncoding","text":"","title":"3.Software Construction(Coding)"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#4software-testing","text":"","title":"4.Software Testing"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#5software-maintenance","text":"","title":"5.Software Maintenance"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#6software-configuration-management","text":"","title":"6.Software Configuration Management"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#7software-engineering-management","text":"","title":"7.Software Engineering Management"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#8software-engineering-process","text":"","title":"8.Software Engineering Process"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#9software-engineering-models-and-methods","text":"","title":"9.Software Engineering Models And Methods"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#10software-quality","text":"","title":"10.Software Quality"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#11software-engineering-professional-practice","text":"","title":"11.Software Engineering Professional Practice"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#12software-engineering-economics","text":"","title":"12.Software Engineering Economics"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#13computing-foundations","text":"","title":"13.Computing Foundations"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#14mathematical-foundations","text":"","title":"14.Mathematical Foundations"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#15engineering-foundations","text":"","title":"15.Engineering Foundations"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/SWEBOK/#reference","text":"Software Engineering Body of Knowledge V3.0 - SWEBOK V3.0, 2014","title":"Reference"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/syllabus/","text":"Time Activity Required Reading Part 1 - Introduction Aug-23 Week 1 P1L1: Introduction (14:24) SWEBOKv3.pdf [focus on Chapter 2] P1L2: Text Browser Exercise (14:34) P1L3: Design Concepts (24:58) Part 2 - UML and Analysis Aug-30 Week 2 P2L1: Review of UML (29:32) UML Specification, Chapter 1 P2L2: Object Oriented Analysis (20:12) Sep-6 Week 3 P2L3: UML Class Models (32:50) P2L4: Design Studies (09:55) Sep-13 Week 4 P2L5: Library Example (UML) (37:20) P2L6: Formal Specification (44:33) Sep-20 Week 5 P2L7: OCL (19:21) OCL Specification, Chapter 7 P2L8: Library Example (OCL) (42:44) Sep-27 Week 6 P2L9: Behavior Modeling (46:38) Harel Paper P2L10: Clock Radio Exercise (31:47) Part 3 - Software Architecture Oct-4 Week 7 P3L1: KWIC Exercise (18:36) P3L2: Software Architecture (34:21) Garlan and Shaw Paper Oct-11 Week 8 P3L3: Architectural Views (17:38) Kruchten Paper P3L4: Text Browser Example (Architecture) (24:49) Oct-18 Week 9 P3L5: Architectural Styles and Non-Functional Requirements (13:33) P3L6: Connectors (24:31) Mehta Paper Oct-25 Week 10 P3L7: ACME (14:26) Medvidovic and Taylor Paper P3L8: Refinement (21:25) Nov-1 Week 11 Design Patterns: Abstraction and Reuse of Object-Oriented, Chapter 1, 5 Larman Chapter 17, 25, 26, 33, 35, 36 P3L9: Middleware (42:48) Emmerich Paper P3L10: LayerBlox Guest Interview (58:48) Part 4 - Software Design Nov-8 Week 12 P4L1: Components (24:23) P4L2: Coffee Maker Example (20:11) Martin, Chapter 11 Nov-15 Week 13 P4L3: Object Design (26:58) P4L4: Design Patterns (34:04) Gamma Paper Nov-22 Week 14 P4L5: Design Principles (19:00) Martin Engineering Notes P4L6: Design Reviews (23:38) Nov-29 Week 15 Geeks in Black: The Code Review (32:59) Quiz #2: SWEBOK Software Design \u2693\ufe0e Quiz 3: UML. \u2693\ufe0e Reference: Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development, Third Edition 6.17 - Applying UML: Use Case Diagrams 6.18 - Applying UML: Activity Diagrams 9.14 - Associations 9.16 - Attributes 13.5 - Applying UML: Package Diagrams 15 - UML Interaction Diagrams 16 - UML Class Diagrams 28 - UML Activity Diagrams and Modeling 29 - UML State Machine Diagrams and Modeling 31 - Domain Model Refinement Quiz #4: Architectural Styles & Models \u2693\ufe0e Most of the questions have been drawn from the Garlan & Shaw paper \u201cIntroduction to Software Architectures\u201d as covered in the previous Reading Discussion: Chapters 1, 2 and 3 (pages 1 - 17) and Chapter 5 (pages 36 - 37). Applying UML and Patterns : An Introduction to Object-Oriented Analysis and Design and Iterative Development, Third Edition (2005 version) text by Craig Larman . 13. Logical Architecture and UML Package Diagrams 33. Architectural Analysis 39. Documenting Architecture: UML and the N+1 View Model Quiz #5: Design Patterns & Related Issues \u2693\ufe0e Gamma, Helm, Johnson, Vlissides Paper - Design Patterns: Abstraction and Reuse of Object-Oriented Design [21 pages - all fair game] Larman Chapter 17. GRASP: Designing Objects with Responsibilities Chapter 25. GRASP: More Objects with Responsibilities Chapter 26. Applying GoF Design Patterns Chapter 33. Architectural Analysis Chapter 35. Package Design Chapter 36. More Object Design with GoF Patterns [Each chapter - all pages fair game as needed]","title":"Syllabus"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/syllabus/#quiz-2-swebok-software-design","text":"","title":"Quiz #2: SWEBOK Software Design"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/syllabus/#quiz-3-uml","text":"Reference: Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development, Third Edition 6.17 - Applying UML: Use Case Diagrams 6.18 - Applying UML: Activity Diagrams 9.14 - Associations 9.16 - Attributes 13.5 - Applying UML: Package Diagrams 15 - UML Interaction Diagrams 16 - UML Class Diagrams 28 - UML Activity Diagrams and Modeling 29 - UML State Machine Diagrams and Modeling 31 - Domain Model Refinement","title":"Quiz 3: UML."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/syllabus/#quiz-4-architectural-styles--models","text":"Most of the questions have been drawn from the Garlan & Shaw paper \u201cIntroduction to Software Architectures\u201d as covered in the previous Reading Discussion: Chapters 1, 2 and 3 (pages 1 - 17) and Chapter 5 (pages 36 - 37). Applying UML and Patterns : An Introduction to Object-Oriented Analysis and Design and Iterative Development, Third Edition (2005 version) text by Craig Larman . 13. Logical Architecture and UML Package Diagrams 33. Architectural Analysis 39. Documenting Architecture: UML and the N+1 View Model","title":"Quiz #4: Architectural Styles &amp; Models"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/syllabus/#quiz-5-design-patterns--related-issues","text":"Gamma, Helm, Johnson, Vlissides Paper - Design Patterns: Abstraction and Reuse of Object-Oriented Design [21 pages - all fair game] Larman Chapter 17. GRASP: Designing Objects with Responsibilities Chapter 25. GRASP: More Objects with Responsibilities Chapter 26. Applying GoF Design Patterns Chapter 33. Architectural Analysis Chapter 35. Package Design Chapter 36. More Object Design with GoF Patterns [Each chapter - all pages fair game as needed]","title":"Quiz #5: Design Patterns &amp; Related Issues"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/text_resources/","tags":["OMSCS"],"text":"Text Resources (resources prepended with \u201c[*]\u201d are downloadable.) \u2693\ufe0e Contents 1 Optional Textbooks 2 Required Readings 3 Additional Texts 3.1 Books 3.2 Papers 3.3 Web Resources Optional Textbooks \u2693\ufe0e There is no required text for this course. However, these three books cover much of the material. Baldwin, Carliss Y. and Kim B. Clark. Design Rules, Vol. 1: The Power of Modularity. (Links to an external site.) The MIT Press, March 15, 2000. Taylor, R. N., N. Medvidovic, and E. M. Dashofy. Software Architecture: Foundations, Theory, and Practice. (Links to an external site.) Wiley, January 9, 2009. Qian, Kai, Ziang Fu, Lixin Tao, Chong-Wei Xu, and Jorge L. Di\u2019az-Herrera. Software Architecture and Design Illuminated. (Links to an external site.) Jones and Bartlett, 2010. Craig Larman. Applying UML and Patterns, An Introduction to OO Analysis and Design, 3d Edition (Links to an external site.) . Prentice-Hall, 2004. Available electronically from the GT Library: Select ebooks, then Safari. Search for Larman. Amy Brown and Greg Wilson (Eds.). The Architecture of Open Source Applications (Links to an external site.) . Published under the Creative Commons Attribution 3.0 Unported license, 2012. Also, if you don\u2019t already own one, access to a Software Engineering introductory text such as Pressman (Links to an external site.) or Sommerville (Links to an external site.) may be helpful. Required Readings \u2693\ufe0e Emmerich, Wolfgang. [ *] \u201cSoftware Engineering and Middleware: A Roadmap\u201d. International Conference on Software Engineering - Future of Software Engineering Track, 117-129, 2000. Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. [ *] Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, pp. 6-9, pp. 275-343, 1995. Garlan, David, and Mary Shaw. [ *] \u201cAn Introduction to Software Architecture.\u201d Carnegie Mellon University Technical Report, CMU-CS-94-166, January 1994. Harel, David. [ *] \u201cOn Visual Formalisms.\u201d Communications of the ACM, 32(5):514-530, May 1988. Kruchten, Philippe. [ *] \u201cThe 4+1 View Model of Architecture.\u201d IEEE Software, 12(6):42-50, November-December 1995. Martin, Robert. [ *] \u201cGranularity.\u201d (Links to an external site.) Excerpt from The C++ Report, Vol. 8, No. 10, November 1996. Martin, Robert. [ *] \u201cHeuristics and Coffee.\u201d Chapter 11 in UML for Java Programmers, Prentice Hall, 2003. Medvidovic, N., and R. N. Taylor. [ *] \u201cA Classification and Comparison Framework for Software Architecture Description Languages.\u201d IEEE Transactions on Software Engineering, 26(1):70-93, January 2000. Mehta, Nikunj R., Nenad Medvidovic, and Sandeep Phadke. [ *] \u201cTowards a Taxonomy of Software Connectors.\u201d Proceedings of the 22 nd International Conference on Software Engineering, Limerick, Ireland, pp. 178-187, 2000. Object Management Group. [* *] OCL Specification V2.3.1.* January, 2012. Object Management Group. [* *] UML Superstructure Specification V2.4.1.* August, 2011. Additional Texts \u2693\ufe0e Books \u2693\ufe0e Baldwin, Carliss Y. and Kim B. Clark. Design Rules, Vol. 1: The Power of Modularity Hardcover. (Links to an external site.) The MIT Press,March 15, 2000. Booch, Grady, James Rumbaugh, and Ivar Jacobson. The Unified Modeling Language User Guide, 2 nd Edition. (Links to an external site.) Addison-Wesley, 2005. Jan Bosch. Design and Use of Software Architectures (Links to an external site.) . Addison-Wesley, May 19, 2000. Clements, Paul, Felix Bachmann, Len Bass, David Garlan, James Ivers, Reed Little, Robert Nord, and Judith Stafford. Documenting Software Architectures: Views and Beyond. (Links to an external site.) Addison-Wesley, 2003. Czarnecki, Krzysztof, and Ulrich Eisenecker. Generative Programming: Methods, Tools, and Applications. (Links to an external site.) Addison-Wesley, 2000. Fowler, Martin. Patterns of Enterprise Application Architecture. (Links to an external site.) Addison-Wesley, 2003. Fowler, Martin. UML Distilled: Applying the Standard Object Modeling Language, 3 rd Edition. (Links to an external site.) Addison-Wesley, 2003. Fowler, Martin, Kent Beck, John Brant, William Opdyke, and Don Roberts. Refactoring: Improving the Design of Existing Code. (Links to an external site.) Addison-Wesley, 1999. Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. (Links to an external site.) Addison-Wesley, 1995. Martin, Robert. Clean Code / A Handbook of Agile Software Craftsmanship (Links to an external site.) . Prentice Hall, 2008. Norman, Don. The Design of Everyday Things, Revised and Extended Edition. (Links to an external site.) Newprint, 2013. Petroski, Henry. The Evolution of Useful Things: How Everyday Artifacts-From Forks and Pins to Paper Clips and Zippers-Came to be as They are. (Links to an external site.) Vintage, February 1, 1994. Prieto-Diaz, Ruben, and Guillermo Arango. Domain Analysis and Software Systems Modeling. (Links to an external site.) IEEE Computer Society Press, 1991. Riel, Arthur. Object-Oriented Design Heuristics. (Links to an external site.) Addison-Wesley, 1996. Rumbaugh, James, Ivar Jacobson, and Grady Booch. The Unified Modeling Language Reference Manual, 2 nd Edition. (Links to an external site.) Addison-Wesley, 2004. Shaw, Mary, and David Garlan. Software Architecture: Perspectives on an Emerging Discipline. (Links to an external site.) Prentice Hall, 1995. Simon, Herbert. The Sciences of the Artificial, 3 rd Edition. (Links to an external site.) MIT Press, 1996. Szyperski, Clemens. Component Software, 2 nd Edition. (Links to an external site.) Addison-Wesley, 2002. Warmer, Jos, and Anneke Kleppe. The Object Constraint Language. (Links to an external site.) Addison-Wesley, 1999. Woodcock, Jim, and Martin Loomes. Software Engineering Mathematics (Links to an external site.) . Addison-Wesley, 1989. Papers \u2693\ufe0e Aksit, M., K. Wakita, J. Bosch, L. Bergmans, and A. Yonezawa. \u201cAbstracting Object-Interactions using Composition-Filters.\u201d Object-based Distributed Processing, R. Guerraoui, O. Nierstrasz, and M. Riveill (eds.), Springer-Verlag, 1993. Batory, Don. [ *] \u201cFeature-Oriented Programming and the AHEAD Tool Suite.\u201d (Links to an external site.) Proceedings of the 26 th International Conference on on Software Engineering, ICSE 2004, pp. 702-703. Batory, Don and Sean O\u2019Malley. [ *] \u201cThe Design and Implementation of Hierarchical Software Systems with Reusable Components.\u201d (Links to an external site.) ACM Transactions on Software Engineering and Methodology (TOSEM), 1(4):355-398, October, 1992. Beugnard, Antoine, Jean-Marc Jezequel, Noel Plouzeau, and Damien Watkins. [ *] \u201cMaking Components Contract Aware.\u201d (Links to an external site.) IEEE Computer, 32(7):38-45, July 1999. DeLine, Robert. [ *] \u201cAvoiding Packaging Mismatch with Flexible Packaging.\u201d (Links to an external site.) International Conference on Software Engineering \u201899, Los Angeles, California, 1999, pp. 97-106. Ehn, Pelle. [ ] \u201cScandinavian Design: On Participation and Skill.\u201d* (Links to an external site.) Chapter 4, Lawrence Erlbaum Associates, Hillsdale, New Jersey, 1993, pp. 41-77. Eichberg, Michael, Sven Kloppenburg, Karl Klose, and Mira Mezini. [ *] \u201cDefining and Continuous Checking of Structural Program Dependencies.\u201d (Links to an external site.) ICSE \u201808: Proceedings of the 30 th International Conference on Software Engineering , Leipzig, Germany, May 2008, pp. 391-400. Fagan, M. E. \u201cDesign and Code Inspections to Reduce Errors in Program Development.\u201d (Links to an external site.) IBM Systems Journal, 15(3):182-211, 1976. Fielding, Roy Thomas. \u201cArchitectural Styles and the Design of Network-based Software Architectures.\u201d (Links to an external site.) Department of Information and Computer Science, University of California, Irvine, 2000. Lau, Kung-Kiu, and Zheng Wang. [ *] \u201cSoftware Component Models.\u201d (Links to an external site.) IEEE Transactions on Software Engineering, 33(10):709-724, October, 2007. Medvidovic, N., D. S. Rosenblum, D. F. Redmiles, and J. E. Robbins. [ *] \u201cModeling Software Architectures in the Unified Modeling Language.\u201d (Links to an external site.) ACM Transactions on Software Engineering and Methodology, 11(1):2-57, January, 2002. Meyer, Bertrand. \u201cOn Formalism in Specifications.\u201d IEEE Software, , 2(1):6-26, January, 1985. Available [ *] here (Links to an external site.) , if you enter through the Georgia Tech Library. Parnas, David L. [ *] \u201cOn the Criteria to be Used in Decomposing Systems into Modules\u201d (Links to an external site.) Communications of the ACM, 15(12):1053-1058, September, 1972. Parnas, David L. [ *] \u201cDesigning Software for Ease of Extension and Contraction.\u201d (Links to an external site.) IEEE Transactions on Software Engineering, SE-5(2):128-138, March, 1979. Parnas, David L. [ *] \u201cOn the Design and Development of Program Families.\u201d (Links to an external site.) IEEE Transactions on Software Engineering, SE-2(1):1-9, 1976. Spitznagel, Bridget, and David Garlan. [ *] \u201cA Compositional Formalization of Connector Wrappers.\u201d (Links to an external site.) 25 th International Conference on Software Engineering (ICSE\u201803), Portland, Oregon, May 3-10, 2003. Smaragdakis, Yannis and Don Batory. [ *] \u201cImplementing Layered Designs with Mixin Layers.\u201d (Links to an external site.) ECOOP\u00e2\u20ac\u212298\u00e2\u20ac\u201dObject-Oriented Programming, pp. 550-570. Stirewalt, Kurt and Spencer Rugaber. \u00e2\u20ac\u0153Automated Invariant Maintenance Via OCL Compilation.\u00e2\u20ac (Links to an external site.) Proceedings of Model Driven Engineering Languages and Systems\u00e2\u20ac\u212205, October 2-7, 2005, Montego Bay, Jamaica, Lionel C. Briand and Clay Williams, editors, Springer-Verlag, Lecture Notes in Computer Science, volume 3713, pp. 616-632. Web Resources \u2693\ufe0e Acme Website (Links to an external site.) Allen Holub, JavaWorld , \u201cWhy extends is evil\u201d, August 2003 (Links to an external site.) Cunningham & Cunningham OO Wiki (Links to an external site.) [ *] Design Study Template (.doc) (Links to an external site.) [ *] First Order Logic Paper (Links to an external site.) Fowler Enterprise Patterns Page (Links to an external site.) JUnit A Cook\u2019s Tour (Links to an external site.) MSDN Chapter on Architectural Patterns and Styles (Links to an external site.) [ *] OO Design Review Guidelines (Links to an external site.) Patterns Home Page (Links to an external site.) [ *] Sample Exam Questions (Links to an external site.) Wikipedia article on Software Architecture Styles and Patterns (Links to an external site.) Student Recommendations \u2693\ufe0e Eric Freeman, Elisabeth Robson, Bert Bates and Kathy Sierra. Head First Design Patterns . O\u2019Reilly Media, October 25, 2004, link (Links to an external site.) .","title":"Text Resources"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/text_resources/#text-resources-resources-prepended-with--are-downloadable","text":"Contents 1 Optional Textbooks 2 Required Readings 3 Additional Texts 3.1 Books 3.2 Papers 3.3 Web Resources","title":"Text Resources (resources prepended with \"[*]\" are downloadable.)"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/text_resources/#optional-textbooks","text":"There is no required text for this course. However, these three books cover much of the material. Baldwin, Carliss Y. and Kim B. Clark. Design Rules, Vol. 1: The Power of Modularity. (Links to an external site.) The MIT Press, March 15, 2000. Taylor, R. N., N. Medvidovic, and E. M. Dashofy. Software Architecture: Foundations, Theory, and Practice. (Links to an external site.) Wiley, January 9, 2009. Qian, Kai, Ziang Fu, Lixin Tao, Chong-Wei Xu, and Jorge L. Di\u2019az-Herrera. Software Architecture and Design Illuminated. (Links to an external site.) Jones and Bartlett, 2010. Craig Larman. Applying UML and Patterns, An Introduction to OO Analysis and Design, 3d Edition (Links to an external site.) . Prentice-Hall, 2004. Available electronically from the GT Library: Select ebooks, then Safari. Search for Larman. Amy Brown and Greg Wilson (Eds.). The Architecture of Open Source Applications (Links to an external site.) . Published under the Creative Commons Attribution 3.0 Unported license, 2012. Also, if you don\u2019t already own one, access to a Software Engineering introductory text such as Pressman (Links to an external site.) or Sommerville (Links to an external site.) may be helpful.","title":"Optional Textbooks"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/text_resources/#required-readings","text":"Emmerich, Wolfgang. [ *] \u201cSoftware Engineering and Middleware: A Roadmap\u201d. International Conference on Software Engineering - Future of Software Engineering Track, 117-129, 2000. Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. [ *] Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, pp. 6-9, pp. 275-343, 1995. Garlan, David, and Mary Shaw. [ *] \u201cAn Introduction to Software Architecture.\u201d Carnegie Mellon University Technical Report, CMU-CS-94-166, January 1994. Harel, David. [ *] \u201cOn Visual Formalisms.\u201d Communications of the ACM, 32(5):514-530, May 1988. Kruchten, Philippe. [ *] \u201cThe 4+1 View Model of Architecture.\u201d IEEE Software, 12(6):42-50, November-December 1995. Martin, Robert. [ *] \u201cGranularity.\u201d (Links to an external site.) Excerpt from The C++ Report, Vol. 8, No. 10, November 1996. Martin, Robert. [ *] \u201cHeuristics and Coffee.\u201d Chapter 11 in UML for Java Programmers, Prentice Hall, 2003. Medvidovic, N., and R. N. Taylor. [ *] \u201cA Classification and Comparison Framework for Software Architecture Description Languages.\u201d IEEE Transactions on Software Engineering, 26(1):70-93, January 2000. Mehta, Nikunj R., Nenad Medvidovic, and Sandeep Phadke. [ *] \u201cTowards a Taxonomy of Software Connectors.\u201d Proceedings of the 22 nd International Conference on Software Engineering, Limerick, Ireland, pp. 178-187, 2000. Object Management Group. [* *] OCL Specification V2.3.1.* January, 2012. Object Management Group. [* *] UML Superstructure Specification V2.4.1.* August, 2011.","title":"Required Readings"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/text_resources/#additional-texts","text":"","title":"Additional Texts"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/text_resources/#books","text":"Baldwin, Carliss Y. and Kim B. Clark. Design Rules, Vol. 1: The Power of Modularity Hardcover. (Links to an external site.) The MIT Press,March 15, 2000. Booch, Grady, James Rumbaugh, and Ivar Jacobson. The Unified Modeling Language User Guide, 2 nd Edition. (Links to an external site.) Addison-Wesley, 2005. Jan Bosch. Design and Use of Software Architectures (Links to an external site.) . Addison-Wesley, May 19, 2000. Clements, Paul, Felix Bachmann, Len Bass, David Garlan, James Ivers, Reed Little, Robert Nord, and Judith Stafford. Documenting Software Architectures: Views and Beyond. (Links to an external site.) Addison-Wesley, 2003. Czarnecki, Krzysztof, and Ulrich Eisenecker. Generative Programming: Methods, Tools, and Applications. (Links to an external site.) Addison-Wesley, 2000. Fowler, Martin. Patterns of Enterprise Application Architecture. (Links to an external site.) Addison-Wesley, 2003. Fowler, Martin. UML Distilled: Applying the Standard Object Modeling Language, 3 rd Edition. (Links to an external site.) Addison-Wesley, 2003. Fowler, Martin, Kent Beck, John Brant, William Opdyke, and Don Roberts. Refactoring: Improving the Design of Existing Code. (Links to an external site.) Addison-Wesley, 1999. Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. (Links to an external site.) Addison-Wesley, 1995. Martin, Robert. Clean Code / A Handbook of Agile Software Craftsmanship (Links to an external site.) . Prentice Hall, 2008. Norman, Don. The Design of Everyday Things, Revised and Extended Edition. (Links to an external site.) Newprint, 2013. Petroski, Henry. The Evolution of Useful Things: How Everyday Artifacts-From Forks and Pins to Paper Clips and Zippers-Came to be as They are. (Links to an external site.) Vintage, February 1, 1994. Prieto-Diaz, Ruben, and Guillermo Arango. Domain Analysis and Software Systems Modeling. (Links to an external site.) IEEE Computer Society Press, 1991. Riel, Arthur. Object-Oriented Design Heuristics. (Links to an external site.) Addison-Wesley, 1996. Rumbaugh, James, Ivar Jacobson, and Grady Booch. The Unified Modeling Language Reference Manual, 2 nd Edition. (Links to an external site.) Addison-Wesley, 2004. Shaw, Mary, and David Garlan. Software Architecture: Perspectives on an Emerging Discipline. (Links to an external site.) Prentice Hall, 1995. Simon, Herbert. The Sciences of the Artificial, 3 rd Edition. (Links to an external site.) MIT Press, 1996. Szyperski, Clemens. Component Software, 2 nd Edition. (Links to an external site.) Addison-Wesley, 2002. Warmer, Jos, and Anneke Kleppe. The Object Constraint Language. (Links to an external site.) Addison-Wesley, 1999. Woodcock, Jim, and Martin Loomes. Software Engineering Mathematics (Links to an external site.) . Addison-Wesley, 1989.","title":"Books"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/text_resources/#papers","text":"Aksit, M., K. Wakita, J. Bosch, L. Bergmans, and A. Yonezawa. \u201cAbstracting Object-Interactions using Composition-Filters.\u201d Object-based Distributed Processing, R. Guerraoui, O. Nierstrasz, and M. Riveill (eds.), Springer-Verlag, 1993. Batory, Don. [ *] \u201cFeature-Oriented Programming and the AHEAD Tool Suite.\u201d (Links to an external site.) Proceedings of the 26 th International Conference on on Software Engineering, ICSE 2004, pp. 702-703. Batory, Don and Sean O\u2019Malley. [ *] \u201cThe Design and Implementation of Hierarchical Software Systems with Reusable Components.\u201d (Links to an external site.) ACM Transactions on Software Engineering and Methodology (TOSEM), 1(4):355-398, October, 1992. Beugnard, Antoine, Jean-Marc Jezequel, Noel Plouzeau, and Damien Watkins. [ *] \u201cMaking Components Contract Aware.\u201d (Links to an external site.) IEEE Computer, 32(7):38-45, July 1999. DeLine, Robert. [ *] \u201cAvoiding Packaging Mismatch with Flexible Packaging.\u201d (Links to an external site.) International Conference on Software Engineering \u201899, Los Angeles, California, 1999, pp. 97-106. Ehn, Pelle. [ ] \u201cScandinavian Design: On Participation and Skill.\u201d* (Links to an external site.) Chapter 4, Lawrence Erlbaum Associates, Hillsdale, New Jersey, 1993, pp. 41-77. Eichberg, Michael, Sven Kloppenburg, Karl Klose, and Mira Mezini. [ *] \u201cDefining and Continuous Checking of Structural Program Dependencies.\u201d (Links to an external site.) ICSE \u201808: Proceedings of the 30 th International Conference on Software Engineering , Leipzig, Germany, May 2008, pp. 391-400. Fagan, M. E. \u201cDesign and Code Inspections to Reduce Errors in Program Development.\u201d (Links to an external site.) IBM Systems Journal, 15(3):182-211, 1976. Fielding, Roy Thomas. \u201cArchitectural Styles and the Design of Network-based Software Architectures.\u201d (Links to an external site.) Department of Information and Computer Science, University of California, Irvine, 2000. Lau, Kung-Kiu, and Zheng Wang. [ *] \u201cSoftware Component Models.\u201d (Links to an external site.) IEEE Transactions on Software Engineering, 33(10):709-724, October, 2007. Medvidovic, N., D. S. Rosenblum, D. F. Redmiles, and J. E. Robbins. [ *] \u201cModeling Software Architectures in the Unified Modeling Language.\u201d (Links to an external site.) ACM Transactions on Software Engineering and Methodology, 11(1):2-57, January, 2002. Meyer, Bertrand. \u201cOn Formalism in Specifications.\u201d IEEE Software, , 2(1):6-26, January, 1985. Available [ *] here (Links to an external site.) , if you enter through the Georgia Tech Library. Parnas, David L. [ *] \u201cOn the Criteria to be Used in Decomposing Systems into Modules\u201d (Links to an external site.) Communications of the ACM, 15(12):1053-1058, September, 1972. Parnas, David L. [ *] \u201cDesigning Software for Ease of Extension and Contraction.\u201d (Links to an external site.) IEEE Transactions on Software Engineering, SE-5(2):128-138, March, 1979. Parnas, David L. [ *] \u201cOn the Design and Development of Program Families.\u201d (Links to an external site.) IEEE Transactions on Software Engineering, SE-2(1):1-9, 1976. Spitznagel, Bridget, and David Garlan. [ *] \u201cA Compositional Formalization of Connector Wrappers.\u201d (Links to an external site.) 25 th International Conference on Software Engineering (ICSE\u201803), Portland, Oregon, May 3-10, 2003. Smaragdakis, Yannis and Don Batory. [ *] \u201cImplementing Layered Designs with Mixin Layers.\u201d (Links to an external site.) ECOOP\u00e2\u20ac\u212298\u00e2\u20ac\u201dObject-Oriented Programming, pp. 550-570. Stirewalt, Kurt and Spencer Rugaber. \u00e2\u20ac\u0153Automated Invariant Maintenance Via OCL Compilation.\u00e2\u20ac (Links to an external site.) Proceedings of Model Driven Engineering Languages and Systems\u00e2\u20ac\u212205, October 2-7, 2005, Montego Bay, Jamaica, Lionel C. Briand and Clay Williams, editors, Springer-Verlag, Lecture Notes in Computer Science, volume 3713, pp. 616-632.","title":"Papers"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/text_resources/#web-resources","text":"Acme Website (Links to an external site.) Allen Holub, JavaWorld , \u201cWhy extends is evil\u201d, August 2003 (Links to an external site.) Cunningham & Cunningham OO Wiki (Links to an external site.) [ *] Design Study Template (.doc) (Links to an external site.) [ *] First Order Logic Paper (Links to an external site.) Fowler Enterprise Patterns Page (Links to an external site.) JUnit A Cook\u2019s Tour (Links to an external site.) MSDN Chapter on Architectural Patterns and Styles (Links to an external site.) [ *] OO Design Review Guidelines (Links to an external site.) Patterns Home Page (Links to an external site.) [ *] Sample Exam Questions (Links to an external site.) Wikipedia article on Software Architecture Styles and Patterns (Links to an external site.)","title":"Web Resources"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/text_resources/#student-recommendations","text":"Eric Freeman, Elisabeth Robson, Bert Bates and Kathy Sierra. Head First Design Patterns . O\u2019Reilly Media, October 25, 2004, link (Links to an external site.) .","title":"Student Recommendations"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/","tags":["OMSCS","UML","Agile","Software-Engineering"],"text":"","title":"Applying UML and Patterns"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/","tags":["OMSCS","UML","Agile","Software Engineering"],"text":"Chapter 1 Object Oriented Analysis and Design(OOA/D) \u2693\ufe0e Objectives: What\u2019s the book goals and scope? \u2693\ufe0e Interactive development process via an agile approach to Unified Process(UP) \u2693\ufe0e How to create an excellent OO design? classic OO design metaphor: responsibility-driven design. How to use the language for \u201csoftware blueprints\u201d, displaying thought and the form of communication? Introduction to OOA/D and Applying UML. \u2693\ufe0e Focus on fundamentals \u2693\ufe0e how to assign responsibilities to objects, UML notation, common design patterns. principles, heuristics or design patterns(problem solution formulas for design principles) requirements analysis related to use cases. Intermediate level topics: framework design and architectural analysis. \u2693\ufe0e In conclusion: Create better object designs by applying principles and patterns Iteratively follow common analysis and design activities, an agile approach to UP. Create frequently used UML diagrams. Topics and skills covered How to define OOA/D? \u2693\ufe0e Do the right thing Analysis is to investigate the problem and requirements rather than a solution. e.g. Requirements analysis or object oriented analysis. In OO, analysis is to find and describe the objects/concepts in the problem domain. Do the thing right Design emphasizes a conceptual solution to fulfil the requirements rather than its implementation. In OO, design is to define software objects and how they collaborate to fulfill the requirements. A Short Example \u2693\ufe0e Requirements Analysis - Define use cases (Use case UML) Define domain model - show noteworthy domain concepts or objects. Domain model = conceptual object model. (Domain Model diagram for real-world classes) Assign object responsibilities and collaborations, draw interaction diagrams. (sequence diagram) Design class diagram to have a static view of the class. (software classes diagram) What\u2019s the overview UML and visual agile modeling. \u2693\ufe0e UML is a visual language to specify and construct, document the artifacts of systems. At deeper level in Model Driven Architecture(MDA), UML notation is the UML meta-model. Three ways to apply UML - As Sketch, informal and incomplete hand drawing on whiteboards. - As Blueprint, reverse engineering to visualize and understand the code or code generation(forward engineering). - As programming language, to generate the executable code. Three perspectives to apply UML \u2693\ufe0e Conceptual perspective Specification(software) perspective Implementation(software) perspective Ch.2 Iterative, Evolutionary, and Agile \u2693\ufe0e How to define an iterative and agile process \u2693\ufe0e Software Development process describes the approach for the software Building Deploying maintaining UP includes skill practices Extreme Programming(XP) Test Driven Development(TDD) Refactoring Continuous integration(CI) Scrum Common Project room(war room) daily scrum Iterative lifecycle Risk-driven development Three reasons to introduce UP \u2693\ufe0e UP is an iterative process. UP provides an example structure for how to do OOA/D UP is flexible and a lightweight. The central idea of this book \u2693\ufe0e How to think and design with objects apply UML use design pattern, agile modeling evolutionary requirements analysis writing use cases. Modern iterative, evolutionary and agile methods \u2693\ufe0e Scrum Lean Development Dynamic systems development method(DSDM) Feature-Driven Development Adaptive software Development. How to define fundamental concepts in the Unified Process(UP)? \u2693\ufe0e Feedback and adaptation evolve the specification and design, it\u2019s known as iterative and evolutionary development. Figure 2.1. Iterative and evolutionary development. 3 Weeks iteration \u2693\ufe0e Monday 1 hour morning clarifying the tasks and goals One person reverse-engineering last iteration code into UML The team use whiteboards for agile modeling, sketching rough UML, write pseudo-code and design notes. Remaining days: Implementation testing(unit, acceptance, usability) further design integration daily builds. How to Handle Change on an Iterative Project? \u2693\ufe0e Figure 2.2. Iterative feedback and evolution leads towards the desired system. The requirements and design instability lowers over time Benefits to iterative development \u2693\ufe0e Less project failure, better productivity, lower defects rates. Early mitigation of high risks(technical, requirements, objectives, usability, etc) Early visible progress Early feedback, user engagement and adaptation Managed complexity an iteration learning can methodically improve the development process. Iteration by iteration. How long should an iteration be? \u2693\ufe0e Two to six weeks. Central idea: small steps, rapid feedback, adaptation. Waterfall lifecycle \u2693\ufe0e High rate of failure Lower productivity higher defect rates. Waterfall thinking based on speculation and hearsay. Write most requirements before development, Create thorough and detailed specifications or detailed OO UML models, designs before programming. Write all use cases before starting to program. Feedback and Adaptation \u2693\ufe0e Early development feedbacks help programmers read specification and client demos to refine requirements. Tests feedbacks help developers refine the design or models. Team progress of early features\u2019 feedbacks help refine the schedule and estimates. Client and marketplace feedbacks help re-prioritize the features. How to do Iterative and Evolutionary Analysis and Design? \u2693\ufe0e Clarify the requirements in workshops, improve CI/CD must-to-have, design workshops, implement and testing, elaboration phase, then implement. 1. Iteration-1 \u2693\ufe0e Two days for time-boxed requirements workshop, engaged business and development people, chief architect. Day-1 morning, high level requirement analysis, identify use case names, features, and key non-functional requirements. Pick 10% from high level list, which are architecturally significant, high business value, or high risk Perhaps 3 use cases. 1.5 days, do intensive detailed analysis for three use cases, UC. 2. an iteration planning meeting \u2693\ufe0e Investigate UCs and then design, build, and test within timeboxed iteration. Break them down into a set of more detailed iteration tasks. 3. Do iteration-1 over 3 weeks. \u2693\ufe0e First 2 days, modeling and design work in pairs, sketching UML diagrams at whiteboards in a common war room, coached and guided by the chief architect. Programming, testing and integrating their work over the remaining weeks, using the modeling UMLs. More testing: unit, acceptance, load, usability, etc. One week before the end, check the goals, de-scope the iteration, put the secondary goals back to TODO list. Tuesday of the last week, code freeze, create iteration baseline. Wednesday morning, demo the partial system to stakeholders, collect feedbacks. 4. 2 nd requirements workshop near the end of iteration-1. \u2693\ufe0e Review and refine materials, pick another 10% to 15% use cases with significant and of high business value, analyze them in details. 5. Friday morning, hold another iteration planning meeting. \u2693\ufe0e 6. Do iteration-2 with similar steps. \u2693\ufe0e 7. Iteration Repeat. \u2693\ufe0e for four iterations and five requirements workshops, 80% to 90% requirements have been written in details, the end of elaboration phase . 8. Stabilized requirements and then implementation. \u2693\ufe0e Requirements workshops are unlikely. The requirements are stabilized. Keep ask this in each iteration: \u201cGiven what we know today, what are the most critical technical and business features we should do in the next three weeks?\u201d What is Risk-Driven and Client-Driven Iterative Planning? \u2693\ufe0e Risk driven: identify and drive down the highest risks. Including architecture centric iterative development because not having a solid architecture is a common high risk. Client-Driven: build visible features that client cares most about. What are Agile Methods and Attitudes? \u2693\ufe0e Figure 2.4. Evolutionary analysis and design\u2014the majority in early iterations Basic practice in Agile method \u2693\ufe0e Short timeboxed iterations with evolutionary refinement of plans, requirements, and design. promoting practices and principles for simplicity, lightness, communication, self-organizing teams. Four special questions in each stand-up meeting. Agile Manifesto and Principles \u2693\ufe0e Agile Alliance ( www.agilealliance.com ) with a manifesto and statement of principles to capture the spirit of agile methods. The Agile Manifesto \u2693\ufe0e Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan The Agile Principles \u2693\ufe0e 1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 8. Agile processes promote sustainable development. 2. Welcome changing requirements, even late in development. Agile processes harness change for the customer\u2019s competitive advantage. 9. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter time scale. 10. Continuous attention to technical excellence and good design enhances agility. 4. Business people and developers must work together daily throughout the project. 11. Simplicity\u2014the art of maximizing the amount of work not done\u2014is essential. 5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 12. The best architectures, requirements, and designs emerge from self-organizing teams. 6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 13. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. 7. Working software is the primary measure of progress. What is Agile Modeling? \u2693\ufe0e The purpose of modeling (sketching UML, \u2026) is primarily to understand , not to document. UML can help quickly explore alternatives and the path to a good OO design. Model and apply the UML for the unusual, difficult, tricky parts of the design space. Use the simpletest tool possible. Whiteboard or UML CASE tool. Model in pairs or triads, discover, understand and share that understanding, rotate pen sketching. Create models in parrallel with dynamic-view UML interaction diagram and static-view UML class diagram. Treat prior diagrams lightly as throw-away explorations. Only tested code demonstrates the true design. Developers themselves should do the OO design modeling for themselves. Agile Modeling in this Book: Why the Snapshots of UML Sketches? \u2693\ufe0e UML-sketch modeling on whiteboards is a practice I. What is an Agile UP? \u2693\ufe0e Prefer a small set of activities and artifacts. Requiremments and designs adaptively emerge through iterations based on feedbacks. Apply UML with agile modeling practices. Phase Plan - High level plan and Detailed Plan - Iteration Plan. Critical UP Practices? \u2693\ufe0e short timeboxed iterative evolutionary adaptive development tackle high risk and high customer value issues in early iterations. continuously engage users for evaluation, feedbacks, requirements. build a cohesive architecture continously verify quality Apply use cases Visual modeling with UML manage requirements practice change request and configuration management What are the UP Phases? \u2693\ufe0e *Inception\u2014* . approximate vision, business case, scope, vague estimates. *Elaboration\u2014* . refined vision, iterative implementation of the core architecture , resolution of high risks , identification of most requirements and scope, more realistic estimates. *Construction\u2014* . iterative implementation of the remaining lower risk and easier elements, and preparation for deployment. *Transition\u2014* . beta tests, deployment. Figure 2.6. Schedule-oriented terms in the UP. What are the UP Disciplines? \u2693\ufe0e Figure 2.7. UP disciplines. What is the Relationship Between the Disciplines and Phases? \u2693\ufe0e Disciplines and phases. Figure 2.8. Disciplines and phases. How is the Book Structure Influenced by UP Phases and Disciplines? \u2693\ufe0e Figure 2.9. Book organization is related to the UP phases and iterations. Definition: What is the Development Case? \u2693\ufe0e Table 2.1. Sample Development Case. s - start; r - refine Discipline Practice Artifact Incep. Elab. Const. Trans. Iteration \u2192 I1 E1..En C1..Cn T1..T2 Business Modeling agile modeling req. workshop Domain Model s Requirements req. workshop vision box exercise dot voting Use-Case Model s r Vision s r Supplementary Specification s r Glossary s r Design agile modeling test-driven dev. Design Model s r SW Architecture Document s Data Model s r Implementation test-driven dev. pair programming continuous integration coding standards \u2026 Project Management agile PM daily Scrum meeting \u2026 \u2026 You Know You Didn\u2019t Understand Iterative Development or the UP When\u2026 \u2693\ufe0e You try to define requirements before design or implementation, define design before implementation, or define an architecture before iterative programming and testing. Doing UML modeling before programming, regarding programming as a simple mechanical translation of UML into code. Believing inception = requirements, elaboration = design, and construction = implementation (that is, superimposing the waterfall on the UP). Regarding elaboration purpose is to define models and construct code. Iteration length is three months long instead of three weeks. Adpoting the UP means many activities and create many documents. Plan a project in details, speculatively predict activities. History \u2693\ufe0e In the late 1950s , evolutionary, iterative, and incremental development (IID), rather than the waterfall. The first published paper promoting iterative rather than waterfall development was published in 1968 at the IBM T.J. Watson Research Center. IID was used on many large defense and aerospace projects in the 1970s . Also in the 1980s , Dr. Frederick Brooks (of Mythical Man-Month fame), wrote and spoke about the shortcomings of the waterfall and the need to instead use IID methods. By the early 1990s , IID was widely recognized as the successor to the waterfall, and there was a flowering of iterative and evolutionary methods: UP, DSDM, Scrum, XP, and many more. Ch.3 Case Studies. \u2693\ufe0e Why focus on OOA/D in the core application logic layer? \u2693\ufe0e Figure 3.1. Sample layers and objects in an object-oriented system, and the case study focus Only application logic layer are language, technology, platform independent. Methodology \u2693\ufe0e Iterations: Core functions, a core set of analysis and design topics and notation New ideas, UML notation, patterns Likewise Case One: The NextGen POS System \u2693\ufe0e Case Two: The Monopoly Game System \u2693\ufe0e","title":"Applying UML and Patterns - Part 1"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#chapter-1-object-oriented-analysis-and-designooad","text":"Objectives:","title":"Chapter 1 Object Oriented Analysis and Design(OOA/D)"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#whats-the-book-goals-and-scope","text":"","title":"What's the book goals and scope?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#interactive-development-process-via-an-agile-approach-to-unified-processup","text":"How to create an excellent OO design? classic OO design metaphor: responsibility-driven design. How to use the language for \u201csoftware blueprints\u201d, displaying thought and the form of communication?","title":"Interactive development process via an agile approach to Unified Process(UP)"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#introduction-to-ooad-and-applying-uml","text":"","title":"Introduction to OOA/D and Applying UML."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#focus-on-fundamentals","text":"how to assign responsibilities to objects, UML notation, common design patterns. principles, heuristics or design patterns(problem solution formulas for design principles) requirements analysis related to use cases.","title":"Focus on fundamentals"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#intermediate-level-topics-framework-design-and-architectural-analysis","text":"In conclusion: Create better object designs by applying principles and patterns Iteratively follow common analysis and design activities, an agile approach to UP. Create frequently used UML diagrams. Topics and skills covered","title":"Intermediate level topics: framework design and architectural analysis."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#how-to-define-ooad","text":"Do the right thing Analysis is to investigate the problem and requirements rather than a solution. e.g. Requirements analysis or object oriented analysis. In OO, analysis is to find and describe the objects/concepts in the problem domain. Do the thing right Design emphasizes a conceptual solution to fulfil the requirements rather than its implementation. In OO, design is to define software objects and how they collaborate to fulfill the requirements.","title":"How to define OOA/D?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#a-short-example","text":"Requirements Analysis - Define use cases (Use case UML) Define domain model - show noteworthy domain concepts or objects. Domain model = conceptual object model. (Domain Model diagram for real-world classes) Assign object responsibilities and collaborations, draw interaction diagrams. (sequence diagram) Design class diagram to have a static view of the class. (software classes diagram)","title":"A Short Example"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#whats-the-overview-uml-and-visual-agile-modeling","text":"UML is a visual language to specify and construct, document the artifacts of systems. At deeper level in Model Driven Architecture(MDA), UML notation is the UML meta-model. Three ways to apply UML - As Sketch, informal and incomplete hand drawing on whiteboards. - As Blueprint, reverse engineering to visualize and understand the code or code generation(forward engineering). - As programming language, to generate the executable code.","title":"What's the overview UML and visual agile modeling."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#three-perspectives-to-apply-uml","text":"Conceptual perspective Specification(software) perspective Implementation(software) perspective","title":"Three perspectives to apply UML"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#ch2-iterative-evolutionary-and-agile","text":"","title":"Ch.2 Iterative, Evolutionary, and Agile"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#how-to-define-an-iterative-and-agile-process","text":"Software Development process describes the approach for the software Building Deploying maintaining UP includes skill practices Extreme Programming(XP) Test Driven Development(TDD) Refactoring Continuous integration(CI) Scrum Common Project room(war room) daily scrum Iterative lifecycle Risk-driven development","title":"How to define an iterative and agile process"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#three-reasons-to-introduce-up","text":"UP is an iterative process. UP provides an example structure for how to do OOA/D UP is flexible and a lightweight.","title":"Three reasons to introduce UP"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#the-central-idea-of-this-book","text":"How to think and design with objects apply UML use design pattern, agile modeling evolutionary requirements analysis writing use cases.","title":"The central idea of this book"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#modern-iterative-evolutionary-and-agile-methods","text":"Scrum Lean Development Dynamic systems development method(DSDM) Feature-Driven Development Adaptive software Development.","title":"Modern iterative, evolutionary and agile methods"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#how-to-define-fundamental-concepts-in-the-unified-processup","text":"Feedback and adaptation evolve the specification and design, it\u2019s known as iterative and evolutionary development. Figure 2.1. Iterative and evolutionary development.","title":"How to define fundamental concepts in the Unified Process(UP)?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#3-weeks-iteration","text":"Monday 1 hour morning clarifying the tasks and goals One person reverse-engineering last iteration code into UML The team use whiteboards for agile modeling, sketching rough UML, write pseudo-code and design notes. Remaining days: Implementation testing(unit, acceptance, usability) further design integration daily builds.","title":"3 Weeks iteration"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#how-to-handle-change-on-an-iterative-project","text":"Figure 2.2. Iterative feedback and evolution leads towards the desired system. The requirements and design instability lowers over time","title":"How to Handle Change on an Iterative Project?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#benefits-to-iterative-development","text":"Less project failure, better productivity, lower defects rates. Early mitigation of high risks(technical, requirements, objectives, usability, etc) Early visible progress Early feedback, user engagement and adaptation Managed complexity an iteration learning can methodically improve the development process. Iteration by iteration.","title":"Benefits to iterative development"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#how-long-should-an-iteration-be","text":"Two to six weeks. Central idea: small steps, rapid feedback, adaptation.","title":"How long should an iteration be?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#waterfall-lifecycle","text":"High rate of failure Lower productivity higher defect rates. Waterfall thinking based on speculation and hearsay. Write most requirements before development, Create thorough and detailed specifications or detailed OO UML models, designs before programming. Write all use cases before starting to program.","title":"Waterfall lifecycle"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#feedback-and-adaptation","text":"Early development feedbacks help programmers read specification and client demos to refine requirements. Tests feedbacks help developers refine the design or models. Team progress of early features\u2019 feedbacks help refine the schedule and estimates. Client and marketplace feedbacks help re-prioritize the features.","title":"Feedback and Adaptation"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#how-to-do-iterative-and-evolutionary-analysis-and-design","text":"Clarify the requirements in workshops, improve CI/CD must-to-have, design workshops, implement and testing, elaboration phase, then implement.","title":"How to do Iterative and Evolutionary Analysis and Design?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#1-iteration-1","text":"Two days for time-boxed requirements workshop, engaged business and development people, chief architect. Day-1 morning, high level requirement analysis, identify use case names, features, and key non-functional requirements. Pick 10% from high level list, which are architecturally significant, high business value, or high risk Perhaps 3 use cases. 1.5 days, do intensive detailed analysis for three use cases, UC.","title":"1. Iteration-1"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#2-an-iteration-planning-meeting","text":"Investigate UCs and then design, build, and test within timeboxed iteration. Break them down into a set of more detailed iteration tasks.","title":"2. an iteration planning meeting"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#3-do-iteration-1-over-3-weeks","text":"First 2 days, modeling and design work in pairs, sketching UML diagrams at whiteboards in a common war room, coached and guided by the chief architect. Programming, testing and integrating their work over the remaining weeks, using the modeling UMLs. More testing: unit, acceptance, load, usability, etc. One week before the end, check the goals, de-scope the iteration, put the secondary goals back to TODO list. Tuesday of the last week, code freeze, create iteration baseline. Wednesday morning, demo the partial system to stakeholders, collect feedbacks.","title":"3. Do iteration-1 over 3 weeks."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#4-2nd-requirements-workshop-near-the-end-of-iteration-1","text":"Review and refine materials, pick another 10% to 15% use cases with significant and of high business value, analyze them in details.","title":"4. 2nd requirements workshop near the end of iteration-1."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#5-friday-morning-hold-another-iteration-planning-meeting","text":"","title":"5. Friday morning, hold another iteration planning meeting."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#6-do-iteration-2-with-similar-steps","text":"","title":"6. Do iteration-2 with similar steps."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#7-iteration-repeat","text":"for four iterations and five requirements workshops, 80% to 90% requirements have been written in details, the end of elaboration phase .","title":"7. Iteration Repeat."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#8-stabilized-requirements-and-then-implementation","text":"Requirements workshops are unlikely. The requirements are stabilized. Keep ask this in each iteration: \u201cGiven what we know today, what are the most critical technical and business features we should do in the next three weeks?\u201d","title":"8. Stabilized requirements and then implementation."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#what-is-risk-driven-and-client-driven-iterative-planning","text":"Risk driven: identify and drive down the highest risks. Including architecture centric iterative development because not having a solid architecture is a common high risk. Client-Driven: build visible features that client cares most about.","title":"What is Risk-Driven and Client-Driven Iterative Planning?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#what-are-agile-methods-and-attitudes","text":"Figure 2.4. Evolutionary analysis and design\u2014the majority in early iterations","title":"What are Agile Methods and Attitudes?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#basic-practice-in-agile-method","text":"Short timeboxed iterations with evolutionary refinement of plans, requirements, and design. promoting practices and principles for simplicity, lightness, communication, self-organizing teams. Four special questions in each stand-up meeting.","title":"Basic practice in Agile method"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#agile-manifesto-and-principles","text":"Agile Alliance ( www.agilealliance.com ) with a manifesto and statement of principles to capture the spirit of agile methods.","title":"Agile Manifesto and Principles"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#the-agile-manifesto","text":"Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan","title":"The Agile Manifesto"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#the-agile-principles","text":"1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 8. Agile processes promote sustainable development. 2. Welcome changing requirements, even late in development. Agile processes harness change for the customer\u2019s competitive advantage. 9. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter time scale. 10. Continuous attention to technical excellence and good design enhances agility. 4. Business people and developers must work together daily throughout the project. 11. Simplicity\u2014the art of maximizing the amount of work not done\u2014is essential. 5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 12. The best architectures, requirements, and designs emerge from self-organizing teams. 6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 13. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. 7. Working software is the primary measure of progress.","title":"The Agile Principles"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#what-is-agile-modeling","text":"The purpose of modeling (sketching UML, \u2026) is primarily to understand , not to document. UML can help quickly explore alternatives and the path to a good OO design. Model and apply the UML for the unusual, difficult, tricky parts of the design space. Use the simpletest tool possible. Whiteboard or UML CASE tool. Model in pairs or triads, discover, understand and share that understanding, rotate pen sketching. Create models in parrallel with dynamic-view UML interaction diagram and static-view UML class diagram. Treat prior diagrams lightly as throw-away explorations. Only tested code demonstrates the true design. Developers themselves should do the OO design modeling for themselves.","title":"What is Agile Modeling?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#agile-modeling-in-this-book-why-the-snapshots-of-uml-sketches","text":"UML-sketch modeling on whiteboards is a practice I.","title":"Agile Modeling in this Book: Why the Snapshots of UML Sketches?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#what-is-an-agile-up","text":"Prefer a small set of activities and artifacts. Requiremments and designs adaptively emerge through iterations based on feedbacks. Apply UML with agile modeling practices. Phase Plan - High level plan and Detailed Plan - Iteration Plan.","title":"What is an Agile UP?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#critical-up-practices","text":"short timeboxed iterative evolutionary adaptive development tackle high risk and high customer value issues in early iterations. continuously engage users for evaluation, feedbacks, requirements. build a cohesive architecture continously verify quality Apply use cases Visual modeling with UML manage requirements practice change request and configuration management","title":"Critical UP Practices?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#what-are-the-up-phases","text":"*Inception\u2014* . approximate vision, business case, scope, vague estimates. *Elaboration\u2014* . refined vision, iterative implementation of the core architecture , resolution of high risks , identification of most requirements and scope, more realistic estimates. *Construction\u2014* . iterative implementation of the remaining lower risk and easier elements, and preparation for deployment. *Transition\u2014* . beta tests, deployment. Figure 2.6. Schedule-oriented terms in the UP.","title":"What are the UP Phases?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#what-are-the-up-disciplines","text":"Figure 2.7. UP disciplines.","title":"What are the UP Disciplines?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#what-is-the-relationship-between-the-disciplines-and-phases","text":"Disciplines and phases. Figure 2.8. Disciplines and phases.","title":"What is the Relationship Between the Disciplines and Phases?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#how-is-the-book-structure-influenced-by-up-phases-and-disciplines","text":"Figure 2.9. Book organization is related to the UP phases and iterations.","title":"How is the Book Structure Influenced by UP Phases and Disciplines?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#definition-what-is-the-development-case","text":"Table 2.1. Sample Development Case. s - start; r - refine Discipline Practice Artifact Incep. Elab. Const. Trans. Iteration \u2192 I1 E1..En C1..Cn T1..T2 Business Modeling agile modeling req. workshop Domain Model s Requirements req. workshop vision box exercise dot voting Use-Case Model s r Vision s r Supplementary Specification s r Glossary s r Design agile modeling test-driven dev. Design Model s r SW Architecture Document s Data Model s r Implementation test-driven dev. pair programming continuous integration coding standards \u2026 Project Management agile PM daily Scrum meeting \u2026 \u2026","title":"Definition: What is the Development Case?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#you-know-you-didnt-understand-iterative-development-or-the-up-when","text":"You try to define requirements before design or implementation, define design before implementation, or define an architecture before iterative programming and testing. Doing UML modeling before programming, regarding programming as a simple mechanical translation of UML into code. Believing inception = requirements, elaboration = design, and construction = implementation (that is, superimposing the waterfall on the UP). Regarding elaboration purpose is to define models and construct code. Iteration length is three months long instead of three weeks. Adpoting the UP means many activities and create many documents. Plan a project in details, speculatively predict activities.","title":"You Know You Didn't Understand Iterative Development or the UP When..."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#history","text":"In the late 1950s , evolutionary, iterative, and incremental development (IID), rather than the waterfall. The first published paper promoting iterative rather than waterfall development was published in 1968 at the IBM T.J. Watson Research Center. IID was used on many large defense and aerospace projects in the 1970s . Also in the 1980s , Dr. Frederick Brooks (of Mythical Man-Month fame), wrote and spoke about the shortcomings of the waterfall and the need to instead use IID methods. By the early 1990s , IID was widely recognized as the successor to the waterfall, and there was a flowering of iterative and evolutionary methods: UP, DSDM, Scrum, XP, and many more.","title":"History"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#ch3-case-studies","text":"","title":"Ch.3 Case Studies."},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#why-focus-on-ooad-in-the-core-application-logic-layer","text":"Figure 3.1. Sample layers and objects in an object-oriented system, and the case study focus Only application logic layer are language, technology, platform independent.","title":"Why focus on OOA/D in the core application logic layer?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#methodology","text":"Iterations: Core functions, a core set of analysis and design topics and notation New ideas, UML notation, patterns Likewise","title":"Methodology"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#case-one-the-nextgen-pos-system","text":"","title":"Case One: The NextGen POS System"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part1-Introduction/#case-two-the-monopoly-game-system","text":"","title":"Case Two: The Monopoly Game System"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/","tags":["OMSCS","UML","Agile","Software Engineering"],"text":"Chapter 4 Inception is Not the Requirements Phase \u2693\ufe0e What is Inception? \u2693\ufe0e Inception in one sentence: Envision the product scope, vision, and business case. The main problem solved in one sentence: Do the stakeholders have basic agreement on the vision of the project, and is it worth investing in serious investigation? What Artifacts May Start in Inception? \u2693\ufe0e Table 4.1. Sample inception artifacts. Artifact [ \u2020] Comment Vision and Business Case Describes the high-level goals and constraints, the business case, and provides an executive summary. Use-Case Model Describes the functional requirements. During inception, the names of most use cases will be identified, and perhaps 10% of the use cases will be analyzed in detail. Supplementary Specification Describes other requirements, mostly non-functional . During inception, it is useful to have some idea of the key non-functional requirements that have will have a major impact on the architecture. Glossary Key domain terminology, and data dictionary. Risk List & Risk Management Plan Describes the risks (business, technical, resource, schedule) and ideas for their mitigation or response. Prototypes and proof-of-concepts To clarify the vision, and validate technical ideas. Iteration Plan Describes what to do in the first elaboration iteration. Phase Plan & Software Development Plan Low-precision guess for elaboration phase duration and effort. Tools, people, education, and other resources. Development Case A description of the customized UP steps and artifacts for this project. In the UP, one always customizes it for the project. [ \u2020] -These artifacts are only partially completed in this phase. They will be iteratively refined in subsequent iterations. Name capitalization implies an officially named UP artifact. May do some programming work \u2693\ufe0e \u201cproof of concept\u201d via UI oridented prototypes experiments for key \u201cshow stopper\u201d technical questions Isn\u2019t That a Lot of Documentation? \u2693\ufe0e That\u2019s an Agile Modeling perspective: that the greatest value of modeling is to improve understanding, rather than to document reliable specifications. How Much UML During Inception? \u2693\ufe0e Perhaps beyond simple UML use case diagrams , not much diagramming is warranted. Chapter 5 Evolutionary Requirements \u2693\ufe0e Definition: Requirements \u2693\ufe0e Requirements are capabilities and conditions to which the system\u2014and more broadly, the project\u2014must conform A prime challenge of requirements analysis is to find, communicate, and remember (that usually means write down) what is really needed, in a form that clearly speaks to the client and development team members. What are the Types and Categories of Requirements? \u2693\ufe0e FURPS+ model \u2693\ufe0e *Functional\u2014* . features, capabilities, security. *Usability\u2014* . human factors, help, documentation. *Reliability\u2014* . frequency of failure, recoverability, predictability. *Performance\u2014* . response times, throughput, accuracy, availability, resource usage. *Supportability\u2014* . adaptability, maintainability, internationalization, configurability . The \u201c+\u201d in FURPS+ indicates ancillary and sub-factors, such as: *Implementation\u2014* . resource limitations, languages and tools, hardware, \u2026 *Interface\u2014* . constraints imposed by interfacing with external systems. *Operations\u2014* . system management in its operational setting. *Packaging\u2014* . for example, a physical box. *Legal\u2014* . licensing and so forth. functional (behavioral) or non-functional (everything else); Requirements in UP artifacts \u2693\ufe0e Use-case model for functional (behavioral) requirements Supplementary speficiation - non-functional requirements, such as performance or licensing. Or features not in use cases, e.g. a report generation Glossary - terms and data dictionary for validation rules, acceptable values, etc. Vision - A short executive overview document to summarize high-level requirements and the business case Business Rule , e.g. government tax laws Chapter 6 Use cases \u2693\ufe0e Introduction \u2693\ufe0e The following diagram illustrate write Business Modeling into requirements, then into design. Figure 6.1. Sample UP artifact influence. Definition: What are Actors, Scenarios, and Use Cases? \u2693\ufe0e Definition : Informally then, a use case is a collection of related success and failure scenarios that describe an actor using a system to support a goal . An Actor is somthing with behavior, such as a person A Scenario (a use case instance) is a specific sequence of actions and interactions between actors and the system. A use case is a collection of related success and failure scenarios that describe an actor using a system to support a goal. Use cases are a key requirements input to classic OOA/D . Use Cases and the Use-Case Model \u2693\ufe0e Use cases are text documents, not diagrams, and use-case modeling is primarily an act of writing text, not drawing diagrams. Motivation: why use cases? \u2693\ufe0e A good way to keep it simple for everyone. It emphasize the user goals and perspective. We ask the questions - \u201c Who is using the system, what are their typical scenarios of use, and what are their goals ?\u201d Definition: What are Three Kinds of Actors? \u2693\ufe0e An actor includes the system under discussion(SuD). Primary actor to find user goals Supporting actor to clarify external interfaces and protocols. Offstage actor to ensure that all necessary interests are identified and satisfied. e.g. a government tax agency. Notation: What are Three Common Use Case Formats? \u2693\ufe0e Brief - early requirements analysis to get a quick sense Causual - Informal paragraph format. Fully dressed - steps and variations are written in details, including preconditions and success guarantees. Guideline: Write Terse Use Cases \u2693\ufe0e Guideline: Write Black-Box Use Cases \u2693\ufe0e Guideline: Take an Actor and Actor-Goal Perspective \u2693\ufe0e A set of use-case instances, where each instance is a sequence of actions a system performs that yields an observable result of value to a particular actor . Guideline: How to Find Use Cases \u2693\ufe0e Step 1: Choose the System Boundary \u2693\ufe0e Find the System Under Discussion(SuD) Steps 2 and 3: Find Primary Actors and Goals \u2693\ufe0e Questions list Who starts and stops the system? Who does system administration? Who does user and security management? Is \u201ctime\u201d an actor because the system does something in response to a time event? Is there a monitoring process that restarts the system if it fails? Who evaluates system activity or performance? How are software updates handled? Push or pull update? Who evaluates logs? Are they remotely retrieved? In addition to human primary actors, are there any external software or robotic systems that call upon services of the system? Who gets notified when there are errors or failures? How to Organize the Actors and Goals? Two approaches: Discover the results, name the goals as use cases Write an actor-goal list first, review and refine, then draw the use case diagram. Other Ways to Find Actors and Goals? Event Analysis Step 4: Define Use Cases \u2693\ufe0e Define one use case for each user goal, start the name of use cases with a verb. Guideline: What Tests Can Help Find Useful Use Cases? \u2693\ufe0e The Boss Test \u2693\ufe0e The Elementary Business Process ( EBP ) Test (Dogfooding?) \u2693\ufe0e The Size Test \u2693\ufe0e Applying UML: Use Case Diagrams \u2693\ufe0e Partial Use case Diagram","title":"Applying UML and Patterns - Part 2"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#chapter-4-inception-is-not-the-requirements-phase","text":"","title":"Chapter 4 Inception is Not the Requirements Phase"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#what-is-inception","text":"Inception in one sentence: Envision the product scope, vision, and business case. The main problem solved in one sentence: Do the stakeholders have basic agreement on the vision of the project, and is it worth investing in serious investigation?","title":"What is Inception?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#what-artifacts-may-start-in-inception","text":"Table 4.1. Sample inception artifacts. Artifact [ \u2020] Comment Vision and Business Case Describes the high-level goals and constraints, the business case, and provides an executive summary. Use-Case Model Describes the functional requirements. During inception, the names of most use cases will be identified, and perhaps 10% of the use cases will be analyzed in detail. Supplementary Specification Describes other requirements, mostly non-functional . During inception, it is useful to have some idea of the key non-functional requirements that have will have a major impact on the architecture. Glossary Key domain terminology, and data dictionary. Risk List & Risk Management Plan Describes the risks (business, technical, resource, schedule) and ideas for their mitigation or response. Prototypes and proof-of-concepts To clarify the vision, and validate technical ideas. Iteration Plan Describes what to do in the first elaboration iteration. Phase Plan & Software Development Plan Low-precision guess for elaboration phase duration and effort. Tools, people, education, and other resources. Development Case A description of the customized UP steps and artifacts for this project. In the UP, one always customizes it for the project. [ \u2020] -These artifacts are only partially completed in this phase. They will be iteratively refined in subsequent iterations. Name capitalization implies an officially named UP artifact.","title":"What Artifacts May Start in Inception?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#may-do-some-programming-work","text":"\u201cproof of concept\u201d via UI oridented prototypes experiments for key \u201cshow stopper\u201d technical questions","title":"May do some programming work"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#isnt-that-a-lot-of-documentation","text":"That\u2019s an Agile Modeling perspective: that the greatest value of modeling is to improve understanding, rather than to document reliable specifications.","title":"Isn't That a Lot of Documentation?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#how-much-uml-during-inception","text":"Perhaps beyond simple UML use case diagrams , not much diagramming is warranted.","title":"How Much UML During Inception?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#chapter-5-evolutionary-requirements","text":"","title":"Chapter 5 Evolutionary Requirements"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#definition-requirements","text":"Requirements are capabilities and conditions to which the system\u2014and more broadly, the project\u2014must conform A prime challenge of requirements analysis is to find, communicate, and remember (that usually means write down) what is really needed, in a form that clearly speaks to the client and development team members.","title":"Definition: Requirements"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#what-are-the-types-and-categories-of-requirements","text":"","title":"What are the Types and Categories of Requirements?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#furps-model","text":"*Functional\u2014* . features, capabilities, security. *Usability\u2014* . human factors, help, documentation. *Reliability\u2014* . frequency of failure, recoverability, predictability. *Performance\u2014* . response times, throughput, accuracy, availability, resource usage. *Supportability\u2014* . adaptability, maintainability, internationalization, configurability . The \u201c+\u201d in FURPS+ indicates ancillary and sub-factors, such as: *Implementation\u2014* . resource limitations, languages and tools, hardware, \u2026 *Interface\u2014* . constraints imposed by interfacing with external systems. *Operations\u2014* . system management in its operational setting. *Packaging\u2014* . for example, a physical box. *Legal\u2014* . licensing and so forth. functional (behavioral) or non-functional (everything else);","title":"FURPS+ model"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#requirements-in-up-artifacts","text":"Use-case model for functional (behavioral) requirements Supplementary speficiation - non-functional requirements, such as performance or licensing. Or features not in use cases, e.g. a report generation Glossary - terms and data dictionary for validation rules, acceptable values, etc. Vision - A short executive overview document to summarize high-level requirements and the business case Business Rule , e.g. government tax laws","title":"Requirements in UP artifacts"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#chapter-6-use-cases","text":"","title":"Chapter 6 Use cases"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#introduction","text":"The following diagram illustrate write Business Modeling into requirements, then into design. Figure 6.1. Sample UP artifact influence.","title":"Introduction"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#definition-what-are-actors-scenarios-and-use-cases","text":"Definition : Informally then, a use case is a collection of related success and failure scenarios that describe an actor using a system to support a goal . An Actor is somthing with behavior, such as a person A Scenario (a use case instance) is a specific sequence of actions and interactions between actors and the system. A use case is a collection of related success and failure scenarios that describe an actor using a system to support a goal. Use cases are a key requirements input to classic OOA/D .","title":"Definition: What are Actors, Scenarios, and Use Cases?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#use-cases-and-the-use-case-model","text":"Use cases are text documents, not diagrams, and use-case modeling is primarily an act of writing text, not drawing diagrams.","title":"Use Cases and the Use-Case Model"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#motivation-why-use-cases","text":"A good way to keep it simple for everyone. It emphasize the user goals and perspective. We ask the questions - \u201c Who is using the system, what are their typical scenarios of use, and what are their goals ?\u201d","title":"Motivation: why use cases?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#definition-what-are-three-kinds-of-actors","text":"An actor includes the system under discussion(SuD). Primary actor to find user goals Supporting actor to clarify external interfaces and protocols. Offstage actor to ensure that all necessary interests are identified and satisfied. e.g. a government tax agency.","title":"Definition: What are Three Kinds of Actors?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#notation-what-are-three-common-use-case-formats","text":"Brief - early requirements analysis to get a quick sense Causual - Informal paragraph format. Fully dressed - steps and variations are written in details, including preconditions and success guarantees.","title":"Notation: What are Three Common Use Case Formats?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#guideline-write-terse-use-cases","text":"","title":"Guideline: Write Terse Use Cases"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#guideline-write-black-box-use-cases","text":"","title":"Guideline: Write Black-Box Use Cases"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#guideline-take-an-actor-and-actor-goal-perspective","text":"A set of use-case instances, where each instance is a sequence of actions a system performs that yields an observable result of value to a particular actor .","title":"Guideline: Take an Actor and Actor-Goal Perspective"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#guideline-how-to-find-use-cases","text":"","title":"Guideline: How to Find Use Cases"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#step-1-choose-the-system-boundary","text":"Find the System Under Discussion(SuD)","title":"Step 1: Choose the System Boundary"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#steps-2-and-3-find-primary-actors-and-goals","text":"Questions list Who starts and stops the system? Who does system administration? Who does user and security management? Is \u201ctime\u201d an actor because the system does something in response to a time event? Is there a monitoring process that restarts the system if it fails? Who evaluates system activity or performance? How are software updates handled? Push or pull update? Who evaluates logs? Are they remotely retrieved? In addition to human primary actors, are there any external software or robotic systems that call upon services of the system? Who gets notified when there are errors or failures? How to Organize the Actors and Goals? Two approaches: Discover the results, name the goals as use cases Write an actor-goal list first, review and refine, then draw the use case diagram. Other Ways to Find Actors and Goals? Event Analysis","title":"Steps 2 and 3: Find Primary Actors and Goals"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#step-4-define-use-cases","text":"Define one use case for each user goal, start the name of use cases with a verb.","title":"Step 4: Define Use Cases"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#guideline-what-tests-can-help-find-useful-use-cases","text":"","title":"Guideline: What Tests Can Help Find Useful Use Cases?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#the-boss-test","text":"","title":"The Boss Test"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#the-elementary-business-process-ebp--test-dogfooding","text":"","title":"The Elementary Business Process (EBP)  Test (Dogfooding?)"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#the-size-test","text":"","title":"The Size Test"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part2-Inception/#applying-uml-use-case-diagrams","text":"Partial Use case Diagram","title":"Applying UML: Use Case Diagrams"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part3-Elaboration-Iteration-1-Basics/","tags":["OMSCS","UML","Agile","Software Engineering"],"text":"Chapter 8 \u2693\ufe0e Chapter 13 Logical Architecture and UML Package Diagrams \u2693\ufe0e Layer design \u2693\ufe0e UI layer application logic(domain) layer What is the Logical Architecture? And Layers? \u2693\ufe0e The logical architecture is the large-scale organization of the software classes into packages (or namespaces), subsystems, and layers. Chapter 15 UML Interaction Diagrams \u2693\ufe0e What\u2019s the purpose? \u2693\ufe0e Illustrate how objects interact via messages, used for dynamic object modeling. Sequence and Communication Diagrams \u2693\ufe0e Sequence diagrams illustrate interactions in a kind of fence format. It\u2019s closer to UML specification Mapping to call-flow sequence from reading top to bottom reverse-engineered call-flow sequence from source code. Communication diagrams illustrate object interactions in a graph or network format, in which objects can be placed anywhere on the diagram. \u201cUML as sketch\u201d for agile modeling. Simpler Easier to add new objects. Type Strengths Weaknesses sequence clearly shows sequence or time ordering of messageslarge set of detailed notation options forced to extend to the right when adding new objects; consumes horizontal space communication space economical\u2014flexibility to add new objects in two dimensions more difficult to see sequence of messagesfewer notation options Figure 15.5. Lifeline boxes to show participants in interactions Chapter 17 GRASP: Design objects with responsibilities \u2693\ufe0e GRASP: General Responsibility Assignment Software Patterns Nine GRASP Patterns: Creator(Factory) Information Expert(Information hiding) Controller(Command, Facade, Layers) High Cohesion Cohesion (or more specifically, functional cohesion) is a measure of how strongly related and focused the responsibilities of an element are. Low coupling Coupling is a measure of how strongly one element is connected to, has knowledge of, or relies on other elements. Indirection Polymorphism Protected variations Pure fabrication","title":"Applying UML and Patterns - Part 3"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part3-Elaboration-Iteration-1-Basics/#chapter-8","text":"","title":"Chapter 8"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part3-Elaboration-Iteration-1-Basics/#chapter-13-logical-architecture-and-uml-package-diagrams","text":"","title":"Chapter 13 Logical Architecture and UML Package Diagrams"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part3-Elaboration-Iteration-1-Basics/#layer-design","text":"UI layer application logic(domain) layer","title":"Layer design"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part3-Elaboration-Iteration-1-Basics/#what-is-the-logical-architecture-and-layers","text":"The logical architecture is the large-scale organization of the software classes into packages (or namespaces), subsystems, and layers.","title":"What is the Logical Architecture? And Layers?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part3-Elaboration-Iteration-1-Basics/#chapter-15-uml-interaction-diagrams","text":"","title":"Chapter 15 UML Interaction Diagrams"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part3-Elaboration-Iteration-1-Basics/#whats-the-purpose","text":"Illustrate how objects interact via messages, used for dynamic object modeling.","title":"What's the purpose?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part3-Elaboration-Iteration-1-Basics/#sequence-and-communication-diagrams","text":"Sequence diagrams illustrate interactions in a kind of fence format. It\u2019s closer to UML specification Mapping to call-flow sequence from reading top to bottom reverse-engineered call-flow sequence from source code. Communication diagrams illustrate object interactions in a graph or network format, in which objects can be placed anywhere on the diagram. \u201cUML as sketch\u201d for agile modeling. Simpler Easier to add new objects. Type Strengths Weaknesses sequence clearly shows sequence or time ordering of messageslarge set of detailed notation options forced to extend to the right when adding new objects; consumes horizontal space communication space economical\u2014flexibility to add new objects in two dimensions more difficult to see sequence of messagesfewer notation options Figure 15.5. Lifeline boxes to show participants in interactions","title":"Sequence and Communication Diagrams"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part3-Elaboration-Iteration-1-Basics/#chapter-17-grasp-design-objects-with-responsibilities","text":"GRASP: General Responsibility Assignment Software Patterns Nine GRASP Patterns: Creator(Factory) Information Expert(Information hiding) Controller(Command, Facade, Layers) High Cohesion Cohesion (or more specifically, functional cohesion) is a measure of how strongly related and focused the responsibilities of an element are. Low coupling Coupling is a measure of how strongly one element is connected to, has knowledge of, or relies on other elements. Indirection Polymorphism Protected variations Pure fabrication","title":"Chapter 17 GRASP: Design objects with responsibilities"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part4-Elaboration-Iteration-2-More-Patterns/","tags":["OMSCS","UML","Agile","Software Engineering"],"text":"Chapter 23 More Patterns \u2693\ufe0e Chapter 25 GRASP: More Objects with Responsibilities \u2693\ufe0e Polymorphism \u2693\ufe0e Adapter, Command, Composite, Proxy, State, Strategy rely on Polymorphism. Related patterns: Protected Variations. Pure Fabrication \u2693\ufe0e Implementaing software classes tofabrication for software high cohension and low coupling All GoF design patterns are Pure Fabrications. Indirection \u2693\ufe0e Many GoF patterns, such as Adapter, Bridge, Facade, Observer, and Mediator Protected Variations Low Coupling Many Indirection intermediaries are Pure Fabrications. Protected Variations \u2693\ufe0e Benefits Extensions required for new variations are easy to add. New implementations can be introduced without affecting clients. Coupling is lowered. The impact or cost of changes can be lowered. Related Patterns and Principles Most design principles and patterns are mechanisms for protected variation, including polymorphism, interfaces, indirection, data encapsulation, most of the GoF design patterns, and so on. In [ Pree95 ] variation and evolution points are called \u201chot spots.\u201d Most design principles and patterns are mechanisms for protected variation, including polymorphism, interfaces, indirection, data encapsulation, most of the GoF design patterns, and so on. PV is essentially the same as the information hiding and open-closed principles , which are older terms. Chapter 26. Applying GoF Design Patterns \u2693\ufe0e Adapter Chapter 39 Documenting Architecture: UML and the N+1 View Model \u2693\ufe0e 4+1 Views - Logical - Process - Deployment - Data Use Case view","title":"Applying UML and Patterns - Part 4"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part4-Elaboration-Iteration-2-More-Patterns/#chapter-23-more-patterns","text":"","title":"Chapter 23 More Patterns"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part4-Elaboration-Iteration-2-More-Patterns/#chapter-25-grasp-more-objects-with-responsibilities","text":"","title":"Chapter 25 GRASP: More Objects with Responsibilities"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part4-Elaboration-Iteration-2-More-Patterns/#polymorphism","text":"Adapter, Command, Composite, Proxy, State, Strategy rely on Polymorphism. Related patterns: Protected Variations.","title":"Polymorphism"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part4-Elaboration-Iteration-2-More-Patterns/#pure-fabrication","text":"Implementaing software classes tofabrication for software high cohension and low coupling All GoF design patterns are Pure Fabrications.","title":"Pure Fabrication"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part4-Elaboration-Iteration-2-More-Patterns/#indirection","text":"Many GoF patterns, such as Adapter, Bridge, Facade, Observer, and Mediator Protected Variations Low Coupling Many Indirection intermediaries are Pure Fabrications.","title":"Indirection"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part4-Elaboration-Iteration-2-More-Patterns/#protected-variations","text":"Benefits Extensions required for new variations are easy to add. New implementations can be introduced without affecting clients. Coupling is lowered. The impact or cost of changes can be lowered. Related Patterns and Principles Most design principles and patterns are mechanisms for protected variation, including polymorphism, interfaces, indirection, data encapsulation, most of the GoF design patterns, and so on. In [ Pree95 ] variation and evolution points are called \u201chot spots.\u201d Most design principles and patterns are mechanisms for protected variation, including polymorphism, interfaces, indirection, data encapsulation, most of the GoF design patterns, and so on. PV is essentially the same as the information hiding and open-closed principles , which are older terms.","title":"Protected Variations"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part4-Elaboration-Iteration-2-More-Patterns/#chapter-26-applying-gof-design-patterns","text":"Adapter","title":"Chapter 26. Applying GoF Design Patterns"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part4-Elaboration-Iteration-2-More-Patterns/#chapter-39-documenting-architecture-uml-and-the-n1-view-model","text":"4+1 Views - Logical - Process - Deployment - Data Use Case view","title":"Chapter 39 Documenting Architecture: UML and the N+1 View Model"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part5-Elaboration-Iteration-3-Intermediate-Topics/","tags":["OMSCS","UML","Agile","Software Engineering"],"text":"Chapter 27 \u2693\ufe0e","title":"Applying UML and Patterns - Part 5"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part5-Elaboration-Iteration-3-Intermediate-Topics/#chapter-27","text":"","title":"Chapter 27"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part6-Special-Topics/","tags":["OMSCS","UML","Agile","Software Engineering"],"text":"Chapter 40 \u2693\ufe0e","title":"Applying UML and Patterns - Part 3"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/Applying-UML-and-Patterns/Part6-Special-Topics/#chapter-40","text":"","title":"Chapter 40"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/","tags":["OMSCS"],"text":"References: \u2693\ufe0e Garlan & Shaw paper \u201cIntroduction to Software Architectures\u201d as covered in the previous Reading Discussion: Chapters 1, 2 and 3 (pages 1 - 17) and Chapter 5 (pages 36 - 37). Fundamentals of Software Architecture (Ford & Richards, O\u2019Reilly 2020).","title":"Architecture"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/#references","text":"Garlan & Shaw paper \u201cIntroduction to Software Architectures\u201d as covered in the previous Reading Discussion: Chapters 1, 2 and 3 (pages 1 - 17) and Chapter 5 (pages 36 - 37). Fundamentals of Software Architecture (Ford & Richards, O\u2019Reilly 2020).","title":"References:"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/","tags":["OMSCS"],"text":"19. Architecture Decisions \u2693\ufe0e An anti-pattern : Andrew Koenig defines it as something that seems like a good idea when you begin, but leads you into trouble. a repeatable process that produces negative results Covering Your Assets anti-pattern \u2693\ufe0e It occurs when an architect avoids or defers making an architecture decision out of fear of making the wrong choice. How to overcome? \u2693\ufe0e Wait until the last responsible moment to make decision, waiting until you have enough information to justify and validate your decision, avoid fall into the Analysis Paralysis anti-pattern. continually collaborate with development teams to ensure decisions are feasible for implementation. Groundhog Day anti-pattern \u2693\ufe0e It occurs when people don\u2019t know why a decision was made, so it keeps getting discussed over and over and over. How to overcome? \u2693\ufe0e Important to provide both technical and business justifications for the decisions. Business justifications \u2693\ufe0e cost time to market user satisfaction strategic positioning Email-Driven Architecture anti-pattern \u2693\ufe0e It occurs where people lose, forget, or don\u2019t even know an architecture decision has been made and therefore cannot possibly implement that architecture decision. How to overcome? \u2693\ufe0e To provide a link to the single system of record. Only notify those people caring about the decision Architecturally Significant \u2693\ufe0e Michael Nygard mentioned architecturally significant decisions affect the structure, nonfunctional characteristics, dependencies, interfaces or construction techniques. Structure : impacting the patterns or styles of architecture being used nonfunctional characterics : important for the application or system being developed or maintained. dependencies : coupling points between components and/or services within the system, impact overal scalability, modularity, agility, testability, reliability, etc. Interfaces refer to how services and components are accessed and orchestrated, usually through a gateway, integration hub, service bus, or API proxy. construction techniques refer to decisions about platforms, frameworks, tools, and even processes that, although technical in nature, might impact some aspect of the architecture. References: \u2693\ufe0e Fundamentals of Software Architecture (Ford & Richards, O\u2019Reilly 2020).","title":"Fundamentals of Software Architecture"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#19-architecture-decisions","text":"An anti-pattern : Andrew Koenig defines it as something that seems like a good idea when you begin, but leads you into trouble. a repeatable process that produces negative results","title":"19. Architecture Decisions"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#covering-your-assets-anti-pattern","text":"It occurs when an architect avoids or defers making an architecture decision out of fear of making the wrong choice.","title":"Covering Your Assets anti-pattern"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#how-to-overcome","text":"Wait until the last responsible moment to make decision, waiting until you have enough information to justify and validate your decision, avoid fall into the Analysis Paralysis anti-pattern. continually collaborate with development teams to ensure decisions are feasible for implementation.","title":"How to overcome?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#groundhog-day-anti-pattern","text":"It occurs when people don\u2019t know why a decision was made, so it keeps getting discussed over and over and over.","title":"Groundhog Day anti-pattern"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#how-to-overcome_1","text":"Important to provide both technical and business justifications for the decisions.","title":"How to overcome?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#business-justifications","text":"cost time to market user satisfaction strategic positioning","title":"Business justifications"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#email-driven-architecture-anti-pattern","text":"It occurs where people lose, forget, or don\u2019t even know an architecture decision has been made and therefore cannot possibly implement that architecture decision.","title":"Email-Driven Architecture anti-pattern"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#how-to-overcome_2","text":"To provide a link to the single system of record. Only notify those people caring about the decision","title":"How to overcome?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#architecturally-significant","text":"Michael Nygard mentioned architecturally significant decisions affect the structure, nonfunctional characteristics, dependencies, interfaces or construction techniques. Structure : impacting the patterns or styles of architecture being used nonfunctional characterics : important for the application or system being developed or maintained. dependencies : coupling points between components and/or services within the system, impact overal scalability, modularity, agility, testability, reliability, etc. Interfaces refer to how services and components are accessed and orchestrated, usually through a gateway, integration hub, service bus, or API proxy. construction techniques refer to decisions about platforms, frameworks, tools, and even processes that, although technical in nature, might impact some aspect of the architecture.","title":"Architecturally Significant"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/fundamentals_of_software/#references","text":"Fundamentals of Software Architecture (Ford & Richards, O\u2019Reilly 2020).","title":"References:"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/","tags":["OMSCS"],"text":"Abstract \u2693\ufe0e Architectural design has been addressed by: informal diagrams descriptive terms module interconnection languages templates and frameworks for specific domain systems formal models of component integration mechanisms. 8 architectural styles + 6 case studies. Introduction \u2693\ufe0e What are overal system structural issues? gross organization and global control structure protocols for communication synchronization and data access assignment of functionality to design elements physical distribution composition of design elements scaling and performance selection among design alternatives From programming languages to software architecture \u2693\ufe0e historical development of abstration techniques in CS. High-Level programming language \u2693\ufe0e instructions and data separately symbolic names for code and memory addresses marco processors: a single symbol = sequences of instructions. procedure invocation, for loop and conditional statements. data types for selecting the proper machine instructions, show how data should be used. introduction of modules Abstract data types Abstract Data Types \u2693\ufe0e the software structure (which included a representation packaged with its primitive operators), specifications (mathematically expressed as abstract models or algebraic axioms), language issues (modules, scope, user-defined types), integrity of the result (invariants of data structures and protection from other manipulation), rules for combining types (declarations), information hiding (protection of properties not explicitly included in specifications). Software Architecture \u2693\ufe0e Developed vocabulary of software designs client-server model abstraction layering and system decomposition distributed, OO approach pipeline Examples International Standard Organization\u2019s Open Systems Interconnection Reference Model (a layered network architecture) NIST/ECMA Reference Model (a generic software engineering environment architecture based on layered communication substrates) X Window System (a distributed windowed user interface architecture based on event triggering and callbacks) Architectural styles \u2693\ufe0e Common framework to view \u2693\ufe0e a collection of computational components a description of the interactions between these components - connectors , e.g. procedure call, event boardcast, database queries and pipes What\u2019s architectural style? \u2693\ufe0e It defines a family of systems in terms of a pattern of structural organization, determintes the vocabulary of components and connectors together with a set of constraints on how they can be combined. constraints : e.g. topological constraints on architectural descriptions, execution semantics Common questions \u2693\ufe0e What\u2019s the structural pattern - the components, connectors and constraints? What\u2019s the underlying computational model? What are the essential invariants of the style? What are some common examples of its use? What are the advantages and disadvantages of using that style? What are some of the common specializations? 1. Pipes and Filters \u2693\ufe0e Components are filters, having a set of inputs and a set of outputs. Connectors are pipes, conduits for the steams, transmitting outputs of one filter to inputs of another. Invariants of the styls: \u2693\ufe0e filters should be independent, should not sharing state with other filters. filters do not know the identify of their unsteams and downstreams filters. Common specializations \u2693\ufe0e pipelines restricting linear sequences of filters bounded pipes, restricting the amount of data on a pipe typed pipes, requre data passed between two filters have a well-defined type. Examples \u2693\ufe0e Unix shell compiler signal processing domains functional programming distributed systems 2. Data Abstraction and Object-Oriented Organization \u2693\ufe0e Components : objects or an abstract data type, data representations and their associated primitive operations encapsulated. Connectors : function and procedure invocations. Advantage \u2693\ufe0e object can hide its representation from its clients change the implementation without affecting those clients. allow designer to decompose problems into collections of interacting agents. Disadvantage \u2693\ufe0e One object must know another object\u2019s identify Side effect problems 3. Event-based, implicit invocation \u2693\ufe0e Alternative integration technique: implicit invocation reactive integration selective boardcast Usage: actors constraint satisfaction daemons packet-switched networks 4. Layered Systems \u2693\ufe0e 5. Repositories \u2693\ufe0e References \u2693\ufe0e Garlan & Shaw paper \u201cIntroduction to Software Architectures\u201d as covered in the previous Reading Discussion: Chapters 1, 2 and 3 (pages 1 - 17) and Chapter 5 (pages 36 - 37).","title":"Intro-to-software-Arch"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#abstract","text":"Architectural design has been addressed by: informal diagrams descriptive terms module interconnection languages templates and frameworks for specific domain systems formal models of component integration mechanisms. 8 architectural styles + 6 case studies.","title":"Abstract"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#introduction","text":"What are overal system structural issues? gross organization and global control structure protocols for communication synchronization and data access assignment of functionality to design elements physical distribution composition of design elements scaling and performance selection among design alternatives","title":"Introduction"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#from-programming-languages-to-software-architecture","text":"historical development of abstration techniques in CS.","title":"From programming languages to software architecture"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#high-level-programming-language","text":"instructions and data separately symbolic names for code and memory addresses marco processors: a single symbol = sequences of instructions. procedure invocation, for loop and conditional statements. data types for selecting the proper machine instructions, show how data should be used. introduction of modules Abstract data types","title":"High-Level programming language"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#abstract-data-types","text":"the software structure (which included a representation packaged with its primitive operators), specifications (mathematically expressed as abstract models or algebraic axioms), language issues (modules, scope, user-defined types), integrity of the result (invariants of data structures and protection from other manipulation), rules for combining types (declarations), information hiding (protection of properties not explicitly included in specifications).","title":"Abstract Data Types"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#software-architecture","text":"Developed vocabulary of software designs client-server model abstraction layering and system decomposition distributed, OO approach pipeline Examples International Standard Organization\u2019s Open Systems Interconnection Reference Model (a layered network architecture) NIST/ECMA Reference Model (a generic software engineering environment architecture based on layered communication substrates) X Window System (a distributed windowed user interface architecture based on event triggering and callbacks)","title":"Software Architecture"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#architectural-styles","text":"","title":"Architectural styles"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#common-framework-to-view","text":"a collection of computational components a description of the interactions between these components - connectors , e.g. procedure call, event boardcast, database queries and pipes","title":"Common framework to view"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#whats-architectural-style","text":"It defines a family of systems in terms of a pattern of structural organization, determintes the vocabulary of components and connectors together with a set of constraints on how they can be combined. constraints : e.g. topological constraints on architectural descriptions, execution semantics","title":"What's architectural style?"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#common-questions","text":"What\u2019s the structural pattern - the components, connectors and constraints? What\u2019s the underlying computational model? What are the essential invariants of the style? What are some common examples of its use? What are the advantages and disadvantages of using that style? What are some of the common specializations?","title":"Common questions"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#1-pipes-and-filters","text":"Components are filters, having a set of inputs and a set of outputs. Connectors are pipes, conduits for the steams, transmitting outputs of one filter to inputs of another.","title":"1. Pipes and Filters"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#invariants-of-the-styls","text":"filters should be independent, should not sharing state with other filters. filters do not know the identify of their unsteams and downstreams filters.","title":"Invariants of the styls:"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#common-specializations","text":"pipelines restricting linear sequences of filters bounded pipes, restricting the amount of data on a pipe typed pipes, requre data passed between two filters have a well-defined type.","title":"Common specializations"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#examples","text":"Unix shell compiler signal processing domains functional programming distributed systems","title":"Examples"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#2-data-abstraction-and-object-oriented-organization","text":"Components : objects or an abstract data type, data representations and their associated primitive operations encapsulated. Connectors : function and procedure invocations.","title":"2. Data Abstraction and Object-Oriented Organization"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#advantage","text":"object can hide its representation from its clients change the implementation without affecting those clients. allow designer to decompose problems into collections of interacting agents.","title":"Advantage"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#disadvantage","text":"One object must know another object\u2019s identify Side effect problems","title":"Disadvantage"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#3-event-based-implicit-invocation","text":"Alternative integration technique: implicit invocation reactive integration selective boardcast Usage: actors constraint satisfaction daemons packet-switched networks","title":"3. Event-based, implicit invocation"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#4-layered-systems","text":"","title":"4. Layered Systems"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#5-repositories","text":"","title":"5. Repositories"},{"location":"blog/CS-Master/CS6310-Software-Architecture-and-Design/architecture/introduction/#references","text":"Garlan & Shaw paper \u201cIntroduction to Software Architectures\u201d as covered in the previous Reading Discussion: Chapters 1, 2 and 3 (pages 1 - 17) and Chapter 5 (pages 36 - 37).","title":"References"},{"location":"blog/CS-Master/CS7641-Machine-Learning/","tags":["OMSCS","Machine Learning"],"text":"ML is the ROX Playlist \u2693\ufe0e Prove theorem What\u2019s ML? \u2693\ufe0e Charles : Broader notion of building computational artifacts that learn over time based on experiences . The math, science, engineering, computing behind it. Michael : Computational applied statistics: Data, analyze the data, glean something from data via computational structures. Three major topics \u2693\ufe0e Supervised Learning (approximation) \u2693\ufe0e Taking labelled data set, glean information from it so that you can glean new data set. Functional approximation : assume fundamental function to explain the real world. Taken a data set with labels + functions to generalize the functions beyond the data you\u2019ve seen. Induction : specifics to generic (inductive bias) Deduction : rules to specifics. Unsupervised Learning(concise description) \u2693\ufe0e Input data set, derive the structure from them. Pixels -> Description(UL) -> Summaries -> Function approximation(SL) -> labels. Equally good to use features as summaries. Reinforcement Learning \u2693\ufe0e Generic AI to build agents. RL is Learning from the delayed rewards. Playing game without knowing the rules. Summary \u2693\ufe0e Optimization \u2693\ufe0e SL: labels data well UL: cluster scores well RL: behavior scores well Algorithm central versus Data central (co-equal?)","title":"CS7641 Machine Learning"},{"location":"blog/CS-Master/CS7641-Machine-Learning/#ml-is-the-rox-playlist","text":"Prove theorem","title":"ML is the ROX Playlist"},{"location":"blog/CS-Master/CS7641-Machine-Learning/#whats-ml","text":"Charles : Broader notion of building computational artifacts that learn over time based on experiences . The math, science, engineering, computing behind it. Michael : Computational applied statistics: Data, analyze the data, glean something from data via computational structures.","title":"What's ML?"},{"location":"blog/CS-Master/CS7641-Machine-Learning/#three-major-topics","text":"","title":"Three major topics"},{"location":"blog/CS-Master/CS7641-Machine-Learning/#supervised-learning-approximation","text":"Taking labelled data set, glean information from it so that you can glean new data set. Functional approximation : assume fundamental function to explain the real world. Taken a data set with labels + functions to generalize the functions beyond the data you\u2019ve seen. Induction : specifics to generic (inductive bias) Deduction : rules to specifics.","title":"Supervised Learning (approximation)"},{"location":"blog/CS-Master/CS7641-Machine-Learning/#unsupervised-learningconcise-description","text":"Input data set, derive the structure from them. Pixels -> Description(UL) -> Summaries -> Function approximation(SL) -> labels. Equally good to use features as summaries.","title":"Unsupervised Learning(concise description)"},{"location":"blog/CS-Master/CS7641-Machine-Learning/#reinforcement--learning","text":"Generic AI to build agents. RL is Learning from the delayed rewards. Playing game without knowing the rules.","title":"Reinforcement  Learning"},{"location":"blog/CS-Master/CS7641-Machine-Learning/#summary","text":"","title":"Summary"},{"location":"blog/CS-Master/CS7641-Machine-Learning/#optimization","text":"SL: labels data well UL: cluster scores well RL: behavior scores well Algorithm central versus Data central (co-equal?)","title":"Optimization"},{"location":"blog/CS-Master/CS7641-Machine-Learning/Syllabus/","text":"Course Summary: \u2693\ufe0e Date Details Due Sun Jan 9, 2022 Decision Trees 9pm ML is the ROX 9pm Sun Jan 16, 2022 Neural Networks 9pm Regression and Classification 9pm Sun Jan 23, 2022 Ensemble Learning 9pm Instance-Based Learning 9pm Sun Jan 30, 2022 Kernel Methods and SVMs 9pm Sun Feb 6, 2022 Computational Learning Theory 9pm VC Dimensions 9pm Sun Feb 13, 2022 Assignment Supervised Learning due by 8:59pm Bayesian Learning and Inference 9pm Sun Feb 20, 2022 Information Theory 9pm Randomized Optimization 9pm Wed Feb 23, 2022 Assignment Problem Set 1 due by 8:59pm Tue Mar 1, 2022 Assignment Midterm due by 6pm Sun Mar 6, 2022 Assignment Randomized Optimization due by 8:59pm Tue Mar 8, 2022 Clustering 9pm Sun Mar 13, 2022 Feature Selection 9pm Feature Transformation 9pm Sat Mar 19, 2022 Withdrawal Deadline 12pm to 1pm Sun Mar 20, 2022 Markov Decision Processes 9pm Sun Mar 27, 2022 Assignment Unsupervised Learning and Dimensionality Reduction due by 8:59pm Reinforcement Learning 9pm Sun Apr 10, 2022 Game Theory 9pm Thu Apr 14, 2022 Assignment Problem Set 2 due by 6pm Sun Apr 17, 2022 Assignment Markov Decision Processes due by 8:59pm Fri Apr 22, 2022 Finals Start 6am Mon Apr 25, 2022 Assignment Finals due by 6pm Mon May 2, 2022 Finals End 3pm Mon May 9, 2022 Assignment Midterm (Test your Setup) due by 8:59pm","title":"Syllabus"},{"location":"blog/CS-Master/CS7641-Machine-Learning/Syllabus/#course-summary","text":"Date Details Due Sun Jan 9, 2022 Decision Trees 9pm ML is the ROX 9pm Sun Jan 16, 2022 Neural Networks 9pm Regression and Classification 9pm Sun Jan 23, 2022 Ensemble Learning 9pm Instance-Based Learning 9pm Sun Jan 30, 2022 Kernel Methods and SVMs 9pm Sun Feb 6, 2022 Computational Learning Theory 9pm VC Dimensions 9pm Sun Feb 13, 2022 Assignment Supervised Learning due by 8:59pm Bayesian Learning and Inference 9pm Sun Feb 20, 2022 Information Theory 9pm Randomized Optimization 9pm Wed Feb 23, 2022 Assignment Problem Set 1 due by 8:59pm Tue Mar 1, 2022 Assignment Midterm due by 6pm Sun Mar 6, 2022 Assignment Randomized Optimization due by 8:59pm Tue Mar 8, 2022 Clustering 9pm Sun Mar 13, 2022 Feature Selection 9pm Feature Transformation 9pm Sat Mar 19, 2022 Withdrawal Deadline 12pm to 1pm Sun Mar 20, 2022 Markov Decision Processes 9pm Sun Mar 27, 2022 Assignment Unsupervised Learning and Dimensionality Reduction due by 8:59pm Reinforcement Learning 9pm Sun Apr 10, 2022 Game Theory 9pm Thu Apr 14, 2022 Assignment Problem Set 2 due by 6pm Sun Apr 17, 2022 Assignment Markov Decision Processes due by 8:59pm Fri Apr 22, 2022 Finals Start 6am Mon Apr 25, 2022 Assignment Finals due by 6pm Mon May 2, 2022 Finals End 3pm Mon May 9, 2022 Assignment Midterm (Test your Setup) due by 8:59pm","title":"Course Summary:"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/","tags":["OMSCS","Machine Learning"],"text":"Classification vs regression \u2693\ufe0e Discrete labels vs continuous label Classification Learning \u2693\ufe0e Instances : (Input vectors of values) Concept : Function to map input to output. Idea to describe things. Target concept : actual answer. Hypothesis class : all possible functions. Sample : training set . Input data with correct labels. Candidate : concept might be target concept. Testing set : Should not be the same as Training set. Decision Trees \u2693\ufe0e 20 questions \u2693\ufe0e Ask 20 questions to guess what\u2019s in another person\u2019s mind? Each question further narrow down the scope. Steps \u2693\ufe0e Pick best attribute to split the data (in binary) Asked question Follow the answer path Go to Step 1 until get an answer. Expressiveness \u2693\ufe0e Boolean functions: AND OR XOR: full truth table. N-OR (Any) \u2693\ufe0e Linear N nodes. N-XOR (Parity) \u2693\ufe0e 2**N - 1 nodes. ID3 \u2693\ufe0e Loop: A < - Best attribute Assign A as decision attribute for node For each value of A, create a descendent of node Sort training examples to leaves If examples per How to find the best attribute? \u2693\ufe0e Information gain \u2693\ufe0e If it\u2019s even, there is no way to guess what\u2019s the possibility of the result. Information is the maximum. If it\u2019s 100% sure, then information is none. Entropy \u2693\ufe0e A measure of randomness. $$ Gain = Entrosy(S) - Sigma dfrac{|Sv|}{|S|} Entropy(S_v) $$ The goal is maximize entropy gain. Bias \u2693\ufe0e Inductive Bias Restriction Bias Preference Bias Decision Trees other considerations \u2693\ufe0e Continuous attributes? Age, weight, distance","title":"CS7641-SL"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#classification-vs-regression","text":"Discrete labels vs continuous label","title":"Classification vs regression"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#classification-learning","text":"Instances : (Input vectors of values) Concept : Function to map input to output. Idea to describe things. Target concept : actual answer. Hypothesis class : all possible functions. Sample : training set . Input data with correct labels. Candidate : concept might be target concept. Testing set : Should not be the same as Training set.","title":"Classification Learning"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#decision-trees","text":"","title":"Decision Trees"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#20-questions","text":"Ask 20 questions to guess what\u2019s in another person\u2019s mind? Each question further narrow down the scope.","title":"20 questions"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#steps","text":"Pick best attribute to split the data (in binary) Asked question Follow the answer path Go to Step 1 until get an answer.","title":"Steps"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#expressiveness","text":"Boolean functions: AND OR XOR: full truth table.","title":"Expressiveness"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#n-or-any","text":"Linear N nodes.","title":"N-OR (Any)"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#n-xor-parity","text":"2**N - 1 nodes.","title":"N-XOR (Parity)"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#id3","text":"Loop: A < - Best attribute Assign A as decision attribute for node For each value of A, create a descendent of node Sort training examples to leaves If examples per","title":"ID3"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#how-to-find-the-best-attribute","text":"","title":"How to find the best attribute?"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#information-gain","text":"If it\u2019s even, there is no way to guess what\u2019s the possibility of the result. Information is the maximum. If it\u2019s 100% sure, then information is none.","title":"Information gain"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#entropy","text":"A measure of randomness. $$ Gain = Entrosy(S) - Sigma dfrac{|Sv|}{|S|} Entropy(S_v) $$ The goal is maximize entropy gain.","title":"Entropy"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#bias","text":"Inductive Bias Restriction Bias Preference Bias","title":"Bias"},{"location":"blog/CS-Master/CS7641-Machine-Learning/supervised-learning/#decision-trees-other-considerations","text":"Continuous attributes? Age, weight, distance","title":"Decision Trees other considerations"},{"location":"blog/CS-Master/CS7641-Machine-Learning/Supervised-Learning/Computational-learning-theory/","text":"Computational Learning Theory \u2693\ufe0e Defining learning problem Show specific algorithms work show these problems are fundamentally hard Inductive Learning \u2693\ufe0e Probability of successful training Number of samples to learn Complexity of hypothesis class Accuracy to which target concept is approximated Manner in which training examples presented - Batch/online Manner in which training examples selected Selecting training examples \u2693\ufe0e Teacher can ask 1 question to get the answer. Learners need to eliminate as many as I can as a learner Steps \u2693\ufe0e Show what\u2019s irrelabant. Show what\u2019s relevant. Learn with Constrained Queries \u2693\ufe0e Learn with mistake bounds \u2693\ufe0e","title":"Computational Learning Theory"},{"location":"blog/CS-Master/CS7641-Machine-Learning/Supervised-Learning/Computational-learning-theory/#computational-learning-theory","text":"Defining learning problem Show specific algorithms work show these problems are fundamentally hard","title":"Computational Learning Theory"},{"location":"blog/CS-Master/CS7641-Machine-Learning/Supervised-Learning/Computational-learning-theory/#inductive-learning","text":"Probability of successful training Number of samples to learn Complexity of hypothesis class Accuracy to which target concept is approximated Manner in which training examples presented - Batch/online Manner in which training examples selected","title":"Inductive Learning"},{"location":"blog/CS-Master/CS7641-Machine-Learning/Supervised-Learning/Computational-learning-theory/#selecting-training-examples","text":"Teacher can ask 1 question to get the answer. Learners need to eliminate as many as I can as a learner","title":"Selecting training examples"},{"location":"blog/CS-Master/CS7641-Machine-Learning/Supervised-Learning/Computational-learning-theory/#steps","text":"Show what\u2019s irrelabant. Show what\u2019s relevant.","title":"Steps"},{"location":"blog/CS-Master/CS7641-Machine-Learning/Supervised-Learning/Computational-learning-theory/#learn-with-constrained-queries","text":"","title":"Learn with Constrained Queries"},{"location":"blog/CS-Master/CS7641-Machine-Learning/Supervised-Learning/Computational-learning-theory/#learn-with-mistake-bounds","text":"","title":"Learn with mistake bounds"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/","tags":["Algorithms","Machine-Learning","Trading","OMSCS"],"text":"Machine Learning for Trading \u2693\ufe0e CS7646 ML4T Book References \u2693\ufe0e machine-learning-for-trading What Hedge Funds Really Do by Romero and Balch Machine Learning, Tom Mitchell Random Forest & Q-Learner Strategy Learner \u2693\ufe0e Final project for 3 different types of ML: Decision Trees, reinforcement learning, optimization. Quantative factors X, dependant variable Y. Regression Trees \u2693\ufe0e X1, X2, X3 -> Regression model -> Y Roll back to the beginning of data to get training data. Measure X1, X2, X3 data, not peek forward, only use data until the date. Build the model: Decision Trees, reinforcement learning, optimization. Drawbacks: Cannot distinguish between Uncertain large return Certain small return When doing nothing is smart Don\u2019t know when to exit. Reinforcement learning. \u2693\ufe0e Q&A \u2693\ufe0e What should we consider in manual strategy? \u2693\ufe0e Align the API. Is it useful normalizing the indicators? \u2693\ufe0e Decision Tree could have not standardized indicators. KNN needs to have standardized indicators. How to make Dyna run faster? \u2693\ufe0e Use vectorizing code. How do we combine indicators, sequentially? Or how do we assign weight or priority in developing a strategy? \u2693\ufe0e Find threshold for each indicators. Just use the threshold, then voting Sequentially one by one (All should be true) Assign weight to each one. Start with 1 indicator first, see if it\u2019s better to add more indicators. Extra Resources \u2693\ufe0e Financial, Investing, and Trading \u2693\ufe0e What Hedge Funds Really Do (Book) - Required course book that is a concise source of the financial and investing material used in the course. Investments (Book) - A comprehensive book that covers the financial and investing material used in the course. Technical Analysis Explained (Book) - A good book that covers technical analysis. Useful as a reference for understanding indicators and manual trading strategies. Technical Analysis of Financial Markets (Book) - Another good book that covers technical analysis. Useful as a reference for understanding indicators and manual trading strategies. Stockcharts.com (Website) - A free and easy-to-use website that is useful for indicator education, trading strategies, and charting (using a variety of charting techniques). Investopedia.com (Website) - A free and easy-to-use website that is useful for indicator education, news, and market simulation. Machine Learning in Finance (Book) Advances in Financial Machine Learning (Book) Machine Learning for Asset Managers (Book) Machine Learning \u2693\ufe0e Machine Learning (Book) - Tom Mitchell\u2019s concise introduction to machine learning, including supervised and reinforcement learning. Supplemental reading in CS7646, but required reading in CS7641 (OMSCS ML course) An Introduction to Statistical Learning (Book) - A very good introductory ML book. Many \u201csuggested\u201d readings shared on Ed Discussions were from this book. (The second edition - hard cover - is expected to be released this summer, with a free PDF available in early 2022.) Elements of Statistical Learning (Book) - A more mathematical and complete introduction to ML. This book may be used in one of the courses in the OMSA program. Foundations of Machine Learning (Book) - Good material, but one of the more theoretical treatments of ML. Probabilistic Machine Learning: An Introduction (Book) - The long-anticipated second edition of Kevin Murphy\u2019s Machine Learning Book. Will be a two-book series. Book 1 is camera-ready and book 2 will be released as a draft this summer. In some places, Murphy\u2019s book is used as an alternative to Tom Mitchell\u2019s book. CS7641 Machine Learning (Georgia Tech OMSCS Course Videos) CMU-601 Machine Learning (Carnegie Mellon University Course Videos) Introduction to Machine Learning (University of Waterloo Course Videos) Reinforcement Learning \u2693\ufe0e Reinforcement Learning: An Introduction (Book) - This is currently the definitive RL textbook. Grokking Deep Reinforcement Learning (Book) - Written by Miguel Morales, head TA for Georgia Tech\u2019s CS7642 RL Course. Reinforcement Learning (David Silver Video Lectures) - Videos and PowerPoint presentations. CS7642 Reinforcement Learning (Georgia Tech OMSCS Course Videos) CS234 Reinforcement Learning (Stanford University Course Videos) RL In Finance (Stanford University - course and book DRAFT) Deep Learning \u2693\ufe0e Deep Learning (Book) - This is the current leading Deep Learning textbook Deep Learning Revolution (Book) - An easy-to-read book that presents Deep Learning, starting with a historical perspective and stepping forward to today. Deep Learning (Nature Article) - A good article by Hinton and others on deep learning. Access through the Georgia Tech Library. Grokking Deep Learning (Book) - A good book that, like ML4T, will have you implementing algorithms and models. Foundations of Deep Reinforcement Learning (Book) - Sections 1.1 through 1.4 provide a nice introduction to reinforcement learning and our work in CS7646. deeplearning.ai (Website) - A learning & education site by Andrew Ng. PORTFOLIO VISUALIZER/efficient frontier","title":"CS7646-ML4T"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#machine-learning-for-trading","text":"CS7646 ML4T","title":"Machine Learning for Trading"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#book-references","text":"machine-learning-for-trading What Hedge Funds Really Do by Romero and Balch Machine Learning, Tom Mitchell","title":"Book References"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#random-forest--q-learner-strategy-learner","text":"Final project for 3 different types of ML: Decision Trees, reinforcement learning, optimization. Quantative factors X, dependant variable Y.","title":"Random Forest &amp; Q-Learner Strategy Learner"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#regression-trees","text":"X1, X2, X3 -> Regression model -> Y Roll back to the beginning of data to get training data. Measure X1, X2, X3 data, not peek forward, only use data until the date. Build the model: Decision Trees, reinforcement learning, optimization. Drawbacks: Cannot distinguish between Uncertain large return Certain small return When doing nothing is smart Don\u2019t know when to exit.","title":"Regression Trees"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#reinforcement-learning","text":"","title":"Reinforcement learning."},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#qa","text":"","title":"Q&amp;A"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#what-should-we-consider-in-manual-strategy","text":"Align the API.","title":"What should we consider in manual strategy?"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#is-it-useful-normalizing-the-indicators","text":"Decision Tree could have not standardized indicators. KNN needs to have standardized indicators.","title":"Is it useful normalizing the indicators?"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#how-to-make-dyna-run-faster","text":"Use vectorizing code.","title":"How to make Dyna run faster?"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#how-do-we-combine-indicators-sequentially-or-how-do-we-assign-weight-or-priority-in-developing-a-strategy","text":"Find threshold for each indicators. Just use the threshold, then voting Sequentially one by one (All should be true) Assign weight to each one. Start with 1 indicator first, see if it\u2019s better to add more indicators.","title":"How do we combine indicators, sequentially? Or how do we assign weight or priority in developing a strategy?"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#extra-resources","text":"","title":"Extra Resources"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#financial-investing-and-trading","text":"What Hedge Funds Really Do (Book) - Required course book that is a concise source of the financial and investing material used in the course. Investments (Book) - A comprehensive book that covers the financial and investing material used in the course. Technical Analysis Explained (Book) - A good book that covers technical analysis. Useful as a reference for understanding indicators and manual trading strategies. Technical Analysis of Financial Markets (Book) - Another good book that covers technical analysis. Useful as a reference for understanding indicators and manual trading strategies. Stockcharts.com (Website) - A free and easy-to-use website that is useful for indicator education, trading strategies, and charting (using a variety of charting techniques). Investopedia.com (Website) - A free and easy-to-use website that is useful for indicator education, news, and market simulation. Machine Learning in Finance (Book) Advances in Financial Machine Learning (Book) Machine Learning for Asset Managers (Book)","title":"Financial, Investing, and Trading"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#machine-learning","text":"Machine Learning (Book) - Tom Mitchell\u2019s concise introduction to machine learning, including supervised and reinforcement learning. Supplemental reading in CS7646, but required reading in CS7641 (OMSCS ML course) An Introduction to Statistical Learning (Book) - A very good introductory ML book. Many \u201csuggested\u201d readings shared on Ed Discussions were from this book. (The second edition - hard cover - is expected to be released this summer, with a free PDF available in early 2022.) Elements of Statistical Learning (Book) - A more mathematical and complete introduction to ML. This book may be used in one of the courses in the OMSA program. Foundations of Machine Learning (Book) - Good material, but one of the more theoretical treatments of ML. Probabilistic Machine Learning: An Introduction (Book) - The long-anticipated second edition of Kevin Murphy\u2019s Machine Learning Book. Will be a two-book series. Book 1 is camera-ready and book 2 will be released as a draft this summer. In some places, Murphy\u2019s book is used as an alternative to Tom Mitchell\u2019s book. CS7641 Machine Learning (Georgia Tech OMSCS Course Videos) CMU-601 Machine Learning (Carnegie Mellon University Course Videos) Introduction to Machine Learning (University of Waterloo Course Videos)","title":"Machine Learning"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#reinforcement-learning_1","text":"Reinforcement Learning: An Introduction (Book) - This is currently the definitive RL textbook. Grokking Deep Reinforcement Learning (Book) - Written by Miguel Morales, head TA for Georgia Tech\u2019s CS7642 RL Course. Reinforcement Learning (David Silver Video Lectures) - Videos and PowerPoint presentations. CS7642 Reinforcement Learning (Georgia Tech OMSCS Course Videos) CS234 Reinforcement Learning (Stanford University Course Videos) RL In Finance (Stanford University - course and book DRAFT)","title":"Reinforcement Learning"},{"location":"blog/CS-Master/CS7646-Machine-Learning-for-Trading/#deep-learning","text":"Deep Learning (Book) - This is the current leading Deep Learning textbook Deep Learning Revolution (Book) - An easy-to-read book that presents Deep Learning, starting with a historical perspective and stepping forward to today. Deep Learning (Nature Article) - A good article by Hinton and others on deep learning. Access through the Georgia Tech Library. Grokking Deep Learning (Book) - A good book that, like ML4T, will have you implementing algorithms and models. Foundations of Deep Reinforcement Learning (Book) - Sections 1.1 through 1.4 provide a nice introduction to reinforcement learning and our work in CS7646. deeplearning.ai (Website) - A learning & education site by Andrew Ng. PORTFOLIO VISUALIZER/efficient frontier","title":"Deep Learning"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/","tags":["Algorithms","OMSCS","Visualization","Data-Analytics"],"text":"Data & Visual Analytics Fun Materials for the week: \u2693\ufe0e How to create an intuitive statistical visualization? \u2693\ufe0e Hans Rosling had mastered that art and we can learn a lot from his first TED talk . Data Visualization \u2693\ufe0e Edward Tufte is a pioneer in Data Visualization and he is also a fellow of the American Statistical Association. His books on visualization are amongst the best 100 books of the 20 th century on Amazon. The \u201c Thinking Eye with Edward Tufte \u201d ( link ) is a lecture given by Edward Tufte at MIT Sloan Sports Analytics Conference is a great place to learn about \u201cEdward Tufte\u2019s Design Principles\u201d Information is beautiful is one of the best places to learn how to create impactful infographics and data visuals. The website was founded by David McCandless who is one of the brightest minds in data visualization. He has tons of great examples on his website. He also conducts Dataviz Workshops in major cities around the world and you can check his workshop schedule here (including online seminars). August 2020 edition of Wired magazine had a brilliant article on data visualization aptly titled, Is Your Chart a Detective Story? Or a Police Report? . Here\u2019s a small abstract from the article: Consider the visualization created by information designer Will Burtin in 1951 to summarize the effectiveness of three antibiotics\u2014penicillin, neomycin, and streptomycin\u2014in treating 13 bacteria. Bacterial species are arrayed in a circular layout, with three bars for each bacterial infection representing the amount of each antibiotic needed to treat it. An inversion of the scale means that longer bars represent more effective antibiotics, aligning with a spontaneous interpretation of bigger is better, while shading behind the bars neatly organizes the bacteria into two groups according to whether they result in a positive or negative gram stain test. This article is a great place to understand the pros and cons of creative non-traditional visualizations. \u201cSimplicity is the ultimate sophistication.\u201d This design mantra of Steve Jobs and Jonny Ive changed our world and technology forever. Jony Ive\u2019s biography Jony Ive: The Genius Behind Apple\u2019s Greatest Products has some wonderful lessons one can learn on creating a simple and intuitive design for complex problems. Here\u2019s is a small excerpt from this book: The process of simplification is design 101, a mind-set that every design student is taught in school. But not every student adopts it, and it\u2019s rarely applied with the ruthless discipline practiced by Jony. Indeed, if there\u2019s such a thing as a single secret to what Jony Ive does, it is to follow slavishly the simplification philosophy. That approach has accounted for many of the major breakthroughs, as well as for some products that failed and others that Apple hasn\u2019t released. Caring enough to commit the enormous time and effort to get something right has also been Jony\u2019s hallmark, from his earliest college projects onward. Jony\u2019s ultimate goal is for his designs to disappear. *\u201dCorrelation does not imply causation\u201d* . The deciphering \u201ccausation\u201d has been an open question for decades if not centuries. Judea Pearl is not only described as one of the giants in the field of artificial intelligence but also considered as one of the founding fathers of the causal revolution. His 2018 book, The Book of Why: The New Science of Cause and Effect has rekindled the interest in causal research. Here\u2019s an excerpt from his book: Ironically, the need for a theory of causation began to surface at the same time that statistics came into being. In fact, modern statistics hatched from the causal questions that Galton and Pearson asked about heredity and their ingenious attempts to answer them using cross-generational data. Unfortunately, they failed in this endeavor, and rather than pause to ask why, they declared those questions off-limits and turned to developing a thriving, causality-free enterprise called statistics. [\u2014] My emphasis on language also comes from a deep conviction that language shapes our thoughts. You cannot answer questions that you cannot ask, and you cannot ask a question that you have no words for. His new book has inspired many people and there are some wonderful python packages now on causality including Microsoft\u2019s Python package aptly titled - Do Why . Python \u2693\ufe0e Python is the most popular and easy to use language in data science. This week, we recommend a book that will help not only beginners but also advanced Python programmers to revisit some of the hidden gems and good etiquette of Python programming. - Fluent Python: Clear, Concise, and Effective Programming by Luciano Ramalho ( link ) - Interview with Python creator Guido van Rossum on how Python makes thinking in code easier ( link ) Richard Feynman \u2693\ufe0e Richard Feynman has often considered as the greatest teacher ever. He not only mastered physics but had mastered the art of thinking correctly. His famous lines to NASA managers testified in front of the Rogers Commission that was investigating the Space Shuttle Challenger disaster, \u201cWhen you don\u2019t have data, you have to use reason. And they were giving you reasons.\u201d is an important insight for data scientists to dive deep into the problem to find a resolution even with limited data. This BBC documentary on his life, The Pleasure of Finding Things Out is a never-ending oasis of inspiration. His famous talk on \u201c Beauty \u201d is part of this documentary. His last book The Meaning of It All: Thoughts of a Citizen-Scientist is a great consolidation of his lectures and insights. Thanks to Bill Gates, who bought all the rights to Richard Feynman Caltech lectures and made it available free online under the name Project Tuva . Traveling Salesman problem \u2693\ufe0e Last week, after 44 years computer scientists found a better way to come up with an approximate solution to the Traveling Salesman problem. You can read about it here . Traveling Salesman problem is an NP-hard problem and you can read about it here . There is a wonderful movie from 2012 aptly titled \u201cTraveling Salesman\u201d which depicts hours and days after three mathematicians solve this hardest problem in computer science, P=NP. The movie is available for free on Prime and YouTube . Enjoy the movie! Bayes Algorithm \u2693\ufe0e Bayes Algorithm has stood the test of time for centuries. Sharon Bertsch McGrayne\u2019s fascinating book The Theory That Would Not Die: How Bayes\u2019 Rule Cracked the Enigma Code, Hunted Down Russian Submarines, & Emerged Triumphant from Two Centuries of Controversy not only covers the history but also the immense practical applications of Bayes. To complement this book, the movie Imitation Games is a brilliant portrayal of how Alan Turing cracked the Enigma code using Bayes to eventually helped defeat the Nazis. If you are ready to start using Bayes, Allen Dowing\u2019s Think Bayes is a great place to start and it is Python-based. Machine Learning \u2693\ufe0e This week all of you have started Machine Learning based homework and with long term career planning in ML, these are three practical and \u201ccode\u201d based ML books (with limited theory): Python Machine Learning: Machine Learning and Deep Learning with Python, scikit-learn, and TensorFlow 2 by Sebastian Raschka & Vahid Mirjalili Approaching (Almost) Any Machine Learning Problem by Abhishek Thakur The 100 Page Machine Learning Book by Andriy Burkov covers everything in just 100 pages. For a quick review of ML theory, Chris Albon\u2019s Machine Learning Flashcards are excellent. Oscar Nominee Werner Herzog\u2019s documentary Lo and Behold, Reveries of the Connected World (also starring Sebastian Thrun) is a wonderful watch to learn about the past, present, and future of the internet. Young Scientist \u2693\ufe0e E.O. Wilson\u2019s Letters to Young Scientist is an insightful read for all ages but it is an important read for students. Here\u2019s a small excerpt from the book where the living legend of biology draws an analogy between a scientist and an artist : The ideal scientist thinks like a poet and only later works like a bookkeeper. Keep in mind that innovators in both literature and science are basically dreamers and storytellers. In the early stages of the creation of both literature and science, everything in the mind is a story. There is an imagined ending, and usually an imagined beginning, and a selection of bits and pieces that might fit in between. In works of literature and science alike, any part can be changed, causing a ripple among the other parts, some of which are discarded and new ones added. The surviving fragments are variously joined and separated and moved about as the story forms. One scenario emerges, then another. The scenarios, whether literary or scientific in nature, compete with one another. Some overlap. Words and sentences (or equations or experiments) are tried to make sense of the whole thing. Early on, an end to all the imagining is conceived. It arrives at a wondrous denouement (or scientific breakthrough). But is it the best, is it true? To bring the end safely home is the goal of the creative mind. *** *** E.O.Wilson also has a TED on the same subject, Advice to a young scientist .","title":"CSE6242 Data Visual Analytics"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/#fun-materials-for-the-week","text":"","title":"Fun Materials for the week:"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/#how-to-create-an-intuitive-statistical-visualization","text":"Hans Rosling had mastered that art and we can learn a lot from his first TED talk .","title":"How to create an intuitive statistical visualization?"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/#data-visualization","text":"Edward Tufte is a pioneer in Data Visualization and he is also a fellow of the American Statistical Association. His books on visualization are amongst the best 100 books of the 20 th century on Amazon. The \u201c Thinking Eye with Edward Tufte \u201d ( link ) is a lecture given by Edward Tufte at MIT Sloan Sports Analytics Conference is a great place to learn about \u201cEdward Tufte\u2019s Design Principles\u201d Information is beautiful is one of the best places to learn how to create impactful infographics and data visuals. The website was founded by David McCandless who is one of the brightest minds in data visualization. He has tons of great examples on his website. He also conducts Dataviz Workshops in major cities around the world and you can check his workshop schedule here (including online seminars). August 2020 edition of Wired magazine had a brilliant article on data visualization aptly titled, Is Your Chart a Detective Story? Or a Police Report? . Here\u2019s a small abstract from the article: Consider the visualization created by information designer Will Burtin in 1951 to summarize the effectiveness of three antibiotics\u2014penicillin, neomycin, and streptomycin\u2014in treating 13 bacteria. Bacterial species are arrayed in a circular layout, with three bars for each bacterial infection representing the amount of each antibiotic needed to treat it. An inversion of the scale means that longer bars represent more effective antibiotics, aligning with a spontaneous interpretation of bigger is better, while shading behind the bars neatly organizes the bacteria into two groups according to whether they result in a positive or negative gram stain test. This article is a great place to understand the pros and cons of creative non-traditional visualizations. \u201cSimplicity is the ultimate sophistication.\u201d This design mantra of Steve Jobs and Jonny Ive changed our world and technology forever. Jony Ive\u2019s biography Jony Ive: The Genius Behind Apple\u2019s Greatest Products has some wonderful lessons one can learn on creating a simple and intuitive design for complex problems. Here\u2019s is a small excerpt from this book: The process of simplification is design 101, a mind-set that every design student is taught in school. But not every student adopts it, and it\u2019s rarely applied with the ruthless discipline practiced by Jony. Indeed, if there\u2019s such a thing as a single secret to what Jony Ive does, it is to follow slavishly the simplification philosophy. That approach has accounted for many of the major breakthroughs, as well as for some products that failed and others that Apple hasn\u2019t released. Caring enough to commit the enormous time and effort to get something right has also been Jony\u2019s hallmark, from his earliest college projects onward. Jony\u2019s ultimate goal is for his designs to disappear. *\u201dCorrelation does not imply causation\u201d* . The deciphering \u201ccausation\u201d has been an open question for decades if not centuries. Judea Pearl is not only described as one of the giants in the field of artificial intelligence but also considered as one of the founding fathers of the causal revolution. His 2018 book, The Book of Why: The New Science of Cause and Effect has rekindled the interest in causal research. Here\u2019s an excerpt from his book: Ironically, the need for a theory of causation began to surface at the same time that statistics came into being. In fact, modern statistics hatched from the causal questions that Galton and Pearson asked about heredity and their ingenious attempts to answer them using cross-generational data. Unfortunately, they failed in this endeavor, and rather than pause to ask why, they declared those questions off-limits and turned to developing a thriving, causality-free enterprise called statistics. [\u2014] My emphasis on language also comes from a deep conviction that language shapes our thoughts. You cannot answer questions that you cannot ask, and you cannot ask a question that you have no words for. His new book has inspired many people and there are some wonderful python packages now on causality including Microsoft\u2019s Python package aptly titled - Do Why .","title":"Data Visualization"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/#python","text":"Python is the most popular and easy to use language in data science. This week, we recommend a book that will help not only beginners but also advanced Python programmers to revisit some of the hidden gems and good etiquette of Python programming. - Fluent Python: Clear, Concise, and Effective Programming by Luciano Ramalho ( link ) - Interview with Python creator Guido van Rossum on how Python makes thinking in code easier ( link )","title":"Python"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/#richard-feynman","text":"Richard Feynman has often considered as the greatest teacher ever. He not only mastered physics but had mastered the art of thinking correctly. His famous lines to NASA managers testified in front of the Rogers Commission that was investigating the Space Shuttle Challenger disaster, \u201cWhen you don\u2019t have data, you have to use reason. And they were giving you reasons.\u201d is an important insight for data scientists to dive deep into the problem to find a resolution even with limited data. This BBC documentary on his life, The Pleasure of Finding Things Out is a never-ending oasis of inspiration. His famous talk on \u201c Beauty \u201d is part of this documentary. His last book The Meaning of It All: Thoughts of a Citizen-Scientist is a great consolidation of his lectures and insights. Thanks to Bill Gates, who bought all the rights to Richard Feynman Caltech lectures and made it available free online under the name Project Tuva .","title":"Richard Feynman"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/#traveling-salesman-problem","text":"Last week, after 44 years computer scientists found a better way to come up with an approximate solution to the Traveling Salesman problem. You can read about it here . Traveling Salesman problem is an NP-hard problem and you can read about it here . There is a wonderful movie from 2012 aptly titled \u201cTraveling Salesman\u201d which depicts hours and days after three mathematicians solve this hardest problem in computer science, P=NP. The movie is available for free on Prime and YouTube . Enjoy the movie!","title":"Traveling Salesman problem"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/#bayes-algorithm","text":"Bayes Algorithm has stood the test of time for centuries. Sharon Bertsch McGrayne\u2019s fascinating book The Theory That Would Not Die: How Bayes\u2019 Rule Cracked the Enigma Code, Hunted Down Russian Submarines, & Emerged Triumphant from Two Centuries of Controversy not only covers the history but also the immense practical applications of Bayes. To complement this book, the movie Imitation Games is a brilliant portrayal of how Alan Turing cracked the Enigma code using Bayes to eventually helped defeat the Nazis. If you are ready to start using Bayes, Allen Dowing\u2019s Think Bayes is a great place to start and it is Python-based.","title":"Bayes Algorithm"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/#machine-learning","text":"This week all of you have started Machine Learning based homework and with long term career planning in ML, these are three practical and \u201ccode\u201d based ML books (with limited theory): Python Machine Learning: Machine Learning and Deep Learning with Python, scikit-learn, and TensorFlow 2 by Sebastian Raschka & Vahid Mirjalili Approaching (Almost) Any Machine Learning Problem by Abhishek Thakur The 100 Page Machine Learning Book by Andriy Burkov covers everything in just 100 pages. For a quick review of ML theory, Chris Albon\u2019s Machine Learning Flashcards are excellent. Oscar Nominee Werner Herzog\u2019s documentary Lo and Behold, Reveries of the Connected World (also starring Sebastian Thrun) is a wonderful watch to learn about the past, present, and future of the internet.","title":"Machine Learning"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/#young-scientist","text":"E.O. Wilson\u2019s Letters to Young Scientist is an insightful read for all ages but it is an important read for students. Here\u2019s a small excerpt from the book where the living legend of biology draws an analogy between a scientist and an artist : The ideal scientist thinks like a poet and only later works like a bookkeeper. Keep in mind that innovators in both literature and science are basically dreamers and storytellers. In the early stages of the creation of both literature and science, everything in the mind is a story. There is an imagined ending, and usually an imagined beginning, and a selection of bits and pieces that might fit in between. In works of literature and science alike, any part can be changed, causing a ripple among the other parts, some of which are discarded and new ones added. The surviving fragments are variously joined and separated and moved about as the story forms. One scenario emerges, then another. The scenarios, whether literary or scientific in nature, compete with one another. Some overlap. Words and sentences (or equations or experiments) are tried to make sense of the whole thing. Early on, an end to all the imagining is conceived. It arrives at a wondrous denouement (or scientific breakthrough). But is it the best, is it true? To bring the end safely home is the goal of the creative mind. *** *** E.O.Wilson also has a TED on the same subject, Advice to a young scientist .","title":"Young Scientist"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/resources/","tags":["Algorithms","OMSCS","Visualization","Data-Analytics"],"text":"Javascript Resources \u2693\ufe0e Javascript Tutorials and Exercises: https://www.codecademy.com/ Online book on Javascript: https://eloquentjavascript.net/ Book on Javascript: http://a.co/d/cOg97Dn D3 Books \u2693\ufe0e Online book to review D3 v3 Tips and Tricks: https://leanpub.com/D3-Tips-and-Tricks/read Online book focusing on D3 v4 features: http://d3indepth.com/ D3 Example Graphs \u2693\ufe0e Pinning nodes: Sticky Force Layout Creating Triangle Plot Symbols: D3 Symbols Creating a Heatmap: Day-Hour Heatmap Converting Wide and Long Data: Wide vs. Long data Customizing Text Alignment: d3 svg text alignment v3 Handling Interactivity: Mouse Events Creating Line Graphs: Simple line graph Making a map: Let\u2019s Make a Map Using a slider: D3 simple slider General \u2693\ufe0e A variety of video tutorials on D3 and Javascript, some designed for learners less familiar with javascript, HTML, and CSS: http://lynda.gatech.edu/ Explanation of D3 Selection: https://bost.ocks.org/mike/selection/ https://bost.ocks.org/mike/join/ https://github.com/d3/d3-selection#selecting-elements D3 Tutorial \u2693\ufe0e D3 Workshop Series: http://duspviz.mit.edu/d3-workshop/intro-to-d3/ Scatter plot Tutorial: http://alignedleft.com/tutorials/d3/making-a-scatterplot D3 and Javascript \u2693\ufe0e CSS Page Break: https://stackoverflow.com/questions/1664049/can-i-force-a-page-jump-in-html-printing/1664058 D3 Heatmap: http://bl.ocks.org/mbostock/3202354 D3 Scatter plot: http://alignedleft.com/tutorials/d3/making-a-scatterplot D3 Select Box: http://bl.ocks.org/jfreels/6734823 D3 Colors: http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3 D3 Map: https://bl.ocks.org/mbostock/4060606 https://webdva.github.io/how-to-draw-a-line-in-d3js/ http://datawanderings.com/2019/10/28/tutorial-making-a-line-chart-in-d3-js-v-5/ Tableau \u2693\ufe0e Tableau open learning lab (online from GaTech) https://library.gatech.edu/events/tableau-open-learning-lab-online-2 Tableau Conference-ish ( link ) Free! Bar Chart vs Stacked Bar Chart Article: https://www.smashingmagazine.com/2017/03/understanding-stacked-bar-charts/","title":"DVA-Resource"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/resources/#javascript-resources","text":"Javascript Tutorials and Exercises: https://www.codecademy.com/ Online book on Javascript: https://eloquentjavascript.net/ Book on Javascript: http://a.co/d/cOg97Dn","title":"Javascript Resources"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/resources/#d3-books","text":"Online book to review D3 v3 Tips and Tricks: https://leanpub.com/D3-Tips-and-Tricks/read Online book focusing on D3 v4 features: http://d3indepth.com/","title":"D3 Books"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/resources/#d3-example-graphs","text":"Pinning nodes: Sticky Force Layout Creating Triangle Plot Symbols: D3 Symbols Creating a Heatmap: Day-Hour Heatmap Converting Wide and Long Data: Wide vs. Long data Customizing Text Alignment: d3 svg text alignment v3 Handling Interactivity: Mouse Events Creating Line Graphs: Simple line graph Making a map: Let\u2019s Make a Map Using a slider: D3 simple slider","title":"D3 Example Graphs"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/resources/#general","text":"A variety of video tutorials on D3 and Javascript, some designed for learners less familiar with javascript, HTML, and CSS: http://lynda.gatech.edu/ Explanation of D3 Selection: https://bost.ocks.org/mike/selection/ https://bost.ocks.org/mike/join/ https://github.com/d3/d3-selection#selecting-elements","title":"General"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/resources/#d3-tutorial","text":"D3 Workshop Series: http://duspviz.mit.edu/d3-workshop/intro-to-d3/ Scatter plot Tutorial: http://alignedleft.com/tutorials/d3/making-a-scatterplot","title":"D3 Tutorial"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/resources/#d3-and-javascript","text":"CSS Page Break: https://stackoverflow.com/questions/1664049/can-i-force-a-page-jump-in-html-printing/1664058 D3 Heatmap: http://bl.ocks.org/mbostock/3202354 D3 Scatter plot: http://alignedleft.com/tutorials/d3/making-a-scatterplot D3 Select Box: http://bl.ocks.org/jfreels/6734823 D3 Colors: http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3 D3 Map: https://bl.ocks.org/mbostock/4060606 https://webdva.github.io/how-to-draw-a-line-in-d3js/ http://datawanderings.com/2019/10/28/tutorial-making-a-line-chart-in-d3-js-v-5/","title":"D3 and Javascript"},{"location":"blog/CS-Master/CSE6242-Data-Visual-Analytics/resources/#tableau","text":"Tableau open learning lab (online from GaTech) https://library.gatech.edu/events/tableau-open-learning-lab-online-2 Tableau Conference-ish ( link ) Free! Bar Chart vs Stacked Bar Chart Article: https://www.smashingmagazine.com/2017/03/understanding-stacked-bar-charts/","title":"Tableau"},{"location":"blog/CS-Master/machine_learning/","tags":["Algorithms","Machine-Learning"],"text":"Machine Learning algorithm \u2693\ufe0e Azure Machine Learning Algorithm Cheat Sheet Amazon Machine Learning Google Machine Learning Crash Course Google AI Education Supervised Learning \u2693\ufe0e The data points contain X and labeled Y. The goal is to study many examples and make prediction. discrete value called classification problem continuos value - regression problem e.g. Decision Trees Linear regression Bag Bootstrap Aggregating \u2693\ufe0e Bootstrap aggregating Boosting and AdaBoost clearly explained Unsupervised learning \u2693\ufe0e The goal is to organize the data or to describe its structure. Group data into clusters, K-Means find ways to look at the complex data so that it appears simpler. Reinforcement learning \u2693\ufe0e The goal is to choose an action in response to each data point. (e.g. robotics or IoT: sensor data/signals to strategy for next action.) Q-Learning Reinforcement Q-Learning from Scratch in Python with OpenAI Gym Simple Reinforcement Learning: Q-learning Reinforcement Learning Coach - Intel AI OpenAI Baselines How to evaluate ML Algorithms \u2693\ufe0e Metrics to Evaluate your Machine Learning Algorithm Metrics To Evaluate Machine Learning Algorithms in Python Libraries \u2693\ufe0e scikit-learn \u2693\ufe0e Scientific computing Simple and beginner fridenly only supervised and unsupervised learning. No Deep learning and reinforcement learning algorithm support TensorFlow - Google \u2693\ufe0e ecosystem case study tensorlayer - Reinforcement Learning Library for Scientists and Engineers Tensorforce: a TensorFlow library for applied reinforcement learning - Google Keras \u2693\ufe0e Support Tensorflow and Theano backend Deep Learning, Neural Networks Deep Reinforcement Learning for Keras PyTorch - Facebook \u2693\ufe0e A replacement for NumPy to use the power of GPUs and other accelerators. An automatic differentiation library that is useful to implement neural networks. pytorch-examples Ray - Fast and Simple Distributed Computing - UC Berkeley RISELab \u2693\ufe0e More Learning and practices \u2693\ufe0e The Best Tools for Reinforcement Learning in Python You Actually Want to Try kaggle competition Learn-Data-Sci Data Science Blogs Simple Reinforcement learning tutorials, \u83ab\u70e6Python \u4e2d\u6587AI\u6559\u5b66 Learning RL \u2693\ufe0e Learning Reinforcement Learning (with Code, Exercises and Solutions) Reinforcement Learning: An Introduction (2 nd Edition) reinforcement-learning Github most star reinforcement-learning-an-introduction Machine Learning, Tom Mitchell","title":"Machine learning"},{"location":"blog/CS-Master/machine_learning/#machine-learning-algorithm","text":"Azure Machine Learning Algorithm Cheat Sheet Amazon Machine Learning Google Machine Learning Crash Course Google AI Education","title":"Machine Learning algorithm"},{"location":"blog/CS-Master/machine_learning/#supervised-learning","text":"The data points contain X and labeled Y. The goal is to study many examples and make prediction. discrete value called classification problem continuos value - regression problem e.g. Decision Trees Linear regression Bag","title":"Supervised Learning"},{"location":"blog/CS-Master/machine_learning/#bootstrap-aggregating","text":"Bootstrap aggregating Boosting and AdaBoost clearly explained","title":"Bootstrap Aggregating"},{"location":"blog/CS-Master/machine_learning/#unsupervised-learning","text":"The goal is to organize the data or to describe its structure. Group data into clusters, K-Means find ways to look at the complex data so that it appears simpler.","title":"Unsupervised learning"},{"location":"blog/CS-Master/machine_learning/#reinforcement-learning","text":"The goal is to choose an action in response to each data point. (e.g. robotics or IoT: sensor data/signals to strategy for next action.) Q-Learning Reinforcement Q-Learning from Scratch in Python with OpenAI Gym Simple Reinforcement Learning: Q-learning Reinforcement Learning Coach - Intel AI OpenAI Baselines","title":"Reinforcement learning"},{"location":"blog/CS-Master/machine_learning/#how-to-evaluate-ml-algorithms","text":"Metrics to Evaluate your Machine Learning Algorithm Metrics To Evaluate Machine Learning Algorithms in Python","title":"How to evaluate ML Algorithms"},{"location":"blog/CS-Master/machine_learning/#libraries","text":"","title":"Libraries"},{"location":"blog/CS-Master/machine_learning/#scikit-learn","text":"Scientific computing Simple and beginner fridenly only supervised and unsupervised learning. No Deep learning and reinforcement learning algorithm support","title":"scikit-learn"},{"location":"blog/CS-Master/machine_learning/#tensorflow---google","text":"ecosystem case study tensorlayer - Reinforcement Learning Library for Scientists and Engineers Tensorforce: a TensorFlow library for applied reinforcement learning - Google","title":"TensorFlow - Google"},{"location":"blog/CS-Master/machine_learning/#keras","text":"Support Tensorflow and Theano backend Deep Learning, Neural Networks Deep Reinforcement Learning for Keras","title":"Keras"},{"location":"blog/CS-Master/machine_learning/#pytorch---facebook","text":"A replacement for NumPy to use the power of GPUs and other accelerators. An automatic differentiation library that is useful to implement neural networks. pytorch-examples","title":"PyTorch - Facebook"},{"location":"blog/CS-Master/machine_learning/#ray---fast-and-simple-distributed-computing---uc-berkeley-riselab","text":"","title":"Ray - Fast and Simple Distributed Computing - UC Berkeley RISELab"},{"location":"blog/CS-Master/machine_learning/#more-learning-and-practices","text":"The Best Tools for Reinforcement Learning in Python You Actually Want to Try kaggle competition Learn-Data-Sci Data Science Blogs Simple Reinforcement learning tutorials, \u83ab\u70e6Python \u4e2d\u6587AI\u6559\u5b66","title":"More Learning and practices"},{"location":"blog/CS-Master/machine_learning/#learning-rl","text":"Learning Reinforcement Learning (with Code, Exercises and Solutions) Reinforcement Learning: An Introduction (2 nd Edition) reinforcement-learning Github most star reinforcement-learning-an-introduction Machine Learning, Tom Mitchell","title":"Learning RL"},{"location":"blog/CS-Master/machine_learning/deep-learning/","tags":["Algorithms","Machine-Learning","Deep-Learning","OMSCS"],"text":"In an interview last week, AI pioneer Geoff Hinton said - \u201cDeep learning is going to be able to do everything\u201d And if we have those breakthroughs, will we be able to approximate all human intelligence through deep learning? Yes. Particularly breakthroughs to do with how you get big vectors of neural activity to implement things like reason. But we also need a massive increase in scale. The human brain has about 100 trillion parameters or synapses. What we now call a really big model, like GPT-3, has 175 billion. It\u2019s a thousand times smaller than the brain. GPT-3 can now generate pretty plausible-looking text, and it\u2019s still tiny compared to the brain. When you say the scale, do you mean bigger neural networks, more data, or both? Both. There\u2019s a sort of discrepancy between what happens in computer science and what happens with people. People have a huge amount of parameters compared with the amount of data they\u2019re getting. Neural nets are surprisingly good at dealing with a rather small amount of data, with a huge number of parameters, but people are even better. Deep learning has come a long way in the past few years and changed a lot of minds including Geoff Hilton\u2019s. Here are some good resources to get started on Deep Learning: 1. Deep Learning by Ian Goodfellow, Yoshua Bengio, and Aaron Courville - This book by the founding fathers of deep learning will help cover all the theoretical elements and have a solid understanding of the fundamentals. 2. Deep Learning for Coders with Fastai and PyTorch: AI Applications Without a PhD by Jeremy Howard and Sylvain Gugger - This is a very practical book with lots of code samples. 3. Deep Learning with Python by Fran\u00e7ois Chollet - This is another practical book with tons of code samples.","title":"DL"},{"location":"blog/CS-Master/machine_learning/RL/","tags":["Algorithms","Reinforcement-Learning"],"text":"Definition \u2693\ufe0e A problem: The goal is to choose an action in response to each data point. RL Robot Robot: Sense Think Act cycle. What\u2019s the process? \u2693\ufe0e Environment \u2693\ufe0e Action -> Transition function -> State of Env Agent/Robot \u2693\ufe0e State -> Policy: \\(\\Pi(s)\\) -> Collect Rewards, Action The goal \u2693\ufe0e How to find \\(\\Pi\\) to maximize ? Trading Analog \u2693\ufe0e Environment = Market Action = Buy/Sell State = Factors of stocks, e.g. P/E, Rollinger Band Value, etc. Rewards = money returns Policy: \\(\\Pi\\) = Trading strategy Algorithm type \u2693\ufe0e Model-Based \u2693\ufe0e Use the transition T or the rewards R in the model. Model Free \u2693\ufe0e It does not know or use the models of the transitions T or the rewards R. Fundamental Iterative methods \u2693\ufe0e Value iteration Policy iteration How To Code The Value Iteration Algorithm For Reinforcement Learning Fundamental Iterative Methods of Reinforcement Learning Reference \u2693\ufe0e Reinforcement Learning: A Survey Or Reinforcement Learning: A Survey-PDF Section 8.2 - Reinforcement Learning: An Introduction Section 9 - Reinforcement Learning: An Introduction PPT","title":"RL"},{"location":"blog/CS-Master/machine_learning/RL/#definition","text":"A problem: The goal is to choose an action in response to each data point. RL Robot Robot: Sense Think Act cycle.","title":"Definition"},{"location":"blog/CS-Master/machine_learning/RL/#whats-the-process","text":"","title":"What's the process?"},{"location":"blog/CS-Master/machine_learning/RL/#environment","text":"Action -> Transition function -> State of Env","title":"Environment"},{"location":"blog/CS-Master/machine_learning/RL/#agentrobot","text":"State -> Policy: \\(\\Pi(s)\\) -> Collect Rewards, Action","title":"Agent/Robot"},{"location":"blog/CS-Master/machine_learning/RL/#the-goal","text":"How to find \\(\\Pi\\) to maximize ?","title":"The goal"},{"location":"blog/CS-Master/machine_learning/RL/#trading-analog","text":"Environment = Market Action = Buy/Sell State = Factors of stocks, e.g. P/E, Rollinger Band Value, etc. Rewards = money returns Policy: \\(\\Pi\\) = Trading strategy","title":"Trading Analog"},{"location":"blog/CS-Master/machine_learning/RL/#algorithm-type","text":"","title":"Algorithm type"},{"location":"blog/CS-Master/machine_learning/RL/#model-based","text":"Use the transition T or the rewards R in the model.","title":"Model-Based"},{"location":"blog/CS-Master/machine_learning/RL/#model-free","text":"It does not know or use the models of the transitions T or the rewards R.","title":"Model Free"},{"location":"blog/CS-Master/machine_learning/RL/#fundamental-iterative-methods","text":"Value iteration Policy iteration How To Code The Value Iteration Algorithm For Reinforcement Learning Fundamental Iterative Methods of Reinforcement Learning","title":"Fundamental Iterative methods"},{"location":"blog/CS-Master/machine_learning/RL/#reference","text":"Reinforcement Learning: A Survey Or Reinforcement Learning: A Survey-PDF Section 8.2 - Reinforcement Learning: An Introduction Section 9 - Reinforcement Learning: An Introduction PPT","title":"Reference"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/","tags":["Algorithms","Reinforcement-Learning"],"text":"Q-Learning intro \u2693\ufe0e It use utility table for Q-Values. The best part of Q-Learning: it guarantees to provide a optimal policy. What\u2019s Q? Q means the function that the algorithm computes. \\(Q[s,a]=\\) immediate rewards + discounted rewards Short term rewards: Daily return Long term rewards: cumulative return How to use Q? \\(\\Pi(s)=argmax_a(Q[s,a])\\) The optimal: \\(\\Pi^*(s)=argmax_a(Q^*[s,a])\\) Update Rule \u2693\ufe0e \\(Q'[s,a]\\) = \\((1-\\alpha)Q[s,a]\\) + \\(\\alpha\\) * improved estimate where Improved Estimate = \\(r\\) + \\(\\gamma\\) * later rewards = \\(r\\) + \\(\\gamma\\) * \\(Q[s',argmax_a(Q[s',a'])\\) \\(\\alpha\\) : Learning rate [0, 1.0] \\(\\gamma\\) : discount rate [0, 1.0] State \u2693\ufe0e Can be used as state Adjusted close/SMA Bollinger Band Value P/E Ratio Holding stock Return since entry Creating the state State is an integer discretize each factor combine all factors Discretizing \u2693\ufe0e Convert a real number into integer. Summary \u2693\ufe0e It\u2019s a model free algorithm that does not know Transition matrix T or rewards function. Build a model \u2693\ufe0e Define states, actions, rewards Choose in-sample training period. iterate: Q-Table update back Steps: Init Q table observe S execute a, obverse \\(S'\\) , r Update Q with < \\(s, a, s', r\\) > Testing a model \u2693\ufe0e Backtest on later data. Dyna-Q \u2693\ufe0e Build up Transition matrix T and Rewards matrix R to speed up model convergences for Q-Learning. The real world training is expensive, we hallucinate many additional interactions, 100 rounds. Learning T \u2693\ufe0e \\(T[s,a,s']\\) = prob \\(s,a->s'\\) Init \\(T_c[]\\) = 0.00001 while executing, observe s,a,s\u2019 increment \\(T_c[s,a,s']\\) \\(T[s,a,s']=T_c[s,a,s']/(\\sum_i T[s,a,i])\\) Learning R \u2693\ufe0e \\(R'[s,a]=(1-\\alpha)R[s,a]+\\alpha*r\\) r = immediate rewards. R = expected reward for s,a. Dyna-Q Algorithm \u2693\ufe0e \\(T'[s,a,s']\\) update \\(R'[s,a]\\) update s = random a = random s\u2019 = infer from T[] r = R[s,a] Update Q with \\(<s,a,s',r>\\) Reference \u2693\ufe0e Reinforcement Q-Learning from Scratch in Python with OpenAI Gym Simple Reinforcement Learning: Q-learning Q-Learning in Python Dyna-Q-Learning","title":"Q-learning"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#q-learning-intro","text":"It use utility table for Q-Values. The best part of Q-Learning: it guarantees to provide a optimal policy. What\u2019s Q? Q means the function that the algorithm computes. \\(Q[s,a]=\\) immediate rewards + discounted rewards Short term rewards: Daily return Long term rewards: cumulative return How to use Q? \\(\\Pi(s)=argmax_a(Q[s,a])\\) The optimal: \\(\\Pi^*(s)=argmax_a(Q^*[s,a])\\)","title":"Q-Learning intro"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#update-rule","text":"\\(Q'[s,a]\\) = \\((1-\\alpha)Q[s,a]\\) + \\(\\alpha\\) * improved estimate where Improved Estimate = \\(r\\) + \\(\\gamma\\) * later rewards = \\(r\\) + \\(\\gamma\\) * \\(Q[s',argmax_a(Q[s',a'])\\) \\(\\alpha\\) : Learning rate [0, 1.0] \\(\\gamma\\) : discount rate [0, 1.0]","title":"Update Rule"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#state","text":"Can be used as state Adjusted close/SMA Bollinger Band Value P/E Ratio Holding stock Return since entry Creating the state State is an integer discretize each factor combine all factors","title":"State"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#discretizing","text":"Convert a real number into integer.","title":"Discretizing"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#summary","text":"It\u2019s a model free algorithm that does not know Transition matrix T or rewards function.","title":"Summary"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#build-a-model","text":"Define states, actions, rewards Choose in-sample training period. iterate: Q-Table update back Steps: Init Q table observe S execute a, obverse \\(S'\\) , r Update Q with < \\(s, a, s', r\\) >","title":"Build a model"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#testing-a-model","text":"Backtest on later data.","title":"Testing a model"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#dyna-q","text":"Build up Transition matrix T and Rewards matrix R to speed up model convergences for Q-Learning. The real world training is expensive, we hallucinate many additional interactions, 100 rounds.","title":"Dyna-Q"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#learning-t","text":"\\(T[s,a,s']\\) = prob \\(s,a->s'\\) Init \\(T_c[]\\) = 0.00001 while executing, observe s,a,s\u2019 increment \\(T_c[s,a,s']\\) \\(T[s,a,s']=T_c[s,a,s']/(\\sum_i T[s,a,i])\\)","title":"Learning T"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#learning-r","text":"\\(R'[s,a]=(1-\\alpha)R[s,a]+\\alpha*r\\) r = immediate rewards. R = expected reward for s,a.","title":"Learning R"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#dyna-q-algorithm","text":"\\(T'[s,a,s']\\) update \\(R'[s,a]\\) update s = random a = random s\u2019 = infer from T[] r = R[s,a] Update Q with \\(<s,a,s',r>\\)","title":"Dyna-Q Algorithm"},{"location":"blog/CS-Master/machine_learning/RL/qlearning/#reference","text":"Reinforcement Q-Learning from Scratch in Python with OpenAI Gym Simple Reinforcement Learning: Q-learning Q-Learning in Python Dyna-Q-Learning","title":"Reference"},{"location":"blog/CS-Master/machine_learning/supervised/","tags":["Algorithms","Machine-Learning","Supervised"],"text":"Supervised ML problems \u2693\ufe0e Give data set X, Y as the label, predict the Y\u2019 Label for the testing data set X\u2019. Linear Regression Decision Trees SVM Artificial Neural Networks Random Forests","title":"Supervised"},{"location":"blog/CS-Master/machine_learning/supervised/#supervised-ml-problems","text":"Give data set X, Y as the label, predict the Y\u2019 Label for the testing data set X\u2019. Linear Regression Decision Trees SVM Artificial Neural Networks Random Forests","title":"Supervised ML problems"},{"location":"blog/CS-Master/machine_learning/supervised/decision_trees/","tags":["Algorithms","Machine-Learning"],"text":"Decision Trees (DTs) \u2693\ufe0e Scikit-Learn Decision Tree","title":"DTs"},{"location":"blog/CS-Master/machine_learning/supervised/decision_trees/#decision-trees-dts","text":"Scikit-Learn Decision Tree","title":"Decision Trees (DTs)"},{"location":"blog/CS-Master/machine_learning/unsupervised/","tags":["Algorithms","Machine-Learning","Unsupervised-Learning"],"text":"Problems \u2693\ufe0e Given X, The goal is to organize the data or to describe its structure. e.g. K-Means","title":"unsupervised"},{"location":"blog/CS-Master/machine_learning/unsupervised/#problems","text":"Given X, The goal is to organize the data or to describe its structure. e.g. K-Means","title":"Problems"},{"location":"blog/CS-Master/philosophy/manifesto/","tags":["CS-philosophy"],"text":"Minifesto Manifesto for Software Craftsmanship","title":"Manifestos"},{"location":"blog/CS-Master/research/","tags":["Research"],"text":"Turing Award \u2693\ufe0e Turing Award List of Turing Award laureates by university affiliation ACM Fellows \u2693\ufe0e IEEE Fellows \u2693\ufe0e","title":"Research"},{"location":"blog/CS-Master/research/#turing-award","text":"Turing Award List of Turing Award laureates by university affiliation","title":"Turing Award"},{"location":"blog/CS-Master/research/#acm-fellows","text":"","title":"ACM Fellows"},{"location":"blog/CS-Master/research/#ieee-fellows","text":"","title":"IEEE Fellows"},{"location":"blog/CS-Master/research/resources/","tags":["Research"],"text":"Search Engine \u2693\ufe0e guide2research Top publications \u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u4e16\u754c\u4e09\u5927\u9876\u7ea7\u4f1a\u8bae\u5206\u522b\u4e3aCVPR\u3001ICCV\u548cECCV\u3002 1. Database\u6570\u636e\u5e93\u65b9\u5411\u56fd\u9645\u4e09\u5927\u9876\u7ea7\u4f1a\u8bae\u5206\u522b\u4e3a\uff1a \u2693\ufe0e SIGMOD\uff1aSpecial Interest Group on Management Of Data VLDB\uff1aInternational Conference on Very Large Data Bases ICDE\uff1aInternational Conference on Data Engineering 2. Machine Learning\u673a\u5668\u5b66\u4e60\u65b9\u5411\u56fd\u9645\u9876\u7ea7\u4f1a\u8bae\u63a8\u8350\uff1a \u2693\ufe0e ICML\uff1aInternational Conference on Machine Learning NIPS\uff1aNeural Information Processing Systems 3. Artificial intelligence\u4eba\u5de5\u667a\u80fd\u65b9\u5411\u56fd\u9645\u4f1a\u8bae\u63a8\u8350\uff1a \u2693\ufe0e AAAI\uff1aAmerican Association for Artificial Intelligence IJCAI\uff1aInternational Joint Conference on Artificial Intelligence NIPS\uff1aNeural Information Processing Systems ICML\uff1aInternational Conference on Machine Learning Publisher \u2693\ufe0e Elsevier\u3001Springer\u3001Taylor & Francis \u548cWiley-Blackwell\u56db\u5927\u9738\u4e3b\u5784\u65ad\u884c\u4e1a","title":"Research Resource"},{"location":"blog/CS-Master/research/resources/#search-engine","text":"guide2research Top publications \u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u4e16\u754c\u4e09\u5927\u9876\u7ea7\u4f1a\u8bae\u5206\u522b\u4e3aCVPR\u3001ICCV\u548cECCV\u3002","title":"Search Engine"},{"location":"blog/CS-Master/research/resources/#1-database\u6570\u636e\u5e93\u65b9\u5411\u56fd\u9645\u4e09\u5927\u9876\u7ea7\u4f1a\u8bae\u5206\u522b\u4e3a","text":"SIGMOD\uff1aSpecial Interest Group on Management Of Data VLDB\uff1aInternational Conference on Very Large Data Bases ICDE\uff1aInternational Conference on Data Engineering","title":"1. Database\u6570\u636e\u5e93\u65b9\u5411\u56fd\u9645\u4e09\u5927\u9876\u7ea7\u4f1a\u8bae\u5206\u522b\u4e3a\uff1a"},{"location":"blog/CS-Master/research/resources/#2-machine-learning\u673a\u5668\u5b66\u4e60\u65b9\u5411\u56fd\u9645\u9876\u7ea7\u4f1a\u8bae\u63a8\u8350","text":"ICML\uff1aInternational Conference on Machine Learning NIPS\uff1aNeural Information Processing Systems","title":"2. Machine Learning\u673a\u5668\u5b66\u4e60\u65b9\u5411\u56fd\u9645\u9876\u7ea7\u4f1a\u8bae\u63a8\u8350\uff1a"},{"location":"blog/CS-Master/research/resources/#3-artificial-intelligence\u4eba\u5de5\u667a\u80fd\u65b9\u5411\u56fd\u9645\u4f1a\u8bae\u63a8\u8350","text":"AAAI\uff1aAmerican Association for Artificial Intelligence IJCAI\uff1aInternational Joint Conference on Artificial Intelligence NIPS\uff1aNeural Information Processing Systems ICML\uff1aInternational Conference on Machine Learning","title":"3. Artificial intelligence\u4eba\u5de5\u667a\u80fd\u65b9\u5411\u56fd\u9645\u4f1a\u8bae\u63a8\u8350\uff1a"},{"location":"blog/CS-Master/research/resources/#publisher","text":"Elsevier\u3001Springer\u3001Taylor & Francis \u548cWiley-Blackwell\u56db\u5927\u9738\u4e3b\u5784\u65ad\u884c\u4e1a","title":"Publisher"},{"location":"blog/CS-Master/security/OAuth/","tags":["Security"],"text":"OAuth is widely used by third party grant access. FLAG companies provide the service. OAuth token expire time OAuth 2.0 Sample code","title":"OAuth"},{"location":"blog/CS-Master/software_engineering/software_engieering/","tags":["CS-philosophy"],"text":"Secured SDLC \u2693\ufe0e What is the secure software development life cycle (SDLC)? | Synopsys Microsoft Security Development Lifecycle NIST Secure Software Development Framework Building Security In Maturity Model (BSIMM) 12 factor methodology \u2693\ufe0e What is API security? OAuth 2.0 JSON Web Token Introduction - jwt.io Product Owner vs Product Manager \u2693\ufe0e","title":"Software Engineering"},{"location":"blog/CS-Master/software_engineering/software_engieering/#secured-sdlc","text":"What is the secure software development life cycle (SDLC)? | Synopsys Microsoft Security Development Lifecycle NIST Secure Software Development Framework Building Security In Maturity Model (BSIMM)","title":"Secured SDLC"},{"location":"blog/CS-Master/software_engineering/software_engieering/#12-factor-methodology","text":"What is API security? OAuth 2.0 JSON Web Token Introduction - jwt.io","title":"12 factor methodology"},{"location":"blog/CS-Master/software_engineering/software_engieering/#product-owner-vs-product-manager","text":"","title":"Product Owner vs Product Manager"},{"location":"blog/DevSecOps/","tags":["DevOps","DevSecOps"],"text":"DevOps RoadMap \u2693\ufe0e DevOps-Roadmap-Github Devops DevSecOps RoadMap \u2693\ufe0e DevSecOps-RoadMap-Github DevSecOps - \u00a9PentesterAcademy.com DevSecOps Maturity Model(DSOMM) \u2693\ufe0e Why DevSecOps \u2693\ufe0e DevSecOps term is a relatively new term but given the rise in security awareness as well as breaches, it has become the talk of the town. Instead of having a team for manual security testing, it is way more efficient and cost/time effective to have automated security checks and catching the issue as soon as possible. This makes DevSecOps a highly demanded and regarded skill in the industry. DevSecOps Automating Terraform Deployment to Google Cloud with GitHub Actions","title":"DevSecOps"},{"location":"blog/DevSecOps/#devops-roadmap","text":"DevOps-Roadmap-Github Devops","title":"DevOps RoadMap"},{"location":"blog/DevSecOps/#devsecops-roadmap","text":"DevSecOps-RoadMap-Github DevSecOps - \u00a9PentesterAcademy.com","title":"DevSecOps RoadMap"},{"location":"blog/DevSecOps/#devsecops-maturity-modeldsomm","text":"","title":"DevSecOps Maturity Model(DSOMM)"},{"location":"blog/DevSecOps/#why-devsecops","text":"DevSecOps term is a relatively new term but given the rise in security awareness as well as breaches, it has become the talk of the town. Instead of having a team for manual security testing, it is way more efficient and cost/time effective to have automated security checks and catching the issue as soon as possible. This makes DevSecOps a highly demanded and regarded skill in the industry. DevSecOps Automating Terraform Deployment to Google Cloud with GitHub Actions","title":"Why DevSecOps"},{"location":"blog/DevSecOps/SDLC/","tags":["SDLC","DevSecOps"],"text":"Problem \u2693\ufe0e How to generate a good software? What\u2019s the procedure for software engineer? What methodologies should we use? 101 \u2693\ufe0e Frederick Brooks Jr. - The Mythical Man-Month: Essays on Software Engineering The first Turing award in Software Engineering field. SDLC Methodologies DevSecOps \u2693\ufe0e Secure SDLC Agile Security \u2693\ufe0e Agile Security More reference \u2693\ufe0e Top 12 SDLC Methodologies with Pros and Cons","title":"SDLC"},{"location":"blog/DevSecOps/SDLC/#problem","text":"How to generate a good software? What\u2019s the procedure for software engineer? What methodologies should we use?","title":"Problem"},{"location":"blog/DevSecOps/SDLC/#101","text":"Frederick Brooks Jr. - The Mythical Man-Month: Essays on Software Engineering The first Turing award in Software Engineering field. SDLC Methodologies","title":"101"},{"location":"blog/DevSecOps/SDLC/#devsecops","text":"Secure SDLC","title":"DevSecOps"},{"location":"blog/DevSecOps/SDLC/#agile-security","text":"Agile Security","title":"Agile Security"},{"location":"blog/DevSecOps/SDLC/#more-reference","text":"Top 12 SDLC Methodologies with Pros and Cons","title":"More reference"},{"location":"blog/DevSecOps/0.plan/","tags":["Plan","DevSecOps"],"text":"Problems \u2693\ufe0e What business features could meet the market? What engineer internal features could improve the efficiency mostly? What innovations could we have in this release time frame? What security policies? What technology stack should we use? Threat Model Policies \u2693\ufe0e","title":"0.Plan"},{"location":"blog/DevSecOps/0.plan/#problems","text":"What business features could meet the market? What engineer internal features could improve the efficiency mostly? What innovations could we have in this release time frame? What security policies? What technology stack should we use?","title":"Problems"},{"location":"blog/DevSecOps/0.plan/#threat-model-policies","text":"","title":"Threat Model Policies"},{"location":"blog/DevSecOps/1.code/","tags":["code","DevSecOps"],"text":"Problems \u2693\ufe0e How to find cross reference? How to find issues earlier? How to use debugger? Scanner build \u2693\ufe0e Scan for mistakes, security issues and Vulnerabilities. DevSkim \u2693\ufe0e Performs analysis on the applications and reports the vulnerabilities Automated Code Review \u2693\ufe0e PMD: Finding Common Vulnerabilities DevSkim: Code Security Review FindSecBugs: Securing Java Applications Resources \u2693\ufe0e Benefits of Automated Code Review (ACR) over Manual Code Review (MCR) Sensitive Information Scan \u2693\ufe0e The Sensitive Information Scan (SAS) phase scans the code for sensitive information (e.g. hardcoded password, tokens, secret keys, etc) before pushing the code into code repositories. Trufflehog: Locating Sensitive Information GitSecrets: Finding Hardcoded Credentials Talisman: Pre-Commit Code Scanning Using Trufflehog and GitSecrets Static Application Security Testing \u2693\ufe0e The Static Application Security Testing (SAST) is done to identify the possible vulnerabilities or security issues in non-running source code by using techniques likeTaint Analysis and Data Flow Analysis. What is Static Code Analysis? What is Taint Analysis? What is Data Flow testing? More Static Code Analysis techniques Why is it important in DevSecOps? \u2693\ufe0e The Static Application Security Testing phase can be used to identify security issues. For example, taint analysis can identify the variables that can handle the user input and check if vulnerability like buffer overflow can occur. Tools \u2693\ufe0e Flawfinder: Statically Scanning C code Graudit: Hunting Sensitive Information PyCQA Bandit: Scanning Python Code for Issues Spotbugs: Finding Bugs in Java Code SonarQube: Continuous Code Quality Monitoring","title":"1.code"},{"location":"blog/DevSecOps/1.code/#problems","text":"How to find cross reference? How to find issues earlier? How to use debugger?","title":"Problems"},{"location":"blog/DevSecOps/1.code/#scanner-build","text":"Scan for mistakes, security issues and Vulnerabilities.","title":"Scanner build"},{"location":"blog/DevSecOps/1.code/#devskim","text":"Performs analysis on the applications and reports the vulnerabilities","title":"DevSkim"},{"location":"blog/DevSecOps/1.code/#automated-code-review","text":"PMD: Finding Common Vulnerabilities DevSkim: Code Security Review FindSecBugs: Securing Java Applications","title":"Automated Code Review"},{"location":"blog/DevSecOps/1.code/#resources","text":"Benefits of Automated Code Review (ACR) over Manual Code Review (MCR)","title":"Resources"},{"location":"blog/DevSecOps/1.code/#sensitive-information-scan","text":"The Sensitive Information Scan (SAS) phase scans the code for sensitive information (e.g. hardcoded password, tokens, secret keys, etc) before pushing the code into code repositories. Trufflehog: Locating Sensitive Information GitSecrets: Finding Hardcoded Credentials Talisman: Pre-Commit Code Scanning Using Trufflehog and GitSecrets","title":"Sensitive Information Scan"},{"location":"blog/DevSecOps/1.code/#static-application-security-testing","text":"The Static Application Security Testing (SAST) is done to identify the possible vulnerabilities or security issues in non-running source code by using techniques likeTaint Analysis and Data Flow Analysis. What is Static Code Analysis? What is Taint Analysis? What is Data Flow testing? More Static Code Analysis techniques","title":"Static Application Security Testing"},{"location":"blog/DevSecOps/1.code/#why-is-it-important-in-devsecops","text":"The Static Application Security Testing phase can be used to identify security issues. For example, taint analysis can identify the variables that can handle the user input and check if vulnerability like buffer overflow can occur.","title":"Why is it important in DevSecOps?"},{"location":"blog/DevSecOps/1.code/#tools","text":"Flawfinder: Statically Scanning C code Graudit: Hunting Sensitive Information PyCQA Bandit: Scanning Python Code for Issues Spotbugs: Finding Bugs in Java Code SonarQube: Continuous Code Quality Monitoring","title":"Tools"},{"location":"blog/DevSecOps/1.code/IDE/","tags":["code","DevSecOps"],"text":"IDE \u2693\ufe0e VSCode Eclipse Arduino IDE Cloud9 Intellij Key functionalities \u2693\ufe0e Cross references search","title":"IDE"},{"location":"blog/DevSecOps/1.code/IDE/#ide","text":"VSCode Eclipse Arduino IDE Cloud9 Intellij","title":"IDE"},{"location":"blog/DevSecOps/1.code/IDE/#key-functionalities","text":"Cross references search","title":"Key functionalities"},{"location":"blog/DevSecOps/1.code/VCS/","tags":["code","DevSecOps"],"text":"Git \u2693\ufe0e Github Gitlab Others \u2693\ufe0e CVS \u2693\ufe0e Mercurial \u2693\ufe0e Multiple repos management \u2693\ufe0e Google Git Repo Semantic Versioning \u2693\ufe0e Challenges \u2693\ufe0e How to tag and manage multiple repos? How to manage the branching strategy and tags?","title":"VCS"},{"location":"blog/DevSecOps/1.code/VCS/#git","text":"Github Gitlab","title":"Git"},{"location":"blog/DevSecOps/1.code/VCS/#others","text":"","title":"Others"},{"location":"blog/DevSecOps/1.code/VCS/#cvs","text":"","title":"CVS"},{"location":"blog/DevSecOps/1.code/VCS/#mercurial","text":"","title":"Mercurial"},{"location":"blog/DevSecOps/1.code/VCS/#multiple-repos-management","text":"Google Git Repo","title":"Multiple repos management"},{"location":"blog/DevSecOps/1.code/VCS/#semantic-versioning","text":"","title":"Semantic Versioning"},{"location":"blog/DevSecOps/1.code/VCS/#challenges","text":"How to tag and manage multiple repos? How to manage the branching strategy and tags?","title":"Challenges"},{"location":"blog/DevSecOps/2.build/","tags":["Build","DevSecOps"],"text":"Problems \u2693\ufe0e How to reduce the duplicate efforts of build? How to build in parallel to shorten build time? How to better organize the build code? Definition \u2693\ufe0e A build system is mainly used to compile the source code into a deployable/usable form. However, it can also help in managing the following: - Builds - Documentation - Dependencies - Releases Java Family \u2693\ufe0e Gradle \u2693\ufe0e Maven \u2693\ufe0e What\u2019s Maven? SBT Scala \u2693\ufe0e C Family \u2693\ufe0e GNU Make \u2693\ufe0e What\u2019s GNU Make Makefile tutorials CMake \u2693\ufe0e Why is it important in DevSecOps? \u2693\ufe0e The project build phase compiles/transforms the source code into a deployable form (e.g. binary, package) by using/integrating the libraries/dependent packages, etc. It is important to check if the build system, dependency packages/libraries being used, are not vulnerable to known attacks and are updated to the latest security fixes.","title":"2.build"},{"location":"blog/DevSecOps/2.build/#problems","text":"How to reduce the duplicate efforts of build? How to build in parallel to shorten build time? How to better organize the build code?","title":"Problems"},{"location":"blog/DevSecOps/2.build/#definition","text":"A build system is mainly used to compile the source code into a deployable/usable form. However, it can also help in managing the following: - Builds - Documentation - Dependencies - Releases","title":"Definition"},{"location":"blog/DevSecOps/2.build/#java-family","text":"","title":"Java Family"},{"location":"blog/DevSecOps/2.build/#gradle","text":"","title":"Gradle"},{"location":"blog/DevSecOps/2.build/#maven","text":"What\u2019s Maven?","title":"Maven"},{"location":"blog/DevSecOps/2.build/#sbt-scala","text":"","title":"SBT Scala"},{"location":"blog/DevSecOps/2.build/#c-family","text":"","title":"C Family"},{"location":"blog/DevSecOps/2.build/#gnu-make","text":"What\u2019s GNU Make Makefile tutorials","title":"GNU Make"},{"location":"blog/DevSecOps/2.build/#cmake","text":"","title":"CMake"},{"location":"blog/DevSecOps/2.build/#why-is-it-important-in-devsecops","text":"The project build phase compiles/transforms the source code into a deployable form (e.g. binary, package) by using/integrating the libraries/dependent packages, etc. It is important to check if the build system, dependency packages/libraries being used, are not vulnerable to known attacks and are updated to the latest security fixes.","title":"Why is it important in DevSecOps?"},{"location":"blog/DevSecOps/2.build/gradle/","text":"Gradle note \u2693\ufe0e dependencies Converting from Maven to Gradle Could not find org.jenkins-ci.plugins.workflow:workflow-steps:2.22. Searched in the following locations: mavenCentral()","title":"Gradle note"},{"location":"blog/DevSecOps/2.build/gradle/#gradle-note","text":"dependencies Converting from Maven to Gradle Could not find org.jenkins-ci.plugins.workflow:workflow-steps:2.22. Searched in the following locations: mavenCentral()","title":"Gradle note"},{"location":"blog/DevSecOps/3.test/","tags":["Test","Automation","DevSecOps"],"text":"Problems \u2693\ufe0e How to validate the feature requirements? How to build confidence about our product? Testing Techniques \u2693\ufe0e Parametrized testing - Data Driven Testing Behavior Driven testing. Python \u2693\ufe0e Pytest tox Robot Framework Java Family \u2693\ufe0e JUnit used for Spring based application with Mockito Spock for Groovy Selenium , Selenium IDE, Selenium Python Bindings. NextNG , general testing and Web Automation (Selenium) Unit Testing Spring Boot JUnit 5 vs TestNG Dynamic Application Security Analysis (DAST) \u2693\ufe0e The Dynamic Application Security Analysis (DAST) is performed to identify the possible run-time vulnerabilities or security issues. Unlike static analysis, dynamic analysis is performed on a running project. Tools Covered \u2693\ufe0e OWASP ZAP: Detecting Vulnerabilities in WebApps BDD Security: Behaviour Driven Development Arachini: Automated Vulnerability Scanning Nikto: Automatic WebApp Scanning Radamsa: Automated Fuzzing FuzzDB: Fault Injection Testing Performance test \u2693\ufe0e Loadrunner jmeter","title":"3.test"},{"location":"blog/DevSecOps/3.test/#problems","text":"How to validate the feature requirements? How to build confidence about our product?","title":"Problems"},{"location":"blog/DevSecOps/3.test/#testing-techniques","text":"Parametrized testing - Data Driven Testing Behavior Driven testing.","title":"Testing Techniques"},{"location":"blog/DevSecOps/3.test/#python","text":"Pytest tox Robot Framework","title":"Python"},{"location":"blog/DevSecOps/3.test/#java-family","text":"JUnit used for Spring based application with Mockito Spock for Groovy Selenium , Selenium IDE, Selenium Python Bindings. NextNG , general testing and Web Automation (Selenium) Unit Testing Spring Boot JUnit 5 vs TestNG","title":"Java Family"},{"location":"blog/DevSecOps/3.test/#dynamic-application-security-analysis-dast","text":"The Dynamic Application Security Analysis (DAST) is performed to identify the possible run-time vulnerabilities or security issues. Unlike static analysis, dynamic analysis is performed on a running project.","title":"Dynamic Application Security Analysis (DAST)"},{"location":"blog/DevSecOps/3.test/#tools-covered","text":"OWASP ZAP: Detecting Vulnerabilities in WebApps BDD Security: Behaviour Driven Development Arachini: Automated Vulnerability Scanning Nikto: Automatic WebApp Scanning Radamsa: Automated Fuzzing FuzzDB: Fault Injection Testing","title":"Tools Covered"},{"location":"blog/DevSecOps/3.test/#performance-test","text":"Loadrunner jmeter","title":"Performance test"},{"location":"blog/DevSecOps/3.test/selenium/","tags":["Test","Automation","DevSecOps"],"text":"Intro \u2693\ufe0e Run Selenium UI tests in Docker containers Selenium Grid architecture Kubernetes DevOps Youtuber","title":"Selenium"},{"location":"blog/DevSecOps/3.test/selenium/#intro","text":"Run Selenium UI tests in Docker containers Selenium Grid architecture Kubernetes DevOps Youtuber","title":"Intro"},{"location":"blog/DevSecOps/3.test/QA/","tags":["QA","Testing"],"text":"Requirements analysis \u2693\ufe0e QA professionals are involved in the analysis and clarification of functional and non-functional software requirements and make sure the requirements are clear, consistent, complete, traceable, and testable Test planning \u2693\ufe0e Test plan ISO/IEC/IEEE 29119-3:2013 A test plan should contain a test strategy and cover a testing scope, a project budget and deadlines, the types and levels of testing an application requires, bug tracking and reporting procedures, resources and their responsibilities, and other factors. Test design \u2693\ufe0e QA specialists design test cases or checklists covering software requirements. Test cases outline conditions, test data (prepared at the test design stage as well), and test steps needed to validate particular functionality, and state an expected test result. Test execution and defect reporting \u2693\ufe0e Retesting and regression testing \u2693\ufe0e Release testing \u2693\ufe0e Smoke testing References \u2693\ufe0e A Practical Guide to the Software QA Process QA process maturity: Models and capabilities QA process","title":"QA"},{"location":"blog/DevSecOps/3.test/QA/#requirements-analysis","text":"QA professionals are involved in the analysis and clarification of functional and non-functional software requirements and make sure the requirements are clear, consistent, complete, traceable, and testable","title":"Requirements analysis"},{"location":"blog/DevSecOps/3.test/QA/#test-planning","text":"Test plan ISO/IEC/IEEE 29119-3:2013 A test plan should contain a test strategy and cover a testing scope, a project budget and deadlines, the types and levels of testing an application requires, bug tracking and reporting procedures, resources and their responsibilities, and other factors.","title":"Test planning"},{"location":"blog/DevSecOps/3.test/QA/#test-design","text":"QA specialists design test cases or checklists covering software requirements. Test cases outline conditions, test data (prepared at the test design stage as well), and test steps needed to validate particular functionality, and state an expected test result.","title":"Test design"},{"location":"blog/DevSecOps/3.test/QA/#test-execution-and-defect-reporting","text":"","title":"Test execution and defect reporting"},{"location":"blog/DevSecOps/3.test/QA/#retesting-and-regression-testing","text":"","title":"Retesting and regression testing"},{"location":"blog/DevSecOps/3.test/QA/#release-testing","text":"Smoke testing","title":"Release testing"},{"location":"blog/DevSecOps/3.test/QA/#references","text":"A Practical Guide to the Software QA Process QA process maturity: Models and capabilities QA process","title":"References"},{"location":"blog/DevSecOps/3.test/QA/grey_box_testing/","text":"Grey Box Testing \u2693\ufe0e What is Grey Box Testing? Techniques, Example","title":"Grey Box Testing"},{"location":"blog/DevSecOps/3.test/QA/grey_box_testing/#grey-box-testing","text":"What is Grey Box Testing? Techniques, Example","title":"Grey Box Testing"},{"location":"blog/DevSecOps/3.test/QA/testing_technology/","text":"Key idea \u2693\ufe0e Jave \u2693\ufe0e","title":"Testing technology"},{"location":"blog/DevSecOps/3.test/QA/testing_technology/#key-idea","text":"","title":"Key idea"},{"location":"blog/DevSecOps/3.test/QA/testing_technology/#jave","text":"","title":"Jave"},{"location":"blog/DevSecOps/4.release/","tags":["Release","DevSecOps"],"text":"Problems \u2693\ufe0e How to delivery products in public channels? How to manage those binaries? CI \u2693\ufe0e What\u2019s CI? JFrog artifactory \u2693\ufe0e CloudSmith \u2693\ufe0e Jenkins \u2693\ufe0e Jenkins Tutorials GoCD \u2693\ufe0e Why is it important in DevSecOps? \u2693\ufe0e In the case of DevSecops, the CI server triggers the security tools in different phases (e.g. Static Code Analysis, Dynamic Analysis, etc) and stores the logs/reports. Software Composition Analysis \u2693\ufe0e What is Software Composition Analysis? Tools \u2693\ufe0e Retire.js: Finding Vulnerable Libraries OSSAudit: Auditing Python Packages OWASP Dependency-Check Blackduck Compliance as Code(CAC) \u2693\ufe0e Why is it important in DevSecOps? \u2693\ufe0e The Compliance as Code phase makes the compliance a part of the DevSecOps pipeline and ensures that on every release, the test server adheres to the security policies defined for the project. This reduces the attack surface and obviously helps with becoming compliance-ready. Tools \u2693\ufe0e Inspec: Automating Compliance Checks ServerSpec: Automating Configuration Tests OpenSCAP: Automating Compliance Checks Vulnerability Management \u2693\ufe0e What is Vulnerability Management? Vulnerability Assessment vs Vulnerability management Tools \u2693\ufe0e Archery - opensource vulnerability assessment and management tool DefectDojo - security program and vulnerability management tool","title":"4.Release"},{"location":"blog/DevSecOps/4.release/#problems","text":"How to delivery products in public channels? How to manage those binaries?","title":"Problems"},{"location":"blog/DevSecOps/4.release/#ci","text":"What\u2019s CI?","title":"CI"},{"location":"blog/DevSecOps/4.release/#jfrog-artifactory","text":"","title":"JFrog artifactory"},{"location":"blog/DevSecOps/4.release/#cloudsmith","text":"","title":"CloudSmith"},{"location":"blog/DevSecOps/4.release/#jenkins","text":"Jenkins Tutorials","title":"Jenkins"},{"location":"blog/DevSecOps/4.release/#gocd","text":"","title":"GoCD"},{"location":"blog/DevSecOps/4.release/#why-is-it-important-in-devsecops","text":"In the case of DevSecops, the CI server triggers the security tools in different phases (e.g. Static Code Analysis, Dynamic Analysis, etc) and stores the logs/reports.","title":"Why is it important in DevSecOps?"},{"location":"blog/DevSecOps/4.release/#software-composition-analysis","text":"What is Software Composition Analysis?","title":"Software Composition Analysis"},{"location":"blog/DevSecOps/4.release/#tools","text":"Retire.js: Finding Vulnerable Libraries OSSAudit: Auditing Python Packages OWASP Dependency-Check Blackduck","title":"Tools"},{"location":"blog/DevSecOps/4.release/#compliance-as-codecac","text":"","title":"Compliance as Code(CAC)"},{"location":"blog/DevSecOps/4.release/#why-is-it-important-in-devsecops_1","text":"The Compliance as Code phase makes the compliance a part of the DevSecOps pipeline and ensures that on every release, the test server adheres to the security policies defined for the project. This reduces the attack surface and obviously helps with becoming compliance-ready.","title":"Why is it important in DevSecOps?"},{"location":"blog/DevSecOps/4.release/#tools_1","text":"Inspec: Automating Compliance Checks ServerSpec: Automating Configuration Tests OpenSCAP: Automating Compliance Checks","title":"Tools"},{"location":"blog/DevSecOps/4.release/#vulnerability-management","text":"What is Vulnerability Management? Vulnerability Assessment vs Vulnerability management","title":"Vulnerability Management"},{"location":"blog/DevSecOps/4.release/#tools_2","text":"Archery - opensource vulnerability assessment and management tool DefectDojo - security program and vulnerability management tool","title":"Tools"},{"location":"blog/DevSecOps/5.deploy/","tags":["CD","Release","DevSecOps"],"text":"Problems \u2693\ufe0e How to deploy our solution in the production? How to automate the deploy process? Automation Provision \u2693\ufe0e Infrastructure as Code \u2693\ufe0e What\u2019s IaC Ansible \u2693\ufe0e puppet \u2693\ufe0e chef \u2693\ufe0e Terraform \u2693\ufe0e Why is it important in DevSecOps? \u2693\ufe0e Infrastructure as Code saves the repetitive human effort in setting up and managing the infrastructure. It also removes the human error altogether (i.e. once the script is finalized) by making sure that everything is set up, in the same way, every time the script is run. It also ensures that the developers and testers are working on an accurate setup with no special settings/misconfiguration etc caused by the operations team.","title":"5.Deploy"},{"location":"blog/DevSecOps/5.deploy/#problems","text":"How to deploy our solution in the production? How to automate the deploy process?","title":"Problems"},{"location":"blog/DevSecOps/5.deploy/#automation-provision","text":"","title":"Automation Provision"},{"location":"blog/DevSecOps/5.deploy/#infrastructure-as-code","text":"What\u2019s IaC","title":"Infrastructure as Code"},{"location":"blog/DevSecOps/5.deploy/#ansible","text":"","title":"Ansible"},{"location":"blog/DevSecOps/5.deploy/#puppet","text":"","title":"puppet"},{"location":"blog/DevSecOps/5.deploy/#chef","text":"","title":"chef"},{"location":"blog/DevSecOps/5.deploy/#terraform","text":"","title":"Terraform"},{"location":"blog/DevSecOps/5.deploy/#why-is-it-important-in-devsecops","text":"Infrastructure as Code saves the repetitive human effort in setting up and managing the infrastructure. It also removes the human error altogether (i.e. once the script is finalized) by making sure that everything is set up, in the same way, every time the script is run. It also ensures that the developers and testers are working on an accurate setup with no special settings/misconfiguration etc caused by the operations team.","title":"Why is it important in DevSecOps?"},{"location":"blog/DevSecOps/6.operate/","tags":["Operate the solution","DevSecOps"],"text":"Problems \u2693\ufe0e How to operate our solutions and report bugs? Ansible \u2693\ufe0e","title":"6. Operate"},{"location":"blog/DevSecOps/6.operate/#problems","text":"How to operate our solutions and report bugs?","title":"Problems"},{"location":"blog/DevSecOps/6.operate/#ansible","text":"","title":"Ansible"},{"location":"blog/DevSecOps/7.monitor/","tags":["Monitor","DevSecOps"],"text":"Problems \u2693\ufe0e How to Monitor our solutions and report bugs? Ansible \u2693\ufe0e","title":"7. Monitor"},{"location":"blog/DevSecOps/7.monitor/#problems","text":"How to Monitor our solutions and report bugs?","title":"Problems"},{"location":"blog/DevSecOps/7.monitor/#ansible","text":"","title":"Ansible"},{"location":"blog/DevSecOps/github-actions/","text":"Setting an environment variable How do I set an env var with a bash expression in GitHub Actions? Creating dependent jobs","title":"Index"},{"location":"blog/DevSecOps/interviews/","tags":["Interviews","DevSecOps"],"text":"Definition \u2693\ufe0e What\u2019s the differences between CI and CD? \u2693\ufe0e What\u2019s the canary test, A/B Test? \u2693\ufe0e","title":"Interviews"},{"location":"blog/DevSecOps/interviews/#definition","text":"","title":"Definition"},{"location":"blog/DevSecOps/interviews/#whats-the-differences-between-ci-and-cd","text":"","title":"What's the differences between CI and CD?"},{"location":"blog/DevSecOps/interviews/#whats-the-canary-test-ab-test","text":"","title":"What's the canary test, A/B Test?"},{"location":"blog/DevSecOps/security/","tags":["DevSecOps"],"text":"DevSecOps - \u00a9PentesterAcademy.com Reference \u2693\ufe0e SDLC Agile DevOps Definition SDLC vs Agile vs DevOps DevSecOps Stages \u2693\ufe0e Threat Model Automated Code Review(ACR) Sensitive Information Scan Static Application Security Testing(SAST) Dynamic Application Security Testing(DAST) Software Composition Analysis Vulnerability Management Compliance as Code Secret Management","title":"Security"},{"location":"blog/DevSecOps/security/#reference","text":"SDLC Agile DevOps Definition SDLC vs Agile vs DevOps","title":"Reference"},{"location":"blog/DevSecOps/security/#devsecops-stages","text":"Threat Model Automated Code Review(ACR) Sensitive Information Scan Static Application Security Testing(SAST) Dynamic Application Security Testing(DAST) Software Composition Analysis Vulnerability Management Compliance as Code Secret Management","title":"DevSecOps Stages"},{"location":"blog/DevSecOps/security/automated_code_review/","tags":["DevSecOps"],"text":"","title":"ACR"},{"location":"blog/DevSecOps/security/dynamic_application_security_testing/","text":"","title":"Dynamic application security testing"},{"location":"blog/DevSecOps/security/threat_model/","tags":["DevSecOps"],"text":"Threat Model \u2693\ufe0e Threats STRIDE DREAD Tools \u2693\ufe0e Threatspec References \u2693\ufe0e Threat Modeling Threat Modeling: 12 Available Methods Advanced threat modeling Threat modeling of connected cars using STRIDE Threat modeling for web apps Five steps to successful threat modeling","title":"Threat Model"},{"location":"blog/DevSecOps/security/threat_model/#threat-model","text":"Threats STRIDE DREAD","title":"Threat Model"},{"location":"blog/DevSecOps/security/threat_model/#tools","text":"Threatspec","title":"Tools"},{"location":"blog/DevSecOps/security/threat_model/#references","text":"Threat Modeling Threat Modeling: 12 Available Methods Advanced threat modeling Threat modeling of connected cars using STRIDE Threat modeling for web apps Five steps to successful threat modeling","title":"References"},{"location":"blog/DevSecOps/tools/","tags":["DevOps","Tools"],"text":"DevOps Tools Ecosystem 2021 \u2693\ufe0e DevOps Tools Ecosystem 2021 Remote debugger \u2693\ufe0e theiaide VS Code Server Monitor tool \u2693\ufe0e Sensu prometheus alertmanager zabbix Development environment management Terraform (GO) Infrastructure management - primarily managing remote resources in cloud providers such as AWS. Vagrant (Ruby) is a tool for building and managing virtual machine environments in a single workflow. Vagrant vs. Terraform | Vagrant by HashiCorp","title":"Tools"},{"location":"blog/DevSecOps/tools/#devops-tools-ecosystem-2021","text":"DevOps Tools Ecosystem 2021","title":"DevOps Tools Ecosystem 2021"},{"location":"blog/DevSecOps/tools/#remote-debugger","text":"theiaide VS Code Server","title":"Remote debugger"},{"location":"blog/DevSecOps/tools/#monitor-tool","text":"Sensu prometheus alertmanager zabbix Development environment management Terraform (GO) Infrastructure management - primarily managing remote resources in cloud providers such as AWS. Vagrant (Ruby) is a tool for building and managing virtual machine environments in a single workflow. Vagrant vs. Terraform | Vagrant by HashiCorp","title":"Monitor tool"},{"location":"blog/DevSecOps/tools/CM/","text":"Configuration Management \u2693\ufe0e Infrastructure as code - Wikipedia Ansible \u2693\ufe0e User Guide \u2014 Ansible Documentation What? Automation language, automation engines. Terraform Chef","title":"Configuration Management"},{"location":"blog/DevSecOps/tools/CM/#configuration-management","text":"Infrastructure as code - Wikipedia","title":"Configuration Management"},{"location":"blog/DevSecOps/tools/CM/#ansible","text":"User Guide \u2014 Ansible Documentation What? Automation language, automation engines. Terraform Chef","title":"Ansible"},{"location":"blog/DevSecOps/tools/_tools_intro/","text":"List of tools \u2693\ufe0e Basic tools \u2693\ufe0e pytest Docker Documentation Jenkins Advanced tools \u2693\ufe0e Kubernetes Documentation Elastic Stack and Product Documentation Kibana Guide [7.8] Grafana documentation","title":" tools intro"},{"location":"blog/DevSecOps/tools/_tools_intro/#list-of-tools","text":"","title":"List of tools"},{"location":"blog/DevSecOps/tools/_tools_intro/#basic-tools","text":"pytest Docker Documentation Jenkins","title":"Basic tools"},{"location":"blog/DevSecOps/tools/_tools_intro/#advanced-tools","text":"Kubernetes Documentation Elastic Stack and Product Documentation Kibana Guide [7.8] Grafana documentation","title":"Advanced tools"},{"location":"blog/DevSecOps/tools/docker/","text":"Docker \u2693\ufe0e A Docker Tutorial for Beginners Docker cleanup Dockerfile \u2693\ufe0e Multistage build for production and development images \u2693\ufe0e Best practices Keywords/commands \u2693\ufe0e .dockerignore: file ignore files in the context From : a new build stage and sets the base image. RUN : Execute commands in a new year on top of current image. CMD : the defaults for an executing container. exec, shell, Entrypoint default form. ENTRYPOINT : exec or shell form. LABEL : Add metadata to a image. EXPOSE: container listens on ports and protocols. Default TCP. ENV : environment variable in the following commands. ADD : Add files from the source new files, directories or remote file URLs COPY : takes in a src and destination Add or COPY VOLUME: create a mount point and marks it as externally mounted volume in the host USER: set user access group. WORKDIR: set the working directory for RUN, CMD, ENTRYPOINT, COPY and ADD. ARG: intention - update dockerfile if this arguments changed. ONBUILD: a trigger instruction to be executed at a later time STOPSIGNAL: system call signal that will be sent to the container to exit HEALTHCHECK: detect cases such as a web server that is stuck in an infinite loop and unable to handle new connections SHELL: Change default shell. Docker commands \u2693\ufe0e BUILD : use Dockerfile and a context(PATH or URL the set of files)","title":"Docker"},{"location":"blog/DevSecOps/tools/docker/#docker","text":"A Docker Tutorial for Beginners Docker cleanup","title":"Docker"},{"location":"blog/DevSecOps/tools/docker/#dockerfile","text":"","title":"Dockerfile"},{"location":"blog/DevSecOps/tools/docker/#multistage-build-for-production-and-development-images","text":"Best practices","title":"Multistage build for production and development images"},{"location":"blog/DevSecOps/tools/docker/#keywordscommands","text":".dockerignore: file ignore files in the context From : a new build stage and sets the base image. RUN : Execute commands in a new year on top of current image. CMD : the defaults for an executing container. exec, shell, Entrypoint default form. ENTRYPOINT : exec or shell form. LABEL : Add metadata to a image. EXPOSE: container listens on ports and protocols. Default TCP. ENV : environment variable in the following commands. ADD : Add files from the source new files, directories or remote file URLs COPY : takes in a src and destination Add or COPY VOLUME: create a mount point and marks it as externally mounted volume in the host USER: set user access group. WORKDIR: set the working directory for RUN, CMD, ENTRYPOINT, COPY and ADD. ARG: intention - update dockerfile if this arguments changed. ONBUILD: a trigger instruction to be executed at a later time STOPSIGNAL: system call signal that will be sent to the container to exit HEALTHCHECK: detect cases such as a web server that is stuck in an infinite loop and unable to handle new connections SHELL: Change default shell.","title":"Keywords/commands"},{"location":"blog/DevSecOps/tools/docker/#docker-commands","text":"BUILD : use Dockerfile and a context(PATH or URL the set of files)","title":"Docker commands"},{"location":"blog/DevSecOps/tools/docs/","tags":["Docs"],"text":"Intro \u2693\ufe0e Technical documentation is the first impression for customer/users. Docs tool \u2693\ufe0e MkDocs Mkdosc Material Google Material Design Markdown \u2693\ufe0e Easier to write and use across different platforms.","title":"Docs"},{"location":"blog/DevSecOps/tools/docs/#intro","text":"Technical documentation is the first impression for customer/users.","title":"Intro"},{"location":"blog/DevSecOps/tools/docs/#docs-tool","text":"MkDocs Mkdosc Material Google Material Design","title":"Docs tool"},{"location":"blog/DevSecOps/tools/docs/#markdown","text":"Easier to write and use across different platforms.","title":"Markdown"},{"location":"blog/DevSecOps/tools/docs/markdown/maths/","tags":["Markdown","Latex","Mathmatics"],"text":"Markdown can support Latex grammer for symbol and math. Greek Letters Symbol Markdown txt Latex \\(\\alpha\\) $\\alpha$ \\alpha \\(\\beta\\) $\\beta$ \\beta \\(\\gamma\\) $\\gamma$ \\gammma \\(\\Gamma\\) $\\Gamma$ \\Gammma \\(\\pi\\) $\\pi$ \\pi \\(\\Pi\\) $\\Pi$ \\Pi \\(\\phi\\) $\\phi$ \\phi \\(\\Phi\\) $\\Phi$ \\Phi \\(\\varphi\\) $\\varphi$ \\varphi \\(\\theta\\) $\\theta$ \\theta \\(\\Theta\\) $\\Theta$ \\Theta mkdocs plugin: MathJax More Reference: Writing Mathematic Fomulars in Markdown","title":"Math-Markdown"},{"location":"blog/DevSecOps/tools/jenkins/jenkins/","tags":["DevOps","CI/CD"],"text":"Tikal Knowledge - Generic Python script-runner using Dockerized Jenkins-pipeline GitHub - jenkinsci/pyenv-pipeline-plugin: Execute commands in Python virtualenvs in Jenkins Pipeline DSL Exercise: Run LeTP-UnitTests locally with docker. Using Docker with Pipeline declarative-pipeline-fundamentals Q&A: \u2693\ufe0e What\u2019s two types of pipeline? \u2693\ufe0e Pipeline Syntax Declarative and Scripted pipeline.","title":"Jenkins"},{"location":"blog/DevSecOps/tools/jenkins/jenkins/#qa","text":"","title":"Q&amp;A:"},{"location":"blog/DevSecOps/tools/jenkins/jenkins/#whats-two-types-of-pipeline","text":"Pipeline Syntax Declarative and Scripted pipeline.","title":"What's two types of pipeline?"},{"location":"blog/DevSecOps/tools/jenkins/jenkins_design/","text":"Jenkins design \u2693\ufe0e structuring the project to core, plugins, modules, and other independent pieces","title":"Jenkins design"},{"location":"blog/DevSecOps/tools/jenkins/jenkins_design/#jenkins-design","text":"structuring the project to core, plugins, modules, and other independent pieces","title":"Jenkins design"},{"location":"blog/DevSecOps/tools/jenkins/jenkins_pipeline/","text":"Jenkins pipeline \u2693\ufe0e Jenkins: Using Gradle to build your Shared Library \\| Rubix Jenkins: Preparing your Shared Library for tests \\| Rubix Jenkins: Testing a full declarative pipeline in your Shared Library \\| Rubix","title":"Jenkins pipeline"},{"location":"blog/DevSecOps/tools/jenkins/jenkins_pipeline/#jenkins-pipeline","text":"Jenkins: Using Gradle to build your Shared Library \\| Rubix Jenkins: Preparing your Shared Library for tests \\| Rubix Jenkins: Testing a full declarative pipeline in your Shared Library \\| Rubix","title":"Jenkins pipeline"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/","text":"Kubernetes \u2693\ufe0e What\u2019s k8s \u2693\ufe0e Resource boundaries in different deployment era: Traditional - No boundary Virtualized - Isolated resource and security Container - Bin + app Facilitate Canary deployments minikube \u2693\ufe0e minikube provisions and manages local Kubernetes clusters optimized for development workflows. MiniKube vs MicroK8s Why k8s? \u2693\ufe0e Service discovery and load balancing Storage orchestration Automated rollouts and rollbacks Automatic bin packing Self-healing Secret and configuration management k8s components \u2693\ufe0e Control Plane Components \u2693\ufe0e k8s cluster = a set of worker machines(nodes) pods : smallest deployable units kube-apiserver: Front end of control plane etcd: distributed data store for cluster data. kube-scheduler: allocate newly created pods to an available node. kube-controller-manager: Node, Replication, Endpoints, Service Account & Token controller. cloud-controller-manager: Node, Route, Service controller dependencies. Node components \u2693\ufe0e kubelet: manages docker to conform PodSpecs kube-proxy: k8s service implementation. Container runtime: Docker Addons \u2693\ufe0e DNS: For service and pods Dashboard; UI Container Resource Monitoring Cluster-level Logging K8s diagrams k3s vs minikube vs kind The Kubernetes API \u2693\ufe0e Open API API object needs to handle buffer, xml or json? Google developed protobuf before. protobuf like design Kubernetes Objects - \u201crecord of intent\u201d \u2693\ufe0e Kubernetes objects are persistent entities in the Kubernetes system. Object Spec: describe the desired state Status: current state of the object, managed by k8s control plane. Management techniques \u2693\ufe0e Imperative commands: kubectl Imperative object config: .yaml file Declarative object config: directory of files. Troubleshooting: k8s error image pullbackoff Object Names and IDs \u2693\ufe0e Names: /api/v1/pods/some-name IDs: UUID to track historical occurrences. Namespaces \u2693\ufe0e Virtual cluster kubectl get namespace Namespaces and DNS: When you create a Service , it creates a corresponding DNS entry . Labels and selectors \u2693\ufe0e Labels = Identifying key/values selectors: filtering via label. equality-based : = , == , != set-based : in , notin and exists Annotations \u2693\ufe0e arbitrary non-identifying metadata to objects. Field Selectors \u2693\ufe0e kubectl get pods --field-selector status.phase = Running Cluster architecture \u2693\ufe0e Nodes \u2693\ufe0e Components: kubelet , a container runtime , and the kube-proxy Adding nodes: kubelet can self-register user manually add","title":"K8s"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#kubernetes","text":"","title":"Kubernetes"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#whats-k8s","text":"Resource boundaries in different deployment era: Traditional - No boundary Virtualized - Isolated resource and security Container - Bin + app Facilitate Canary deployments","title":"What's k8s"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#minikube","text":"minikube provisions and manages local Kubernetes clusters optimized for development workflows. MiniKube vs MicroK8s","title":"minikube"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#why-k8s","text":"Service discovery and load balancing Storage orchestration Automated rollouts and rollbacks Automatic bin packing Self-healing Secret and configuration management","title":"Why k8s?"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#k8s-components","text":"","title":"k8s components"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#control-plane-components","text":"k8s cluster = a set of worker machines(nodes) pods : smallest deployable units kube-apiserver: Front end of control plane etcd: distributed data store for cluster data. kube-scheduler: allocate newly created pods to an available node. kube-controller-manager: Node, Replication, Endpoints, Service Account & Token controller. cloud-controller-manager: Node, Route, Service controller dependencies.","title":"Control Plane Components"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#node-components","text":"kubelet: manages docker to conform PodSpecs kube-proxy: k8s service implementation. Container runtime: Docker","title":"Node components"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#addons","text":"DNS: For service and pods Dashboard; UI Container Resource Monitoring Cluster-level Logging K8s diagrams k3s vs minikube vs kind","title":"Addons"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#the-kubernetes-api","text":"Open API API object needs to handle buffer, xml or json? Google developed protobuf before. protobuf like design","title":"The Kubernetes API"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#kubernetes-objects---record-of-intent","text":"Kubernetes objects are persistent entities in the Kubernetes system. Object Spec: describe the desired state Status: current state of the object, managed by k8s control plane.","title":"Kubernetes Objects - \"record of intent\""},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#management-techniques","text":"Imperative commands: kubectl Imperative object config: .yaml file Declarative object config: directory of files. Troubleshooting: k8s error image pullbackoff","title":"Management techniques"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#object-names-and-ids","text":"Names: /api/v1/pods/some-name IDs: UUID to track historical occurrences.","title":"Object Names and IDs"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#namespaces","text":"Virtual cluster kubectl get namespace Namespaces and DNS: When you create a Service , it creates a corresponding DNS entry .","title":"Namespaces"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#labels-and-selectors","text":"Labels = Identifying key/values selectors: filtering via label. equality-based : = , == , != set-based : in , notin and exists","title":"Labels and selectors"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#annotations","text":"arbitrary non-identifying metadata to objects.","title":"Annotations"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#field-selectors","text":"kubectl get pods --field-selector status.phase = Running","title":"Field Selectors"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#cluster-architecture","text":"","title":"Cluster architecture"},{"location":"blog/DevSecOps/tools/k8s/k8s_concepts/#nodes","text":"Components: kubelet , a container runtime , and the kube-proxy Adding nodes: kubelet can self-register user manually add","title":"Nodes"},{"location":"blog/DevSecOps/tools/k8s/k8s_container/","text":"Container \u2693\ufe0e Images|Kubernetes \u2693\ufe0e","title":"Container"},{"location":"blog/DevSecOps/tools/k8s/k8s_container/#container","text":"","title":"Container"},{"location":"blog/DevSecOps/tools/k8s/k8s_container/#imageskubernetes","text":"","title":"Images|Kubernetes"},{"location":"blog/DevSecOps/tools/k8s/kubernates_cmds/","text":"Kubernates cmds \u2693\ufe0e kubectl edit configmap kubectl get configmap kubectl get pods -w kubectl logs carmd-el-broussel cdn cgit elasticsearch gerrit git jenkins-artifacts kibana kubectl logstash mongodb rabbitmq redis journalctl -u gobi-drivers -f date k8s CMD cheatsheet","title":"Kubernates cmds"},{"location":"blog/DevSecOps/tools/k8s/kubernates_cmds/#kubernates-cmds","text":"kubectl edit configmap kubectl get configmap kubectl get pods -w kubectl logs carmd-el-broussel cdn cgit elasticsearch gerrit git jenkins-artifacts kibana kubectl logstash mongodb rabbitmq redis journalctl -u gobi-drivers -f date k8s CMD cheatsheet","title":"Kubernates cmds"},{"location":"blog/career_plan/entrepreneur/","text":"Case study \u2693\ufe0e Unicorns Last three years IPO tech companies. Devops cloud tools - 5 billions \u2693\ufe0e hashicorp provides deployment tools. The Tao of HashiCorp Revenue: ViaWeb \u2693\ufe0e 3 developers Red Hat Dubsmash: Scaling To 200 Million Users With 3 Engineers","title":"Career plan"},{"location":"blog/career_plan/entrepreneur/#case-study","text":"Unicorns Last three years IPO tech companies.","title":"Case study"},{"location":"blog/career_plan/entrepreneur/#devops-cloud-tools---5-billions","text":"hashicorp provides deployment tools. The Tao of HashiCorp Revenue:","title":"Devops cloud tools - 5 billions"},{"location":"blog/career_plan/entrepreneur/#viaweb","text":"3 developers Red Hat Dubsmash: Scaling To 200 Million Users With 3 Engineers","title":"ViaWeb"},{"location":"blog/career_plan/oms_cs/","text":"OMS CS \u2693\ufe0e Is GaTech OMSCS right for you? (or Is any Online CS Masters right for you?) Georgia Tech Online Master of Science in Computer Science","title":"OMS CS"},{"location":"blog/career_plan/oms_cs/#oms-cs","text":"Is GaTech OMSCS right for you? (or Is any Online CS Masters right for you?) Georgia Tech Online Master of Science in Computer Science","title":"OMS CS"},{"location":"blog/career_plan/tech_events/","text":"KubeCon + CloudNativeCon North America 2020 Linux Foundation Events Google Developers Cloud Native Computing Foundation Stack Overflow Developer Survey 2019 Salary by Developer Type","title":"Tech events"},{"location":"blog/career_plan/tech_lists/","text":"Technical competency \u2693\ufe0e Skill sets with SMART Goals \u2693\ufe0e Python Flask Pytest Jenkins CI/CD Docker Kubernetes OOP Java groovy gradle mySQL DB manual Git Nonclustered Index Structures | Microsoft Docs Algorithms \u2693\ufe0e Data Structures \u2693\ufe0e System Design \u2693\ufe0e High Level Courses \u2693\ufe0e Azure cloud \u2693\ufe0e References: 11 Essential Skills Software Developers should Learn in 2020 - DEV","title":"Technical competency"},{"location":"blog/career_plan/tech_lists/#technical-competency","text":"","title":"Technical competency"},{"location":"blog/career_plan/tech_lists/#skill-sets-with-smart-goals","text":"Python Flask Pytest Jenkins CI/CD Docker Kubernetes OOP Java groovy gradle mySQL DB manual Git Nonclustered Index Structures | Microsoft Docs","title":"Skill sets with SMART Goals"},{"location":"blog/career_plan/tech_lists/#algorithms","text":"","title":"Algorithms"},{"location":"blog/career_plan/tech_lists/#data-structures","text":"","title":"Data Structures"},{"location":"blog/career_plan/tech_lists/#system-design","text":"","title":"System Design"},{"location":"blog/career_plan/tech_lists/#high-level-courses","text":"","title":"High Level Courses"},{"location":"blog/career_plan/tech_lists/#azure-cloud","text":"References: 11 Essential Skills Software Developers should Learn in 2020 - DEV","title":"Azure cloud"},{"location":"blog/career_plan/interviews/BQ/STAR/","text":"STAR/CAR Method \u2693\ufe0e The STAR format stands for Situation , Task , Action ,*Result *: S ituation: An event, project, or challenge faced T ask: Your responsibilities and assignments for the situation A ction: Steps or procedure taken to relieve or rectify situation R esult: Results of actions taken. The STAR interview method is also called the CAR method, which stands for Context/Challenge, Action . How to Use STAR Method Technique for Interview Questions How to Use the STAR Interview Response Technique How to Prepare for a Behavioral Interview 30 Behavioral Interview Questions You Should Be Ready to Answer \u2693\ufe0e How To Master the STAR Method For Interview Questions Consistent cache Blue filter Filter Class - AWS Glue What\u2019s your last question \u2693\ufe0e What\u2019s your expectation in your first 3-month / goal in your team? What\u2019s your most challenging task you\u2019ve met? What\u2019s your highest priority or current challenging in your team? What\u2019s your technical stack and main programming language?","title":"STAR/CAR Method"},{"location":"blog/career_plan/interviews/BQ/STAR/#starcar-method","text":"The STAR format stands for Situation , Task , Action ,*Result *: S ituation: An event, project, or challenge faced T ask: Your responsibilities and assignments for the situation A ction: Steps or procedure taken to relieve or rectify situation R esult: Results of actions taken. The STAR interview method is also called the CAR method, which stands for Context/Challenge, Action . How to Use STAR Method Technique for Interview Questions How to Use the STAR Interview Response Technique How to Prepare for a Behavioral Interview","title":"STAR/CAR Method"},{"location":"blog/career_plan/interviews/BQ/STAR/#30-behavioral-interview-questions-you-should-be-ready-to-answer","text":"How To Master the STAR Method For Interview Questions Consistent cache Blue filter Filter Class - AWS Glue","title":"30 Behavioral Interview Questions You Should Be Ready to Answer"},{"location":"blog/career_plan/interviews/BQ/STAR/#whats-your-last-question","text":"What\u2019s your expectation in your first 3-month / goal in your team? What\u2019s your most challenging task you\u2019ve met? What\u2019s your highest priority or current challenging in your team? What\u2019s your technical stack and main programming language?","title":"What's your last question"},{"location":"blog/cloud/","text":"Cloud Infra study \u2693\ufe0e GCP \u2693\ufe0e AWS \u2693\ufe0e Azure \u2693\ufe0e","title":"Cloud"},{"location":"blog/cloud/#cloud-infra-study","text":"","title":"Cloud Infra study"},{"location":"blog/cloud/#gcp","text":"","title":"GCP"},{"location":"blog/cloud/#aws","text":"","title":"AWS"},{"location":"blog/cloud/#azure","text":"","title":"Azure"},{"location":"blog/cloud/google/","text":"GCP \u2693\ufe0e How to use k8s with jenkins? Jenkins-on-k8s","title":"Google"},{"location":"blog/cloud/google/#gcp","text":"How to use k8s with jenkins? Jenkins-on-k8s","title":"GCP"},{"location":"blog/cmd/","text":"A journey of a thousand miles begins with a single step , A system of a billions logics starts with a single command.","title":"Cmd"},{"location":"blog/cmd/linux/bash/","text":"() vs {} \u2693\ufe0e When to use () vs. {} in bash? Regular expressions \u2693\ufe0e Regular expressions Python to run bash \u2693\ufe0e subprocess.run(\"exit 1\", shell=True, check=True) subprocess \u2014 Subprocess management Difference between single and double quotes in Bash Shell Parameter Expansion \u2693\ufe0e What does a minus sign inside of dollar brackets of a shell script mean?","title":"Linux"},{"location":"blog/cmd/linux/bash/#-vs-","text":"When to use () vs. {} in bash?","title":"() vs {}"},{"location":"blog/cmd/linux/bash/#regular-expressions","text":"Regular expressions","title":"Regular expressions"},{"location":"blog/cmd/linux/bash/#python-to-run-bash","text":"subprocess.run(\"exit 1\", shell=True, check=True) subprocess \u2014 Subprocess management Difference between single and double quotes in Bash","title":"Python to run bash"},{"location":"blog/cmd/linux/bash/#shell-parameter-expansion","text":"What does a minus sign inside of dollar brackets of a shell script mean?","title":"Shell Parameter Expansion"},{"location":"blog/cmd/linux/code_analysis/","text":"cloc \u2693\ufe0e Sample output cloc . 74 text files. 74 unique files. 30 files ignored. github.com/AlDanial/cloc v 1.74 T=0.69 s (95.5 files/s, 12499.8 lines/s) ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Python 53 2114 2168 4242 Bourne Shell 12 16 0 73 Markdown 1 8 0 14 ------------------------------------------------------------------------------- SUM: 66 2138 2168 4329 -------------------------------------------------------------------------------","title":"Analyze the code"},{"location":"blog/cmd/linux/code_analysis/#cloc","text":"Sample output cloc . 74 text files. 74 unique files. 30 files ignored. github.com/AlDanial/cloc v 1.74 T=0.69 s (95.5 files/s, 12499.8 lines/s) ------------------------------------------------------------------------------- Language files blank comment code ------------------------------------------------------------------------------- Python 53 2114 2168 4242 Bourne Shell 12 16 0 73 Markdown 1 8 0 14 ------------------------------------------------------------------------------- SUM: 66 2138 2168 4329 -------------------------------------------------------------------------------","title":"cloc"},{"location":"blog/coding/","text":"Coding - Programming \u2693\ufe0e Philosophy \u2693\ufe0e The best learning is doing.","title":"Coding"},{"location":"blog/coding/#coding---programming","text":"","title":"Coding - Programming"},{"location":"blog/coding/#philosophy","text":"The best learning is doing.","title":"Philosophy"},{"location":"blog/coding/bash/","text":"Bash \u2693\ufe0e I/O Redirection","title":"Bash"},{"location":"blog/coding/bash/#bash","text":"I/O Redirection","title":"Bash"},{"location":"blog/coding/coding/","text":"Debugging \u2693\ufe0e Debugging book by David Agans \u201c9 indispensable rules for finding even the most elusive software and hardware problems.\u201d 1. Understand the system 2. Make it fail 3. Quit thinking and look 4. Divide and conquer 5. Change one thing at a time 6. Keep an audit trail 7. Check the plug 8. Get a fresh view 9. If you didn\u2019t fix it, it ain\u2019t fixed","title":"Coding"},{"location":"blog/coding/coding/#debugging","text":"Debugging book by David Agans \u201c9 indispensable rules for finding even the most elusive software and hardware problems.\u201d 1. Understand the system 2. Make it fail 3. Quit thinking and look 4. Divide and conquer 5. Change one thing at a time 6. Keep an audit trail 7. Check the plug 8. Get a fresh view 9. If you didn\u2019t fix it, it ain\u2019t fixed","title":"Debugging"},{"location":"blog/coding/open_source/","text":"Open Source Projects \u2693\ufe0e Java Family \u2693\ufe0e Java Jenkins - The most popular CI server Groovy Gradle - fast build tool Kotlin Kotlin - Android Dev Python \u2693\ufe0e pytest - Test tool Python Code Quality Authority - pylint, flake8, etc. mkdocs Javascript family \u2693\ufe0e D3 - Data Visualization Node.js Vue.js next.js - build web applications with React from scratch Gatsby - build blazing fast websites and apps Typescript vscode Golang \u2693\ufe0e","title":"Open Source Projects"},{"location":"blog/coding/open_source/#open-source-projects","text":"","title":"Open Source Projects"},{"location":"blog/coding/open_source/#java-family","text":"Java Jenkins - The most popular CI server Groovy Gradle - fast build tool Kotlin Kotlin - Android Dev","title":"Java Family"},{"location":"blog/coding/open_source/#python","text":"pytest - Test tool Python Code Quality Authority - pylint, flake8, etc. mkdocs","title":"Python"},{"location":"blog/coding/open_source/#javascript-family","text":"D3 - Data Visualization Node.js Vue.js next.js - build web applications with React from scratch Gatsby - build blazing fast websites and apps Typescript vscode","title":"Javascript family"},{"location":"blog/coding/open_source/#golang","text":"","title":"Golang"},{"location":"blog/coding/php_acceleration/","text":"PHP Acceleration \u2693\ufe0e code optimization Opcode caching PHP Accelarator \u2693\ufe0e PHP cache(APC) eAccelerator XCache Zend Platform","title":"PHP Acceleration"},{"location":"blog/coding/php_acceleration/#php-acceleration","text":"code optimization Opcode caching","title":"PHP Acceleration"},{"location":"blog/coding/php_acceleration/#php-accelarator","text":"PHP cache(APC) eAccelerator XCache Zend Platform","title":"PHP Accelarator"},{"location":"blog/coding/golang/","tags":["Golang","GO","coding"],"text":"Introduction \u2693\ufe0e The Go Programming Language Specification Go\u2019s declaration Syntax Standard lib: \u2693\ufe0e documentation Go Docs \u2693\ufe0e godoc.org Effective Go guide Composition over inheritance short but good segment https://gobyexample.com/interfaces Slice \u2693\ufe0e Go slices, usage and internals Effective Go - slices Append function documentation Slice tricks Effective Go - slices Effective Go - two-dimensional slices Go by example - slices Map \u2693\ufe0e Go team blog post on maps Effective Go - maps Concurrent Slogon \u2693\ufe0e Do not communicate by sharing memory; instead, share memory by communicating. Although Go\u2019s approach to concurrency originates in Hoare\u2019s Communicating Sequential Processes (CSP) , it can also be seen as a type-safe generalization of Unix pipes. Rob Pike\u2019s concurrency slides (IO 2012) Video of Rob Pike at IO 2012 Video of Concurrency is not parallelism (Rob Pike) Concurrency \u2693\ufe0e Channels \u2693\ufe0e Buffered Channel Unbuffered Channel Goroutines \u2693\ufe0e Goroutines run in the same address space, so access to shared memory must be synchronized\u200b\u200b. The sync package provides useful primitives, although you won\u2019t need them much in Go as there are other primitives. How are Go channels implemented? Reference: \u2693\ufe0e An Introduction to Programming in Go Go by Example A Tour of Go The Go Programming Language Specification Go Wiki","title":"Golang"},{"location":"blog/coding/golang/#introduction","text":"The Go Programming Language Specification Go\u2019s declaration Syntax","title":"Introduction"},{"location":"blog/coding/golang/#standard-lib","text":"documentation","title":"Standard lib:"},{"location":"blog/coding/golang/#go-docs","text":"godoc.org Effective Go guide Composition over inheritance short but good segment https://gobyexample.com/interfaces","title":"Go Docs"},{"location":"blog/coding/golang/#slice","text":"Go slices, usage and internals Effective Go - slices Append function documentation Slice tricks Effective Go - slices Effective Go - two-dimensional slices Go by example - slices","title":"Slice"},{"location":"blog/coding/golang/#map","text":"Go team blog post on maps Effective Go - maps","title":"Map"},{"location":"blog/coding/golang/#concurrent-slogon","text":"Do not communicate by sharing memory; instead, share memory by communicating. Although Go\u2019s approach to concurrency originates in Hoare\u2019s Communicating Sequential Processes (CSP) , it can also be seen as a type-safe generalization of Unix pipes. Rob Pike\u2019s concurrency slides (IO 2012) Video of Rob Pike at IO 2012 Video of Concurrency is not parallelism (Rob Pike)","title":"Concurrent Slogon"},{"location":"blog/coding/golang/#concurrency","text":"","title":"Concurrency"},{"location":"blog/coding/golang/#channels","text":"Buffered Channel Unbuffered Channel","title":"Channels"},{"location":"blog/coding/golang/#goroutines","text":"Goroutines run in the same address space, so access to shared memory must be synchronized\u200b\u200b. The sync package provides useful primitives, although you won\u2019t need them much in Go as there are other primitives. How are Go channels implemented?","title":"Goroutines"},{"location":"blog/coding/golang/#reference","text":"An Introduction to Programming in Go Go by Example A Tour of Go The Go Programming Language Specification Go Wiki","title":"Reference:"},{"location":"blog/coding/golang/grammer/","text":"Golang\u2019s grammar Go\u2019s Declaration Syntax - Type after var name Go Programming session video from Google I/O","title":"Grammer"},{"location":"blog/coding/golang/ultimate-go-language/","text":"O\u2019reilly Ultimate-Go-Programming Mechanical Sympathy Mental model","title":"Ultimate go language"},{"location":"blog/coding/python/SUMMARY/","text":"Table of contents \u2693\ufe0e Python3 Less knowledge Build-in \u2693\ufe0e Built-in Functions Built-in Constants Built-in Types Built-in Exceptioins Standard library modules \u2693\ufe0e Text Processing Services","title":"Python"},{"location":"blog/coding/python/SUMMARY/#table-of-contents","text":"Python3 Less knowledge","title":"Table of contents"},{"location":"blog/coding/python/SUMMARY/#build-in","text":"Built-in Functions Built-in Constants Built-in Types Built-in Exceptioins","title":"Build-in"},{"location":"blog/coding/python/SUMMARY/#standard-library-modules","text":"Text Processing Services","title":"Standard library modules"},{"location":"blog/coding/python/intro/","text":"Python3 Less knowledge \u2693\ufe0e The minimum python 3 knowledge and study guide","title":"Python3 Less knowledge"},{"location":"blog/coding/python/intro/#python3-less-knowledge","text":"The minimum python 3 knowledge and study guide","title":"Python3 Less knowledge"},{"location":"blog/coding/python/build-in/build-in-types/","text":"Built-in Types \u2693\ufe0e What are the categories of built-in types? numeric: int, float, complex abs() int() float() complext() divmod() pow() math.floor(x) math.ceil(x) round(x[, n]) iterator: zip \\(_\\*iterables_\\) iterator.__iter__() iterator.__next__() StopIteration generator : A function which returns a generator iterator yield sequence: list list comprehension, A.sort() and sorted() tuple range text sequence: class str and string methods str.count(sub[, start[, end]]) str.encode(encoding=\"utf-8\", errors=\"strict\") str.find(sub[, start[, end]]) str.format(*args, **kwargs) str.format_map(mapping) str.isalnum() if any is true c.isalpha(), c.isdecimal(), c.isdigit(), or c.isnumeric() str.isspace() str.istitle() str.lstrip() str.rstrip() str.strip([chars]) str.swapcase() str.split(sep=None, maxsplit=-1) str.rsplit(sep=None, maxsplit=-1) str.removeprefix(prefix, /) str.removesuffix(suffix, /) str.startswith(prefix[, start[, end]]) str.partition(sep) str.rpartition(sep) str.replace(old, new[, count]) str.lfind(sub[, start[, end]]) str.rfind(sub[, start[, end]]) str.splitlines([keepends]) str.title() str.translate(table) str.upper() str.lower() binary sequence: bytes , bytearray , memoryview set: set , frozenset mapping: dict and Dictionary view objects context manager: with generator s and the contextlib.contextmanager contextmanager.__enter__() contextmanager.__exit__(exc_type, exc_val, exc_tb) Other Built-in Types Modules Classes and Class Instances Functions Methods Code Objects Type Objects The Null Object The Ellipsis Object The NotImplemented Object Boolean Values Internal Objects Special Attributes","title":"Build in"},{"location":"blog/coding/python/build-in/build-in-types/#built-in-types","text":"What are the categories of built-in types? numeric: int, float, complex abs() int() float() complext() divmod() pow() math.floor(x) math.ceil(x) round(x[, n]) iterator: zip \\(_\\*iterables_\\) iterator.__iter__() iterator.__next__() StopIteration generator : A function which returns a generator iterator yield sequence: list list comprehension, A.sort() and sorted() tuple range text sequence: class str and string methods str.count(sub[, start[, end]]) str.encode(encoding=\"utf-8\", errors=\"strict\") str.find(sub[, start[, end]]) str.format(*args, **kwargs) str.format_map(mapping) str.isalnum() if any is true c.isalpha(), c.isdecimal(), c.isdigit(), or c.isnumeric() str.isspace() str.istitle() str.lstrip() str.rstrip() str.strip([chars]) str.swapcase() str.split(sep=None, maxsplit=-1) str.rsplit(sep=None, maxsplit=-1) str.removeprefix(prefix, /) str.removesuffix(suffix, /) str.startswith(prefix[, start[, end]]) str.partition(sep) str.rpartition(sep) str.replace(old, new[, count]) str.lfind(sub[, start[, end]]) str.rfind(sub[, start[, end]]) str.splitlines([keepends]) str.title() str.translate(table) str.upper() str.lower() binary sequence: bytes , bytearray , memoryview set: set , frozenset mapping: dict and Dictionary view objects context manager: with generator s and the contextlib.contextmanager contextmanager.__enter__() contextmanager.__exit__(exc_type, exc_val, exc_tb) Other Built-in Types Modules Classes and Class Instances Functions Methods Code Objects Type Objects The Null Object The Ellipsis Object The NotImplemented Object Boolean Values Internal Objects Special Attributes","title":"Built-in Types"},{"location":"blog/coding/python/build-in/built-in-constants/","text":"Built-in Constants \u2693\ufe0e False True None NotImplemented Ellipsis debug **** site \u2693\ufe0e quit(code=None) exit(code=None) copyright credits license \u2693\ufe0e","title":"Built-in Constants"},{"location":"blog/coding/python/build-in/built-in-constants/#built-in-constants","text":"False True None NotImplemented Ellipsis debug ****","title":"Built-in Constants"},{"location":"blog/coding/python/build-in/built-in-constants/#site","text":"quit(code=None) exit(code=None) copyright credits license","title":"site"},{"location":"blog/coding/python/build-in/built-in-constants/#_1","text":"","title":""},{"location":"blog/coding/python/build-in/built-in-exceptioins/","text":"Built-in Exceptioins \u2693\ufe0e Exception hierarchy \u2693\ufe0e BaseException +-- SystemExit +-- KeyboardInterrupt +-- GeneratorExit +-- Exception +-- StopIteration +-- StopAsyncIteration +-- ArithmeticError | +-- FloatingPointError | +-- OverflowError | +-- ZeroDivisionError +-- AssertionError +-- AttributeError +-- BufferError +-- EOFError +-- ImportError | +-- ModuleNotFoundError +-- LookupError | +-- IndexError | +-- KeyError +-- MemoryError +-- NameError | +-- UnboundLocalError +-- OSError | +-- BlockingIOError | +-- ChildProcessError | +-- ConnectionError | | +-- BrokenPipeError | | +-- ConnectionAbortedError | | +-- ConnectionRefusedError | | +-- ConnectionResetError | +-- FileExistsError | +-- FileNotFoundError | +-- InterruptedError | +-- IsADirectoryError | +-- NotADirectoryError | +-- PermissionError | +-- ProcessLookupError | +-- TimeoutError +-- ReferenceError +-- RuntimeError | +-- NotImplementedError | +-- RecursionError +-- SyntaxError | +-- IndentationError | +-- TabError +-- SystemError +-- TypeError +-- ValueError | +-- UnicodeError | +-- UnicodeDecodeError | +-- UnicodeEncodeError | +-- UnicodeTranslateError +-- Warning +-- DeprecationWarning +-- PendingDeprecationWarning +-- RuntimeWarning +-- SyntaxWarning +-- UserWarning +-- FutureWarning +-- ImportWarning +-- UnicodeWarning +-- BytesWarning +-- ResourceWarning Warning Categories Class Description Warning This is the base class of all warning category classes. It is a subclass of Exception . UserWarning The default category for warn() . DeprecationWarning Base category for warnings about deprecated features when those warnings are intended for other Python developers \\(ignored by default, unless triggered by code in __main__ \\) . SyntaxWarning Base category for warnings about dubious syntactic features. RuntimeWarning Base category for warnings about dubious runtime features. FutureWarning Base category for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python. PendingDeprecationWarning Base category for warnings about features that will be deprecated in the future \\(ignored by default\\) . ImportWarning Base category for warnings triggered during the process of importing a module \\(ignored by default\\) . UnicodeWarning Base category for warnings related to Unicode. BytesWarning Base category for warnings related to bytes and bytearray . ResourceWarning Base category for warnings related to resource usage.","title":"Built-in Exceptioins"},{"location":"blog/coding/python/build-in/built-in-exceptioins/#built-in-exceptioins","text":"","title":"Built-in Exceptioins"},{"location":"blog/coding/python/build-in/built-in-exceptioins/#exception-hierarchy","text":"BaseException +-- SystemExit +-- KeyboardInterrupt +-- GeneratorExit +-- Exception +-- StopIteration +-- StopAsyncIteration +-- ArithmeticError | +-- FloatingPointError | +-- OverflowError | +-- ZeroDivisionError +-- AssertionError +-- AttributeError +-- BufferError +-- EOFError +-- ImportError | +-- ModuleNotFoundError +-- LookupError | +-- IndexError | +-- KeyError +-- MemoryError +-- NameError | +-- UnboundLocalError +-- OSError | +-- BlockingIOError | +-- ChildProcessError | +-- ConnectionError | | +-- BrokenPipeError | | +-- ConnectionAbortedError | | +-- ConnectionRefusedError | | +-- ConnectionResetError | +-- FileExistsError | +-- FileNotFoundError | +-- InterruptedError | +-- IsADirectoryError | +-- NotADirectoryError | +-- PermissionError | +-- ProcessLookupError | +-- TimeoutError +-- ReferenceError +-- RuntimeError | +-- NotImplementedError | +-- RecursionError +-- SyntaxError | +-- IndentationError | +-- TabError +-- SystemError +-- TypeError +-- ValueError | +-- UnicodeError | +-- UnicodeDecodeError | +-- UnicodeEncodeError | +-- UnicodeTranslateError +-- Warning +-- DeprecationWarning +-- PendingDeprecationWarning +-- RuntimeWarning +-- SyntaxWarning +-- UserWarning +-- FutureWarning +-- ImportWarning +-- UnicodeWarning +-- BytesWarning +-- ResourceWarning Warning Categories Class Description Warning This is the base class of all warning category classes. It is a subclass of Exception . UserWarning The default category for warn() . DeprecationWarning Base category for warnings about deprecated features when those warnings are intended for other Python developers \\(ignored by default, unless triggered by code in __main__ \\) . SyntaxWarning Base category for warnings about dubious syntactic features. RuntimeWarning Base category for warnings about dubious runtime features. FutureWarning Base category for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python. PendingDeprecationWarning Base category for warnings about features that will be deprecated in the future \\(ignored by default\\) . ImportWarning Base category for warnings triggered during the process of importing a module \\(ignored by default\\) . UnicodeWarning Base category for warnings related to Unicode. BytesWarning Base category for warnings related to bytes and bytearray . ResourceWarning Base category for warnings related to resource usage.","title":"Exception hierarchy"},{"location":"blog/coding/python/build-in/built-in-functions/","text":"Built-in Functions \u2693\ufe0e Python Built-in Functions Categories \u2693\ufe0e Math programming data Functional Object abs() breakpoint() bytearray() filter() isinstance() complex() callable() bytes() map() issubclass() divmod() classmethod() chr() zip() len() float() compile() dict() iter() object() round() delattr() enumerate() property() sum() dir() frozenset() Algorithm repr() max() exec() tuple() reversed() setattr() min() eval() list() sorted() staticmethod() oct() format() memoryview() str() bin() getattr() next() I/O type() hex() globals() open() input() super() pow() hasattr() range() print() vars() hash() set() logic help() slice() bool() id() ascii() any() locals() ord() all() __import__() int()","title":"Built-in Functions"},{"location":"blog/coding/python/build-in/built-in-functions/#built-in-functions","text":"","title":"Built-in Functions"},{"location":"blog/coding/python/build-in/built-in-functions/#python-built-in-functions-categories","text":"Math programming data Functional Object abs() breakpoint() bytearray() filter() isinstance() complex() callable() bytes() map() issubclass() divmod() classmethod() chr() zip() len() float() compile() dict() iter() object() round() delattr() enumerate() property() sum() dir() frozenset() Algorithm repr() max() exec() tuple() reversed() setattr() min() eval() list() sorted() staticmethod() oct() format() memoryview() str() bin() getattr() next() I/O type() hex() globals() open() input() super() pow() hasattr() range() print() vars() hash() set() logic help() slice() bool() id() ascii() any() locals() ord() all() __import__() int()","title":"Python Built-in Functions Categories"},{"location":"blog/coding/python/standard-library-modules/text-processing-services/","text":"Text Processing Services \u2693\ufe0e Text Processing Services string \u2014 Common string operations re \u2014 Regular expression operations difflib \u2014 Helpers for computing deltas textwrap \u2014 Text wrapping and filling unicodedata \u2014 Unicode Database stringprep \u2014 Internet String Preparation readline \u2014 GNU readline interface rlcompleter \u2014 Completion function for GNU readline","title":"Text Processing Services"},{"location":"blog/coding/python/standard-library-modules/text-processing-services/#text-processing-services","text":"Text Processing Services string \u2014 Common string operations re \u2014 Regular expression operations difflib \u2014 Helpers for computing deltas textwrap \u2014 Text wrapping and filling unicodedata \u2014 Unicode Database stringprep \u2014 Internet String Preparation readline \u2014 GNU readline interface rlcompleter \u2014 Completion function for GNU readline","title":"Text Processing Services"},{"location":"blog/hardware/","tags":["Hardware"],"text":"Case study: WFH office workstaion less than $850 before tax Most expensive components \u2693\ufe0e CPU GPU Motherboard Extension card: e.g. WIFI, USB, etc. RAM Hard Drive We should know our requirements before picking up the Motherboard.","title":"Hardware"},{"location":"blog/hardware/#most-expensive-components","text":"CPU GPU Motherboard Extension card: e.g. WIFI, USB, etc. RAM Hard Drive We should know our requirements before picking up the Motherboard.","title":"Most expensive components"},{"location":"blog/hardware/cpu/","tags":["Hardware"],"text":"Brand \u2693\ufe0e Intel AMD Key \u2693\ufe0e Integrated Graph How many displays for 4K@60HZ?","title":"CPU"},{"location":"blog/hardware/cpu/#brand","text":"Intel AMD","title":"Brand"},{"location":"blog/hardware/cpu/#key","text":"Integrated Graph How many displays for 4K@60HZ?","title":"Key"},{"location":"blog/hardware/motherboard/","tags":["Hardware"],"text":"Slots for other components. \u2693\ufe0e CPU slot \u2693\ufe0e PCIe \u2693\ufe0e PCIe Speed The PCIe 5.0 Specification is Now Available, Before PCIe 4.0 Has Even Shipped USB \u2693\ufe0e Specification Signaling Rate/Lane Number of Lanes Aggregate Bandwidth USB 3.2 Gen 1\u00d71 5 Gbps (SuperSpeed) 1 5 Gbps USB 3.2 Gen 2\u00d71 10 Gbps (SuperSpeed+) 1 10 Gbps USB 3.2 Gen 1\u00d72 5 Gbps (SuperSpeed) 2 10 Gbps USB 3.2 Gen 2\u00d72 10 Gbps (SuperSpeed+) 2 20 Gbps Specification Signaling Rate/Lane Number of Lanes Aggregate Bandwidth USB4 Gen 2\u00d72 10 Gbps 2 20 Gbps USB4 Gen 3\u00d72 20 Gbps 2 40 Gbps Thunderbolt & USB-C SSD \u2693\ufe0e The host interfaces per speed. Inteface Name GBit/s Price/GB SATA 3.0 6.0 0.024 SAS-3 12 PCIe 3.0 * 4 31.5 2.5 M.2 6.0 0.115 Fibre Channel 128 USB 10 Parallel ATA 1 Parallel SCSI 2 Display \u2693\ufe0e Display interface Max Resolution DVI - Single link 1920 x 1200 @ 60Hz DVI - Dual link 2560 x 1600 @ 60Hz HDMI 2.0 3840 \u00d7 2160 @ 60Hz Displayport 1.2 5120 \u00d7 2160 @ 60Hz More info: https://glenwing.github.io/adapters/?output=HDMI","title":"Motherboard"},{"location":"blog/hardware/motherboard/#slots-for-other-components","text":"","title":"Slots for other components."},{"location":"blog/hardware/motherboard/#cpu-slot","text":"","title":"CPU slot"},{"location":"blog/hardware/motherboard/#pcie","text":"PCIe Speed The PCIe 5.0 Specification is Now Available, Before PCIe 4.0 Has Even Shipped","title":"PCIe"},{"location":"blog/hardware/motherboard/#usb","text":"Specification Signaling Rate/Lane Number of Lanes Aggregate Bandwidth USB 3.2 Gen 1\u00d71 5 Gbps (SuperSpeed) 1 5 Gbps USB 3.2 Gen 2\u00d71 10 Gbps (SuperSpeed+) 1 10 Gbps USB 3.2 Gen 1\u00d72 5 Gbps (SuperSpeed) 2 10 Gbps USB 3.2 Gen 2\u00d72 10 Gbps (SuperSpeed+) 2 20 Gbps Specification Signaling Rate/Lane Number of Lanes Aggregate Bandwidth USB4 Gen 2\u00d72 10 Gbps 2 20 Gbps USB4 Gen 3\u00d72 20 Gbps 2 40 Gbps Thunderbolt & USB-C","title":"USB"},{"location":"blog/hardware/motherboard/#ssd","text":"The host interfaces per speed. Inteface Name GBit/s Price/GB SATA 3.0 6.0 0.024 SAS-3 12 PCIe 3.0 * 4 31.5 2.5 M.2 6.0 0.115 Fibre Channel 128 USB 10 Parallel ATA 1 Parallel SCSI 2","title":"SSD"},{"location":"blog/hardware/motherboard/#display","text":"Display interface Max Resolution DVI - Single link 1920 x 1200 @ 60Hz DVI - Dual link 2560 x 1600 @ 60Hz HDMI 2.0 3840 \u00d7 2160 @ 60Hz Displayport 1.2 5120 \u00d7 2160 @ 60Hz More info: https://glenwing.github.io/adapters/?output=HDMI","title":"Display"},{"location":"blog/system_design/","tags":["System Design"],"text":"System design Tushar Roy System Design Introduction For Interview. Youtube system design http://highscalability.com/ Language specific questions, concurrency/parallellism Framework \u2693\ufe0e Backend: django, spring, FrontEnd: react, vue redis, celery: asynchronous task queue Introduction to the DOM Resources \u2693\ufe0e system-design-primer Grokking the System Design Interview Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems","title":"System design"},{"location":"blog/system_design/#framework","text":"Backend: django, spring, FrontEnd: react, vue redis, celery: asynchronous task queue Introduction to the DOM","title":"Framework"},{"location":"blog/system_design/#resources","text":"system-design-primer Grokking the System Design Interview Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems","title":"Resources"},{"location":"blog/system_design/tech_matrix/","tags":["System Design"],"text":"Production Components \u2693\ufe0e Production System Component 1 2 3 DNS CoreDNS(2019) - Golang BIND - C CDN Akamai Cloudflare Fastly Load Balancer NGINX - C HAProxy - C Web Server (reverse proxy) NGINX - C Apache HTTP server - C Tomcat , Jetty - Java asynchronous task queue Celery (py) broker with RabbitMQ or Redis Message Broker RabbitMQ - Erlang kafka with Zookeeper ( No zookeeper for kafka ) - Java ZeroMQ - C++ In-Memory cache Redis - C Hazelcast IMDG - Java Change Data Capture(CDC) debezium (on top of Kafka) - Java Apache StreamSets SQL PostgreSQL - C NoSQL MongoDB - C++ Cassandra , HBase, Neo4j - Java CouchDB - Erlang Monitor Components \u2693\ufe0e Tech type Name Container orchestration marathon on mesos vs kubernates System Ubuntu Container docker Cloud deployment terraform Cluster coordination service zookeeper, (consul, etcd) collecting, storing, visualizing and alerting ELK (Elasticsearch / Logstash / Kibana) TICK (Telegraf/InfluxDB/Chronograf/Kapacitor) distributed real-time computation system storm Request tracing zipkin, jaeger or Opentracing observability Wavefront , DataDog, NewRelic API DropWizard for REST APIs, Graph QL OLTP Online transaction processing (OLTP) captures, stores, and processes data from transactions in real time. OLAP Online analytical processing (OLAP) uses complex queries to analyze aggregated historical data from OLTP systems.","title":"Technology Matrix"},{"location":"blog/system_design/tech_matrix/#production-components","text":"Production System Component 1 2 3 DNS CoreDNS(2019) - Golang BIND - C CDN Akamai Cloudflare Fastly Load Balancer NGINX - C HAProxy - C Web Server (reverse proxy) NGINX - C Apache HTTP server - C Tomcat , Jetty - Java asynchronous task queue Celery (py) broker with RabbitMQ or Redis Message Broker RabbitMQ - Erlang kafka with Zookeeper ( No zookeeper for kafka ) - Java ZeroMQ - C++ In-Memory cache Redis - C Hazelcast IMDG - Java Change Data Capture(CDC) debezium (on top of Kafka) - Java Apache StreamSets SQL PostgreSQL - C NoSQL MongoDB - C++ Cassandra , HBase, Neo4j - Java CouchDB - Erlang","title":"Production Components"},{"location":"blog/system_design/tech_matrix/#monitor-components","text":"Tech type Name Container orchestration marathon on mesos vs kubernates System Ubuntu Container docker Cloud deployment terraform Cluster coordination service zookeeper, (consul, etcd) collecting, storing, visualizing and alerting ELK (Elasticsearch / Logstash / Kibana) TICK (Telegraf/InfluxDB/Chronograf/Kapacitor) distributed real-time computation system storm Request tracing zipkin, jaeger or Opentracing observability Wavefront , DataDog, NewRelic API DropWizard for REST APIs, Graph QL OLTP Online transaction processing (OLTP) captures, stores, and processes data from transactions in real time. OLAP Online analytical processing (OLAP) uses complex queries to analyze aggregated historical data from OLTP systems.","title":"Monitor Components"},{"location":"blog/system_design/Design-Data-Intensive-Applications/","tags":["System Design"],"text":"Why data-intensive? \u2693\ufe0e Data-intensive application if data is its primary challenge. Compute-intensive if CPU cycles are the bottleneck. Only architecture of data systems, no deployment, operations, security, management. Outlines, parts and chapters \u2693\ufe0e Part 1 fundamental ideas, data stored on machine \u2693\ufe0e 1 reliability, scalability and maintainability, how we think about it and achieve it? 2 compare different data models and query languages , see their use cases 3 storage engine : how database arrange data on disk? 4 data encoding and schemas Part 2 Data distributed across multiple machines. \u2693\ufe0e 5 replication / Availability 6 partitioning/sharding 7 transactions 8 problems in distributed systems 9 consistency and consensus. Part 3 Derive datasets from other datasets \u2693\ufe0e Applications need to integrate several different databases, caches, indexes. 10 batch processing approach 11 stream processing 12 Put everything together, approaches for building reliable, scalable and maintainable application in the future.","title":"DDIP"},{"location":"blog/system_design/Design-Data-Intensive-Applications/#why-data-intensive","text":"Data-intensive application if data is its primary challenge. Compute-intensive if CPU cycles are the bottleneck. Only architecture of data systems, no deployment, operations, security, management.","title":"Why data-intensive?"},{"location":"blog/system_design/Design-Data-Intensive-Applications/#outlines-parts-and-chapters","text":"","title":"Outlines, parts and chapters"},{"location":"blog/system_design/Design-Data-Intensive-Applications/#part-1-fundamental-ideas-data-stored-on-machine","text":"1 reliability, scalability and maintainability, how we think about it and achieve it? 2 compare different data models and query languages , see their use cases 3 storage engine : how database arrange data on disk? 4 data encoding and schemas","title":"Part 1 fundamental ideas, data stored on machine"},{"location":"blog/system_design/Design-Data-Intensive-Applications/#part-2-data-distributed-across-multiple-machines","text":"5 replication / Availability 6 partitioning/sharding 7 transactions 8 problems in distributed systems 9 consistency and consensus.","title":"Part 2 Data distributed across multiple machines."},{"location":"blog/system_design/Design-Data-Intensive-Applications/#part-3-derive-datasets-from-other-datasets","text":"Applications need to integrate several different databases, caches, indexes. 10 batch processing approach 11 stream processing 12 Put everything together, approaches for building reliable, scalable and maintainable application in the future.","title":"Part 3 Derive datasets from other datasets"},{"location":"blog/system_design/Grokking-the-system-design-interview/1.intro/","text":"System Design Interviews: A step by step guide \u2693\ufe0e Step 1: Requirements clarifications Step 2: Capacity and Constraints estimation Step 3: System interface(API) definition Step 4: Defining data model Step 5: High-level design Step 6: Detailed design Step 7: Identifying and resolving bottlenecks Summary","title":"Grokking the system design interview"},{"location":"blog/system_design/Grokking-the-system-design-interview/1.intro/#system-design-interviews-a-step-by-step-guide","text":"Step 1: Requirements clarifications Step 2: Capacity and Constraints estimation Step 3: System interface(API) definition Step 4: Defining data model Step 5: High-level design Step 6: Detailed design Step 7: Identifying and resolving bottlenecks Summary","title":"System Design Interviews: A step by step guide"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/","text":"System Design Basics \u2693\ufe0e Key Characteristics of Distributed Systems \u2693\ufe0e Scalability \u2693\ufe0e Definition : The capability to grow and manage increased demand, such as increased data volume, number of transactions. Horizontal scaling: Cassandra and MongoDB Vertical scaling: e.g. MySQL Reliability \u2693\ufe0e Definition : The probability a system will fail in a given period. Availability \u2693\ufe0e Definition : The time a system remains operational to perform its required function in a specific period. Efficiency \u2693\ufe0e Definition: The response time(latency) means the delay to obtain the first item. The throughput(bandwidth) number of items delivered in a given time unit (e.g., a second) Manageability or Serviceability. \u2693\ufe0e How easy it is to operate and maintain. Load Balancing(LB) \u2693\ufe0e Between the user and the web server Between web servers and an internal platform layer, like application servers or cache servers Between internal platform layers and database. Redundant Load Balancers \u2693\ufe0e Load Balancer Caching \u2693\ufe0e recently requested data is likely to be requested again Application server cache Content Delivery Network(CDN) for static media. Cache Invalidation Write-through Write-around Write-back Cache eviction First In First Out (FIFO) Last In First Out (LIFO) Least Recently Used (LRU) Most Recently Used (MRU) Least Frequently Used (LFU) Random Replacement (RR) Data Partitioning \u2693\ufe0e Definition: a technique to break a big database (DB) into many smaller parts Partition Methods \u2693\ufe0e Horizontal Partitioning. (Data Sharding) Different rows in different tables. Range-based partitioning. It may lead unbalanced servers. Vertical Partitioning. Store tables related to a specific feature in their own server. Directory-Based Partitioning: create a lookup service that knows your current partitioning scheme and abstracts it away from the DB access code Partitioning Criteria \u2693\ufe0e Key or Hash-based Partitioning : apply hash function to the entity\u2019s attribute, get partition number. List Partitioning: each partition has a list of values. Round-robin partitioning Composite Partitioning Common Problems of Data Partitioning \u2693\ufe0e Joins and Denormalization Referential integrity Rebalancing Indexes (DB) \u2693\ufe0e Make it faster to search through the table, created one or more columns of a database table. A Library catalog \u2693\ufe0e Book name or book title sorted catalog It decreases write performance \u2693\ufe0e Adding indexes is to improve search queries performances. Proxies \u2693\ufe0e Definition : an intermediate piece of software or hardware sits between the client and the server. Proxy Forward proxies \u2693\ufe0e cache data filter requests log requests transform requests collapsed forwarding to combine the same data access requests into one request. Reverse proxy \u2693\ufe0e Definition: the node retrieves resources from one or more servers on behalf of a client. reverse-proxy caching load balancing anonymizing the servers routing requests to the appropriate servers Redundancy and Replication \u2693\ufe0e Redundancy is the duplication of critical components or functions to increase system\u2019s reliability, a form of a backup or fail-safe or performance improving. redundancy Replication means sharing information to ensure consistency between redundant resources, to improve reliability, fault tolerance or accessibility. Widely used in DBMS, usually primary-replica relationship. SQL vs NoSQL \u2693\ufe0e SQL \u2693\ufe0e Store data in rows and columns in predefined tables. No-SQL \u2693\ufe0e Key-Value Stores : store data in key-value pairs. Redis, Voldemort, and Dynamo Document DB : store data in documents. CouchDB and MongoDB Wide-Column Databases : Instead of \u2018tables\u2019, column families which are containers of rows. Each rows doesn\u2019t have to have the same number of columns. Columnar databases are for large datasets. Cassandra and HBase. Graph Databases store data whose relationship are in a graph, store the data in nodes, properties, and lines. e.g. Neo4J and InfiniteGraph. Differences \u2693\ufe0e SQL No-SQL Storage tables key-value, document, graph, or columnar Schema Fixed schema dynamic, add in the fly Querying structured query language UnQL (Unstructured Query Language) Scalability Vertically horizontally ACID Compliancy ACID compliant sacrifice ACID compliance for performance and scalability Consistent Hashing (New) \u2693\ufe0e Data partitioning Data replication A carefully designed scheme for partitioning and replicating the data enhances the performance, availability, and reliability of the system simple-hashing David Karger et al. first introduced Consistent Hashing in their 1997 paper Consistent Hashing maps data to physical nodes and ensures that only a small set of keys move when servers are added or removed. consistent-hashing Each node is assigned one of these ranges. The start of the range is called a token . Distributing-data-on-the-Consistent-Hashing-ring However, the above scheme may result in non-uniform data and load distribution . Virtual nodes \u2693\ufe0e vnode-mapping Mapping Vnodes to physical nodes on a Consistent Hashing ring v-node-consistent-hashing-ring Mapping Vnodes to physical nodes on a Consistent Hashing ring Replication-in-Consistent-Hashing Replication in Consistent Hashing Use cases \u2693\ufe0e Amazon\u2019s Dynamo Apache Cassandra Long-Polling vs WebSockets vs Server-Sent Events \u2693\ufe0e Ajax Polling \u2693\ufe0e The basic idea is that the client repeatedly polls (or requests) a server for data. HTTP Long-Polling \u2693\ufe0e With Long-Polling, the client requests information from the server exactly as in normal polling, but with the expectation that the server may not respond immediately WebSockets \u2693\ufe0e WebSocket provides Full duplex communication channels over a single TCP connection Server-Sent Events (SSEs) \u2693\ufe0e Under SSEs the client establishes a persistent and long-term connection with the server. cases: Real-time traffic from the server to the client. the server is generating data in a loop and will be sending multiple events","title":"System Design Basics"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#system-design-basics","text":"","title":"System Design Basics"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#key-characteristics-of-distributed-systems","text":"","title":"Key Characteristics of Distributed Systems"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#scalability","text":"Definition : The capability to grow and manage increased demand, such as increased data volume, number of transactions. Horizontal scaling: Cassandra and MongoDB Vertical scaling: e.g. MySQL","title":"Scalability"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#reliability","text":"Definition : The probability a system will fail in a given period.","title":"Reliability"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#availability","text":"Definition : The time a system remains operational to perform its required function in a specific period.","title":"Availability"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#efficiency","text":"Definition: The response time(latency) means the delay to obtain the first item. The throughput(bandwidth) number of items delivered in a given time unit (e.g., a second)","title":"Efficiency"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#manageability-or-serviceability","text":"How easy it is to operate and maintain.","title":"Manageability or Serviceability."},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#load-balancinglb","text":"Between the user and the web server Between web servers and an internal platform layer, like application servers or cache servers Between internal platform layers and database.","title":"Load Balancing(LB)"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#redundant-load-balancers","text":"Load Balancer","title":"Redundant Load Balancers"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#caching","text":"recently requested data is likely to be requested again Application server cache Content Delivery Network(CDN) for static media. Cache Invalidation Write-through Write-around Write-back Cache eviction First In First Out (FIFO) Last In First Out (LIFO) Least Recently Used (LRU) Most Recently Used (MRU) Least Frequently Used (LFU) Random Replacement (RR)","title":"Caching"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#data-partitioning","text":"Definition: a technique to break a big database (DB) into many smaller parts","title":"Data Partitioning"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#partition-methods","text":"Horizontal Partitioning. (Data Sharding) Different rows in different tables. Range-based partitioning. It may lead unbalanced servers. Vertical Partitioning. Store tables related to a specific feature in their own server. Directory-Based Partitioning: create a lookup service that knows your current partitioning scheme and abstracts it away from the DB access code","title":"Partition Methods"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#partitioning-criteria","text":"Key or Hash-based Partitioning : apply hash function to the entity\u2019s attribute, get partition number. List Partitioning: each partition has a list of values. Round-robin partitioning Composite Partitioning","title":"Partitioning Criteria"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#common-problems-of-data-partitioning","text":"Joins and Denormalization Referential integrity Rebalancing","title":"Common Problems of Data Partitioning"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#indexes-db","text":"Make it faster to search through the table, created one or more columns of a database table.","title":"Indexes (DB)"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#a-library-catalog","text":"Book name or book title sorted catalog","title":"A Library catalog"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#it-decreases-write-performance","text":"Adding indexes is to improve search queries performances.","title":"It decreases write performance"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#proxies","text":"Definition : an intermediate piece of software or hardware sits between the client and the server. Proxy","title":"Proxies"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#forward-proxies","text":"cache data filter requests log requests transform requests collapsed forwarding to combine the same data access requests into one request.","title":"Forward proxies"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#reverse-proxy","text":"Definition: the node retrieves resources from one or more servers on behalf of a client. reverse-proxy caching load balancing anonymizing the servers routing requests to the appropriate servers","title":"Reverse proxy"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#redundancy-and-replication","text":"Redundancy is the duplication of critical components or functions to increase system\u2019s reliability, a form of a backup or fail-safe or performance improving. redundancy Replication means sharing information to ensure consistency between redundant resources, to improve reliability, fault tolerance or accessibility. Widely used in DBMS, usually primary-replica relationship.","title":"Redundancy and Replication"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#sql-vs-nosql","text":"","title":"SQL vs NoSQL"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#sql","text":"Store data in rows and columns in predefined tables.","title":"SQL"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#no-sql","text":"Key-Value Stores : store data in key-value pairs. Redis, Voldemort, and Dynamo Document DB : store data in documents. CouchDB and MongoDB Wide-Column Databases : Instead of \u2018tables\u2019, column families which are containers of rows. Each rows doesn\u2019t have to have the same number of columns. Columnar databases are for large datasets. Cassandra and HBase. Graph Databases store data whose relationship are in a graph, store the data in nodes, properties, and lines. e.g. Neo4J and InfiniteGraph.","title":"No-SQL"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#differences","text":"SQL No-SQL Storage tables key-value, document, graph, or columnar Schema Fixed schema dynamic, add in the fly Querying structured query language UnQL (Unstructured Query Language) Scalability Vertically horizontally ACID Compliancy ACID compliant sacrifice ACID compliance for performance and scalability","title":"Differences"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#consistent-hashing-new","text":"Data partitioning Data replication A carefully designed scheme for partitioning and replicating the data enhances the performance, availability, and reliability of the system simple-hashing David Karger et al. first introduced Consistent Hashing in their 1997 paper Consistent Hashing maps data to physical nodes and ensures that only a small set of keys move when servers are added or removed. consistent-hashing Each node is assigned one of these ranges. The start of the range is called a token . Distributing-data-on-the-Consistent-Hashing-ring However, the above scheme may result in non-uniform data and load distribution .","title":"Consistent Hashing (New)"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#virtual-nodes","text":"vnode-mapping Mapping Vnodes to physical nodes on a Consistent Hashing ring v-node-consistent-hashing-ring Mapping Vnodes to physical nodes on a Consistent Hashing ring Replication-in-Consistent-Hashing Replication in Consistent Hashing","title":"Virtual nodes"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#use-cases","text":"Amazon\u2019s Dynamo Apache Cassandra","title":"Use cases"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#long-polling-vs-websockets-vs-server-sent-events","text":"","title":"Long-Polling vs WebSockets vs Server-Sent Events"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#ajax-polling","text":"The basic idea is that the client repeatedly polls (or requests) a server for data.","title":"Ajax Polling"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#http-long-polling","text":"With Long-Polling, the client requests information from the server exactly as in normal polling, but with the expectation that the server may not respond immediately","title":"HTTP Long-Polling"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#websockets","text":"WebSocket provides Full duplex communication channels over a single TCP connection","title":"WebSockets"},{"location":"blog/system_design/Grokking-the-system-design-interview/2.System_Design_Basics/#server-sent-events-sses","text":"Under SSEs the client establishes a persistent and long-term connection with the server. cases: Real-time traffic from the server to the client. the server is generating data in a loop and will be sending multiple events","title":"Server-Sent Events (SSEs)"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/","text":"System Design Patterns \u2693\ufe0e Bloom Filters \u2693\ufe0e The Bloom filter data structure tells whether an element may be in a set, or definitely is not . e.g. BigTable (and Cassandra), any read operation has to read from all SSTables that make up a Tablet. Consistent Hashing (HA) \u2693\ufe0e The act of distributing data across a set of nodes is called data partitioning . Consistent Hashing maps data to physical nodes and ensures that only a small set of keys move when servers are added or removed . Each notes is assigned several smaller hash ranges, where each range is considered a Vnode. Dynamo and Cassandra use Consistent Hashing to distribute their data across nodes. Data Consistency \u2693\ufe0e Quorum - Consistency \u2693\ufe0e In a distributed environment, a quorum is the minimum number of servers on which a distributed operation needs to be performed successfully before declaring the operation\u2019s overall success. Quorum is to ensure strong consistency Leader and Follower \u2693\ufe0e Alow the leader to be responsible for data replication and to coordinate work. e.g. Kafka , each partition\u2019s leader read, write into that partition and replicate it\u2019s data into backup partition. Controller(broker) admin operations, creating, deleting topics, add partitions, check health of other brokers. Write-ahead Log(WAL) (append-only log) \u2693\ufe0e or Transaction log or commit log Write the log into a log file before system processing. Each log should contain enough information to redo or undo. Each log has an identifier which helps process log segmentation/log purging. e.g. Cassandra receive a write request, write the data to a commit log first. write to the commit log before write data to a MemTable. Kafka implements a distributed commit log to persistently store all messages. Chubby : all DB transaction are stored in a transation log. Segmented Log \u2693\ufe0e Break down the log into equal-sized log smaller segments. (every 4 hours or every 1GB) e.g. Cassandra : commit log segments are truncated when it flushed data to SSTables. Kafka : use log segmentation to implement storage for it\u2019s partion. High-Water mark \u2693\ufe0e The high water mark index is the last log index replicated to a quorum of followers. e.g. Kafka brokers keep high-water mark where consumers can only see the messages until this mark. Communication \u2693\ufe0e Lease \u2693\ufe0e Clients get time-bound lease on resources to avoid crash, deadlock, lock indefinitely. e.g. Chubby clients maintain a time-bound session lease with the leader. Heartbeat \u2693\ufe0e Each server periodically sends a heartbeat message to a central monitoring server to indicate it\u2019s still alive. e.g. GFS leader communicates with ChunkServer in headbeat messages for instructions and states. HDFS : NameNode keeps track of DataNodes through a heartbeat mechanism. Gossip Protocol \u2693\ufe0e Each node keeps track of other states\u2019 state information and gossip its known servers\u2019 information to random node every second. e.g. Dynamo & Cassandra uses this gossip protocol across nodes. Detecting failures \u2693\ufe0e Dtecting node Failures, restart, network issues, etc. Phi Accrual Failure Detection \u2693\ufe0e Use adaptive failure detection algorithm to calculate a suspicion level about a server. It uses historical heartbeat information to make the threshold adaptive. e.g. Cassandra uses it. Split-brain \u2693\ufe0e The common scenario in which a distributed system has two or more active leaders is called split-brain Split-brain is solved through the use of Generation Clock , monotonically increasing number to indicate a server\u2019s generation. e.g. Kafka uses \u201cEpoch number\u201d . HDFS put epoch number as part of transaction ID for NameNode\u2019s generation. Cassandra uses generation number to distinguish a node\u2019s state before and after a restart. If the generation nubmer in the gossip message is higher, it knows that node was restarted. Fencing \u2693\ufe0e Put a \u201cfence\u201d around the previous leader. Resource fencing. revoke its access to the shared storage directory or disable its network port. Node fencing. Power off or reset the node. \u201cShoot the other node in the head\u201d(STONIT) Data integrity \u2693\ufe0e Checksum \u2693\ufe0e Use a cryptographic hash function like MD5, SHA-512 to calculate checksum. Commands: md5sum, sha512sum Vector Clocks \u2693\ufe0e Use vector clocks - (node, counter) pairs. First object\u2019s clock < all nodes in the second clock. Abandon the first object. Otherwise, need to have reconciliation. e.g. Amazon\u2019s Dynamo uses Vector Clocks. Distributed system Theorems \u2693\ufe0e CAP Theorem \u2693\ufe0e Consistency Availability Partition tolerance. CAP e.g. Dynamo : In CAP theorem terms, Dynamo falls within the category of AP systems and is designed for high availability at the expense of strong consistency. BigTable : CP system. i t has strictly consistent reads and writes . PACELEC Theorem \u2693\ufe0e ACID (Atomicity, Consistency, Isolation, Durability) databases chose consistency \u200b e.g. RDBMSs like MySQL, Oracle, and Microsoft SQL Server (refuse response if it cannot check with peers) BASE (Basically Available, Soft-state, Eventually consistent) databases chose availability \u200b e.g. NoSQL databases like MongoDB, Cassandra, and Redis (respond with local data without ensuring it is the latest with its peers). PACELC Dynamo and Cassandra are PA/EL systems BigTable and HBase are PC/EC systems MongoDB can be considered PA/EC Nodes Repair(Data consistency) \u2693\ufe0e Hinted Handoff - Write repair \u2693\ufe0e For down nodes, the system keep all missing write requests as notes(hints). Once they recover, the hints will be forwarded. e.g. Cassandra and Dynamo uses Hinted Handoff. Read Repair \u2693\ufe0e If we read data and find stale data, then call read repair operation to push newer version. e.g. Cassandra and Dynamo use \u2018Read Repair\u2019 Merkle Trees \u2693\ufe0e How to compare a range of data on two different replicas? e.g. Dynamo uses it. Merkel Trees Comparing Merkle trees is conceptually simple: Compare the root hashes of both trees. If they are equal, stop. Recurse on the left and right children.","title":"System Design Patterns"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#system-design-patterns","text":"","title":"System Design Patterns"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#bloom-filters","text":"The Bloom filter data structure tells whether an element may be in a set, or definitely is not . e.g. BigTable (and Cassandra), any read operation has to read from all SSTables that make up a Tablet.","title":"Bloom Filters"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#consistent-hashing-ha","text":"The act of distributing data across a set of nodes is called data partitioning . Consistent Hashing maps data to physical nodes and ensures that only a small set of keys move when servers are added or removed . Each notes is assigned several smaller hash ranges, where each range is considered a Vnode. Dynamo and Cassandra use Consistent Hashing to distribute their data across nodes.","title":"Consistent Hashing (HA)"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#data-consistency","text":"","title":"Data Consistency"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#quorum---consistency","text":"In a distributed environment, a quorum is the minimum number of servers on which a distributed operation needs to be performed successfully before declaring the operation\u2019s overall success. Quorum is to ensure strong consistency","title":"Quorum - Consistency"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#leader-and-follower","text":"Alow the leader to be responsible for data replication and to coordinate work. e.g. Kafka , each partition\u2019s leader read, write into that partition and replicate it\u2019s data into backup partition. Controller(broker) admin operations, creating, deleting topics, add partitions, check health of other brokers.","title":"Leader and Follower"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#write-ahead-logwal-append-only-log","text":"or Transaction log or commit log Write the log into a log file before system processing. Each log should contain enough information to redo or undo. Each log has an identifier which helps process log segmentation/log purging. e.g. Cassandra receive a write request, write the data to a commit log first. write to the commit log before write data to a MemTable. Kafka implements a distributed commit log to persistently store all messages. Chubby : all DB transaction are stored in a transation log.","title":"Write-ahead Log(WAL) (append-only log)"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#segmented-log","text":"Break down the log into equal-sized log smaller segments. (every 4 hours or every 1GB) e.g. Cassandra : commit log segments are truncated when it flushed data to SSTables. Kafka : use log segmentation to implement storage for it\u2019s partion.","title":"Segmented Log"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#high-water-mark","text":"The high water mark index is the last log index replicated to a quorum of followers. e.g. Kafka brokers keep high-water mark where consumers can only see the messages until this mark.","title":"High-Water mark"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#communication","text":"","title":"Communication"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#lease","text":"Clients get time-bound lease on resources to avoid crash, deadlock, lock indefinitely. e.g. Chubby clients maintain a time-bound session lease with the leader.","title":"Lease"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#heartbeat","text":"Each server periodically sends a heartbeat message to a central monitoring server to indicate it\u2019s still alive. e.g. GFS leader communicates with ChunkServer in headbeat messages for instructions and states. HDFS : NameNode keeps track of DataNodes through a heartbeat mechanism.","title":"Heartbeat"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#gossip-protocol","text":"Each node keeps track of other states\u2019 state information and gossip its known servers\u2019 information to random node every second. e.g. Dynamo & Cassandra uses this gossip protocol across nodes.","title":"Gossip Protocol"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#detecting-failures","text":"Dtecting node Failures, restart, network issues, etc.","title":"Detecting failures"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#phi-accrual-failure-detection","text":"Use adaptive failure detection algorithm to calculate a suspicion level about a server. It uses historical heartbeat information to make the threshold adaptive. e.g. Cassandra uses it.","title":"Phi Accrual Failure Detection"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#split-brain","text":"The common scenario in which a distributed system has two or more active leaders is called split-brain Split-brain is solved through the use of Generation Clock , monotonically increasing number to indicate a server\u2019s generation. e.g. Kafka uses \u201cEpoch number\u201d . HDFS put epoch number as part of transaction ID for NameNode\u2019s generation. Cassandra uses generation number to distinguish a node\u2019s state before and after a restart. If the generation nubmer in the gossip message is higher, it knows that node was restarted.","title":"Split-brain"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#fencing","text":"Put a \u201cfence\u201d around the previous leader. Resource fencing. revoke its access to the shared storage directory or disable its network port. Node fencing. Power off or reset the node. \u201cShoot the other node in the head\u201d(STONIT)","title":"Fencing"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#data-integrity","text":"","title":"Data integrity"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#checksum","text":"Use a cryptographic hash function like MD5, SHA-512 to calculate checksum. Commands: md5sum, sha512sum","title":"Checksum"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#vector-clocks","text":"Use vector clocks - (node, counter) pairs. First object\u2019s clock < all nodes in the second clock. Abandon the first object. Otherwise, need to have reconciliation. e.g. Amazon\u2019s Dynamo uses Vector Clocks.","title":"Vector Clocks"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#distributed-system-theorems","text":"","title":"Distributed system Theorems"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#cap-theorem","text":"Consistency Availability Partition tolerance. CAP e.g. Dynamo : In CAP theorem terms, Dynamo falls within the category of AP systems and is designed for high availability at the expense of strong consistency. BigTable : CP system. i t has strictly consistent reads and writes .","title":"CAP Theorem"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#pacelec-theorem","text":"ACID (Atomicity, Consistency, Isolation, Durability) databases chose consistency \u200b e.g. RDBMSs like MySQL, Oracle, and Microsoft SQL Server (refuse response if it cannot check with peers) BASE (Basically Available, Soft-state, Eventually consistent) databases chose availability \u200b e.g. NoSQL databases like MongoDB, Cassandra, and Redis (respond with local data without ensuring it is the latest with its peers). PACELC Dynamo and Cassandra are PA/EL systems BigTable and HBase are PC/EC systems MongoDB can be considered PA/EC","title":"PACELEC Theorem"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#nodes-repairdata-consistency","text":"","title":"Nodes Repair(Data consistency)"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#hinted-handoff---write-repair","text":"For down nodes, the system keep all missing write requests as notes(hints). Once they recover, the hints will be forwarded. e.g. Cassandra and Dynamo uses Hinted Handoff.","title":"Hinted Handoff - Write repair"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#read-repair","text":"If we read data and find stale data, then call read repair operation to push newer version. e.g. Cassandra and Dynamo use \u2018Read Repair\u2019","title":"Read Repair"},{"location":"blog/system_design/Grokking-the-system-design-interview/3.System_Design_patterns/#merkle-trees","text":"How to compare a range of data on two different replicas? e.g. Dynamo uses it. Merkel Trees Comparing Merkle trees is conceptually simple: Compare the root hashes of both trees. If they are equal, stop. Recurse on the left and right children.","title":"Merkle Trees"},{"location":"blog/system_design/Grokking-the-system-design-interview/System_Design_patterns/","text":"Introduction: System Design Patterns \u2693\ufe0e Bloom Filters Consistent Hashing Quorum Leader and Follower Write-ahead Log Segmented Log High-Water mark Lease Heartbeat Gossip Protocol Phi Accrual Failure Detection Split-brain Fencing Checksum Vector Clocks CAP Theorem PACELEC Theorem Hinted Handoff Read Repair Merkle Trees","title":"Introduction: System Design Patterns"},{"location":"blog/system_design/Grokking-the-system-design-interview/System_Design_patterns/#introduction-system-design-patterns","text":"Bloom Filters Consistent Hashing Quorum Leader and Follower Write-ahead Log Segmented Log High-Water mark Lease Heartbeat Gossip Protocol Phi Accrual Failure Detection Split-brain Fencing Checksum Vector Clocks CAP Theorem PACELEC Theorem Hinted Handoff Read Repair Merkle Trees","title":"Introduction: System Design Patterns"},{"location":"blog/system_design/Grokking-the-system-design-interview/Components/Kafka/","text":"Kafka \u2693\ufe0e High-level Architecture \u2693\ufe0e Common termns \u2693\ufe0e Brokers they receive data from producers, reliably store them and provide them into consumers. Records A message or an event stored in Kafka. Kafka message Topics \u2693\ufe0e Topics are message categories. Each message should have a topic. Consumer can subscribe to the topics. Topics Producers \u2693\ufe0e Publish records to Kafka Consumers \u2693\ufe0e Subcriber of kafka topics. High Level Architecture \u2693\ufe0e kafka-architecture","title":"Kafka"},{"location":"blog/system_design/Grokking-the-system-design-interview/Components/Kafka/#kafka","text":"","title":"Kafka"},{"location":"blog/system_design/Grokking-the-system-design-interview/Components/Kafka/#high-level-architecture","text":"","title":"High-level Architecture"},{"location":"blog/system_design/Grokking-the-system-design-interview/Components/Kafka/#common-termns","text":"Brokers they receive data from producers, reliably store them and provide them into consumers. Records A message or an event stored in Kafka. Kafka message","title":"Common termns"},{"location":"blog/system_design/Grokking-the-system-design-interview/Components/Kafka/#topics","text":"Topics are message categories. Each message should have a topic. Consumer can subscribe to the topics. Topics","title":"Topics"},{"location":"blog/system_design/Grokking-the-system-design-interview/Components/Kafka/#producers","text":"Publish records to Kafka","title":"Producers"},{"location":"blog/system_design/Grokking-the-system-design-interview/Components/Kafka/#consumers","text":"Subcriber of kafka topics.","title":"Consumers"},{"location":"blog/system_design/Grokking-the-system-design-interview/Components/Kafka/#high-level-architecture_1","text":"kafka-architecture","title":"High Level Architecture"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/","text":"Designing a URL Shortening service like TinyURL Designing Pastebin Designing Instagram Designing Dropbox Designing Facebook Messenger Designing Twitter Designing Youtube or Netflix Designing Typeahead Suggestion Designing an API Rate Limiter Designing Twitter Search Designing a Web Crawler Designing Facebook\u2019s Newsfeed Designing Yelp or Nearby Friends Designing Uber backend Designing Ticketmaster","title":"Problem set"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/","text":"Problem \u2693\ufe0e URL shortening is used to create shorter aliases for long URLs. Requirements \u2693\ufe0e Functional \u2693\ufe0e Write service: given a URL, generate a short and unique alias for it. Read service: give a short URL, return the original url. Users customization: pick up a custom short link for the URL. URL translation has an expire time. Non-Functional \u2693\ufe0e High availability. Real time with minial latency. Shortened links should not be guessable. Extended requirements \u2693\ufe0e Telemetrics: how many times a rediction happened? REST APIs by other service. Capacity Estimation and constriants \u2693\ufe0e Read-heavy service : R:W = 100:1 Traffic \u2693\ufe0e 500M/Month new service 1 day = 24*3600s =86.4K 1 month = 30 * 24 * 3600 s = 2.592 million seconds 1 year = 22.896 Million seconds Write : 500M/Month = 200 URL/s Read : 20K URL/S Storate \u2693\ufe0e Store URL in 2 years: 500 Million * 12 * 2 years = 12 Billion Every URL takes 0.5 K Then we have 6 Billion K = 6 TB. Bandwidth \u2693\ufe0e Write: 200 * 0.5 K/s = 100 KB/s Read: 100KB/S * 100 = 10 MB/S Memory : 80-20 rules \u2693\ufe0e Cache 20% hot URLs for 24 hours. 20K/S * 86.4K seconds=1.7 B requests 1.7 Billion * 0.2 * 0.5 KB = 0.17 TB = 170 GB High-Level estimates \u2693\ufe0e Types of URLs Time estimates New URLs 200/s URL redirections 20K/s Incoming data 100KB/s Outgoing data 10 MB/s Storage for 5 years 6 TB Memory for cache 170 GB System APIs \u2693\ufe0e createURL ( api_dev_key , original_url , custom_alias = None , user_name = None , expire_date = None ) -> string deleteURL ( api_dev_key , url_key ) DB Design \u2693\ufe0e 6 TB Read-heavy No relationship between records. DB Schema \u2693\ufe0e URL DB: PK - Hash: string \u2693\ufe0e original_url: string create_time: datetime user_id: int User DB: PK - UserID: int \u2693\ufe0e name: string email: string create_time: datetime last_login_time: datatime DB Type \u2693\ufe0e No relationship between objects. No-SQL for availability and horizontal scalability. DynamoDB , Cassandra or Riak Basic System Design and Algorithm \u2693\ufe0e How to generate a short and unique key for a given URL? Encoidng actual URL \u2693\ufe0e MD5 or SHA256 Base64 with 6 letters long. 64^6 = 68.7 Billion MD5sum to generate hash. 128 bits. How to resolve hash colission? \u2693\ufe0e Randomly pick up digits out of 128 bits. Append use name id or increasing counter in md5 hashing func. Generating keys offline \u2693\ufe0e Key Generation Service(KGS) in key-DB. 6 chars * 68.7 Billion (unique keys) = 412 GB. Data Partitioning and Replication \u2693\ufe0e Range based partitioning \u2693\ufe0e Hash-Based Partitioning \u2693\ufe0e Consistent Hashing into number between 1-256 Cache \u2693\ufe0e Memcached How much cache memory should we have? 170GB Which cache eviction policy would best fit our needs? Least Recently Used (LRU) can be used. How can each cache replica be updated? Whenever there is a cache miss, servers need to access DB. DB Load Balancer \u2693\ufe0e Between Clients and Application servers Between Application Servers and database servers Between Application Servers and Cache servers Purging or DB cleanup \u2693\ufe0e Lazy cleanup Cleanup Service to clean periodically. Default expiration time TinyURL-component-Design Telemetry \u2693\ufe0e How many times a short URL has been used? What location is it used? How would we store these statistics? Country of the visitor, date and time of access, web page, browser, platform from where the page was accessed. Security and permission \u2693\ufe0e Can users created private URLs or allow a particular set? Use wide-column database like Cassandra. They key for the table will be the HASH, add one columns UserIDs.","title":"1.TinyURL"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#problem","text":"URL shortening is used to create shorter aliases for long URLs.","title":"Problem"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#requirements","text":"","title":"Requirements"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#functional","text":"Write service: given a URL, generate a short and unique alias for it. Read service: give a short URL, return the original url. Users customization: pick up a custom short link for the URL. URL translation has an expire time.","title":"Functional"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#non-functional","text":"High availability. Real time with minial latency. Shortened links should not be guessable.","title":"Non-Functional"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#extended-requirements","text":"Telemetrics: how many times a rediction happened? REST APIs by other service.","title":"Extended requirements"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#capacity-estimation-and-constriants","text":"Read-heavy service : R:W = 100:1","title":"Capacity Estimation and constriants"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#traffic","text":"500M/Month new service 1 day = 24*3600s =86.4K 1 month = 30 * 24 * 3600 s = 2.592 million seconds 1 year = 22.896 Million seconds Write : 500M/Month = 200 URL/s Read : 20K URL/S","title":"Traffic"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#storate","text":"Store URL in 2 years: 500 Million * 12 * 2 years = 12 Billion Every URL takes 0.5 K Then we have 6 Billion K = 6 TB.","title":"Storate"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#bandwidth","text":"Write: 200 * 0.5 K/s = 100 KB/s Read: 100KB/S * 100 = 10 MB/S","title":"Bandwidth"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#memory--80-20-rules","text":"Cache 20% hot URLs for 24 hours. 20K/S * 86.4K seconds=1.7 B requests 1.7 Billion * 0.2 * 0.5 KB = 0.17 TB = 170 GB","title":"Memory : 80-20 rules"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#high-level-estimates","text":"Types of URLs Time estimates New URLs 200/s URL redirections 20K/s Incoming data 100KB/s Outgoing data 10 MB/s Storage for 5 years 6 TB Memory for cache 170 GB","title":"High-Level estimates"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#system-apis","text":"createURL ( api_dev_key , original_url , custom_alias = None , user_name = None , expire_date = None ) -> string deleteURL ( api_dev_key , url_key )","title":"System APIs"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#db-design","text":"6 TB Read-heavy No relationship between records.","title":"DB Design"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#db-schema","text":"","title":"DB Schema"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#url-db-pk---hash-string","text":"original_url: string create_time: datetime user_id: int","title":"URL DB: PK - Hash: string"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#user-db-pk---userid-int","text":"name: string email: string create_time: datetime last_login_time: datatime","title":"User DB: PK - UserID: int"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#db-type","text":"No relationship between objects. No-SQL for availability and horizontal scalability. DynamoDB , Cassandra or Riak","title":"DB Type"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#basic-system-design-and-algorithm","text":"How to generate a short and unique key for a given URL?","title":"Basic System Design and Algorithm"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#encoidng-actual-url","text":"MD5 or SHA256 Base64 with 6 letters long. 64^6 = 68.7 Billion MD5sum to generate hash. 128 bits.","title":"Encoidng actual URL"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#generating-keys-offline","text":"Key Generation Service(KGS) in key-DB. 6 chars * 68.7 Billion (unique keys) = 412 GB.","title":"Generating keys offline"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#data-partitioning-and-replication","text":"","title":"Data Partitioning and Replication"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#range-based-partitioning","text":"","title":"Range based partitioning"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#hash-based-partitioning","text":"Consistent Hashing into number between 1-256","title":"Hash-Based Partitioning"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#cache","text":"Memcached How much cache memory should we have? 170GB Which cache eviction policy would best fit our needs? Least Recently Used (LRU) can be used. How can each cache replica be updated? Whenever there is a cache miss, servers need to access DB. DB","title":"Cache"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#load-balancer","text":"Between Clients and Application servers Between Application Servers and database servers Between Application Servers and Cache servers","title":"Load Balancer"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#purging-or-db-cleanup","text":"Lazy cleanup Cleanup Service to clean periodically. Default expiration time TinyURL-component-Design","title":"Purging or DB cleanup"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#telemetry","text":"How many times a short URL has been used? What location is it used? How would we store these statistics? Country of the visitor, date and time of access, web page, browser, platform from where the page was accessed.","title":"Telemetry"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/1.TinyURL/#security-and-permission","text":"Can users created private URLs or allow a particular set? Use wide-column database like Cassandra. They key for the table will be the HASH, add one columns UserIDs.","title":"Security and permission"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/","text":"Pastebin \u2693\ufe0e Let\u2019s design a Pastebin like web service, where users can store plain text. Users of the service will enter a piece of text and get a randomly generated URL to access it. Requirements \u2693\ufe0e Functional \u2693\ufe0e Creation: Upload or paste data and get a unique URL. Read: users can get the data by the URL. Data and links have expire data, users can specify the expire time. Users can pick up custom alias Non-Functional \u2693\ufe0e Reliable data, should not be lost. Real-time access with minimum latency The link should not guessable. Extended requirements \u2693\ufe0e Analytics. How many times a paste was accessed? REST API Size limit 10 MB Custom URL limit. Capacity Estimation and Constraints \u2693\ufe0e Traffic Storage Bandwidth Memory System API \u2693\ufe0e addPaste(api_dev_key, paste_date, custom_url=None, user_name=None, past_name=None, expire_date=None) getPaste(api_dev_key, api_paste_key) deletePaste(api_dev_key, api_paste_key) Database Design \u2693\ufe0e Schema Paste: URLHash, ContentKey: char[], expiredate: datetime, userID: int User: Name : string, email: string, creation_data: datatime, lastLogin: datetime. High Level Design \u2693\ufe0e","title":"Pastebin"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/#pastebin","text":"Let\u2019s design a Pastebin like web service, where users can store plain text. Users of the service will enter a piece of text and get a randomly generated URL to access it.","title":"Pastebin"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/#requirements","text":"","title":"Requirements"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/#functional","text":"Creation: Upload or paste data and get a unique URL. Read: users can get the data by the URL. Data and links have expire data, users can specify the expire time. Users can pick up custom alias","title":"Functional"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/#non-functional","text":"Reliable data, should not be lost. Real-time access with minimum latency The link should not guessable.","title":"Non-Functional"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/#extended-requirements","text":"Analytics. How many times a paste was accessed? REST API Size limit 10 MB Custom URL limit.","title":"Extended requirements"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/#capacity-estimation-and-constraints","text":"Traffic Storage Bandwidth Memory","title":"Capacity Estimation and Constraints"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/#system-api","text":"addPaste(api_dev_key, paste_date, custom_url=None, user_name=None, past_name=None, expire_date=None) getPaste(api_dev_key, api_paste_key) deletePaste(api_dev_key, api_paste_key)","title":"System API"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/#database-design","text":"Schema Paste: URLHash, ContentKey: char[], expiredate: datetime, userID: int User: Name : string, email: string, creation_data: datatime, lastLogin: datetime.","title":"Database Design"},{"location":"blog/system_design/Grokking-the-system-design-interview/Problem-set/2.Pastebin/#high-level-design","text":"","title":"High Level Design"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/1.Intro/","text":"Introduction \u2693\ufe0e Definition \u2693\ufe0e Microservices are independently deployable modules. every microservice has to be an independent process. Advantages \u2693\ufe0e Easy scalability of development Replacing legacy systems, replace the low perform python with go. Sustainable development. Replaceability of microservices Dependencies have to be managed CD is easier More Robust Independent scaling. Free technology choice Security Challenges \u2693\ufe0e Increased operations effort Independently Deployable Testing must be independent Difficult to change multiple microservices Lost overview Increased latency and failures Weighing benefits and disadvantages","title":"Intro to microservice principles and concepts"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/1.Intro/#introduction","text":"","title":"Introduction"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/1.Intro/#definition","text":"Microservices are independently deployable modules. every microservice has to be an independent process.","title":"Definition"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/1.Intro/#advantages","text":"Easy scalability of development Replacing legacy systems, replace the low perform python with go. Sustainable development. Replaceability of microservices Dependencies have to be managed CD is easier More Robust Independent scaling. Free technology choice Security","title":"Advantages"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/1.Intro/#challenges","text":"Increased operations effort Independently Deployable Testing must be independent Difficult to change multiple microservices Lost overview Increased latency and failures Weighing benefits and disadvantages","title":"Challenges"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/","text":"Micro and Macro \u2693\ufe0e Definition \u2693\ufe0e Micro architecture: All decisions can be made individually for each microservice Macro architecture: All decisions can be made at a global level and apply to all microservices. Topics \u2693\ufe0e Division of domain logic: D omain-Driven Design and Bounded context approaches . How a DevOps model affects these decisions. Who divides the decisions into micro and macro architecture. Domain Driven Design & Bounded Contexts \u2693\ufe0e Domain-driven design (DDD) offers a collection of patterns for the domain model of a system. Books: DDD book Domain-driven Design Distilled Domain-Driven Design Reference Microsoft Domain Analysis Domain-driven design speaks of a bounded context . Each domain model is valid only in a bounded context. The simplest design consists of multiple specialized domain models that are valid only in a certain context . Domain events between bounded contexts Strategic Design \u2693\ufe0e Domain Model, Bounded Context Up Steam to Down Steam customer/supplier pattern \u2693\ufe0e Customer Supplier Pattern The conformist pattern \u2693\ufe0e The anti-corruption layer \u2693\ufe0e The separate ways pattern \u2693\ufe0e The shared kernel pattern \u2693\ufe0e The open host service pattern \u2693\ufe0e The published language model \u2693\ufe0e Selecting patterns \u2693\ufe0e Architecture Decisions \u2693\ufe0e Micro and Macro architecture decisions \u2693\ufe0e Programming languages, frameworks, and infrastructure \u2693\ufe0e Micro: technology for the specific problems can be used. Macro: only developers knowledgeable in some technologies can be hired. Database: backup strategy, recovery strategy. \u2693\ufe0e Micro: Avoid global crash but higher effort to maintain Macro: Sharing DB contradict the bounded context. Even using a unified database, microservices need to have separate schemata in the DB. UI \u2693\ufe0e Micro: different types of users with different requirements Macro: uniformed UI. Documentation \u2693\ufe0e Micro: part of microservice handed over to another team Macro: Standardized documentation Typical Macro architecture decisions \u2693\ufe0e communication protocol: REST or messaging interface Standardized data format : JSON or XML. Authentication : Single authentication system. DC. Users provide their identity. Integration : run microservices together in the integration test. Typical micro architecture decisions \u2693\ufe0e Factors for Micro Architecture Authorization: what a user is allowed to do. Vault? Testing: domain logic, non-functional requirements: performance critical or safety-critical. Micro or Macro Micro Architecture Macro Architecture Programming Language Continuous Delivery Pipeline Communication Protocol Database Authorization Authentication Look and Feel Tests of the Microservice in Isolation Integration Tests Documentation Operation architecture \u2693\ufe0e operation-micro-vs-macro Configuration : technical parameters or domain logic. Password or certificates in Vault. Monitoring : technology that tracks metrics / the state of the state. ELK Log Analysis : Datadog, splunk, sumu logic. A server to receive and manage logs. Deployment Technology: How the microservice are rolled out. Docker, Kubernetes pods, PaaS or installation scripts. Macro architecture operation with separate operations teams Standardize only technologies Testing the operation macro architecture \u201cYou build it, you run it\u201d: operation as micro architecture Give a Preference to Micro Architecture! \u2693\ufe0e Macro architecture decisions: Best practices and advice \u2693\ufe0e Specifying only a few points in the macro architecture helps with focusing a macro architecture rule can define the monitoring technology The macro architecture rules have to be consequently enforced . independence is an important goal of microservices Evolution of macro architecture \u2693\ufe0e From restrictive rules into more languages and libraries. Organizational Aspects \u2693\ufe0e Uncontrolled growth Who defines macro architecture? Independent architecture committee How to enforce? document reasons for each rule. Black-bot testing conformance. Independent Systems Architecture Principles \u2693\ufe0e ISA (Independent Systems Architecture) is the term for a collection of fundamental principles for microservices. Conditions \u2693\ufe0e Should describes principles which have many advantages but do not have to be strictly followed . 1: The system must be divided into modules with interfaces \u2693\ufe0e 2: Two separate levels of architectural decisions \u2693\ufe0e 3: Modules must be separate processes/containers/VMs \u2693\ufe0e 4: Standardized integration & communication: RESTFul or messaging \u2693\ufe0e 5: Standardized metadata: token or track ID. \u2693\ufe0e 6: Independent continuous delivery pipelines \u2693\ufe0e 7: Operations should be standardized \u2693\ufe0e configuration deployment log analysis tracing monitoring alarms 8: Standardized interface \u2693\ufe0e 9: Modules have to be resilient with Asynchronous communication \u2693\ufe0e Variations \u2693\ufe0e Identifying the right bounded contexts is a central challenge","title":"Micro and Macro"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#micro-and-macro","text":"","title":"Micro and Macro"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#definition","text":"Micro architecture: All decisions can be made individually for each microservice Macro architecture: All decisions can be made at a global level and apply to all microservices.","title":"Definition"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#topics","text":"Division of domain logic: D omain-Driven Design and Bounded context approaches . How a DevOps model affects these decisions. Who divides the decisions into micro and macro architecture.","title":"Topics"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#domain-driven-design--bounded-contexts","text":"Domain-driven design (DDD) offers a collection of patterns for the domain model of a system. Books: DDD book Domain-driven Design Distilled Domain-Driven Design Reference Microsoft Domain Analysis Domain-driven design speaks of a bounded context . Each domain model is valid only in a bounded context. The simplest design consists of multiple specialized domain models that are valid only in a certain context . Domain events between bounded contexts","title":"Domain Driven Design &amp; Bounded Contexts"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#strategic-design","text":"Domain Model, Bounded Context Up Steam to Down Steam","title":"Strategic Design"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#customersupplier-pattern","text":"Customer Supplier Pattern","title":"customer/supplier pattern"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#the-conformist-pattern","text":"","title":"The conformist pattern"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#the-anti-corruption-layer","text":"","title":"The anti-corruption layer"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#the-separate-ways-pattern","text":"","title":"The separate ways pattern"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#the-shared-kernel-pattern","text":"","title":"The shared kernel pattern"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#the-open-host-service-pattern","text":"","title":"The open host service pattern"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#the-published-language-model","text":"","title":"The published language model"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#selecting-patterns","text":"","title":"Selecting patterns"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#architecture-decisions","text":"","title":"Architecture Decisions"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#micro-and-macro-architecture-decisions","text":"","title":"Micro and Macro architecture decisions"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#programming-languages-frameworks-and-infrastructure","text":"Micro: technology for the specific problems can be used. Macro: only developers knowledgeable in some technologies can be hired.","title":"Programming languages, frameworks, and infrastructure"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#database-backup-strategy-recovery-strategy","text":"Micro: Avoid global crash but higher effort to maintain Macro: Sharing DB contradict the bounded context. Even using a unified database, microservices need to have separate schemata in the DB.","title":"Database: backup strategy, recovery strategy."},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#ui","text":"Micro: different types of users with different requirements Macro: uniformed UI.","title":"UI"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#documentation","text":"Micro: part of microservice handed over to another team Macro: Standardized documentation","title":"Documentation"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#typical-macro-architecture-decisions","text":"communication protocol: REST or messaging interface Standardized data format : JSON or XML. Authentication : Single authentication system. DC. Users provide their identity. Integration : run microservices together in the integration test.","title":"Typical Macro architecture decisions"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#typical-micro-architecture-decisions","text":"Factors for Micro Architecture Authorization: what a user is allowed to do. Vault? Testing: domain logic, non-functional requirements: performance critical or safety-critical. Micro or Macro Micro Architecture Macro Architecture Programming Language Continuous Delivery Pipeline Communication Protocol Database Authorization Authentication Look and Feel Tests of the Microservice in Isolation Integration Tests Documentation","title":"Typical micro architecture decisions"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#operation-architecture","text":"operation-micro-vs-macro Configuration : technical parameters or domain logic. Password or certificates in Vault. Monitoring : technology that tracks metrics / the state of the state. ELK Log Analysis : Datadog, splunk, sumu logic. A server to receive and manage logs. Deployment Technology: How the microservice are rolled out. Docker, Kubernetes pods, PaaS or installation scripts. Macro architecture operation with separate operations teams Standardize only technologies Testing the operation macro architecture \u201cYou build it, you run it\u201d: operation as micro architecture","title":"Operation architecture"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#give-a-preference-to-micro-architecture","text":"","title":"Give a Preference to Micro Architecture!"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#macro-architecture-decisions-best-practices-and-advice","text":"Specifying only a few points in the macro architecture helps with focusing a macro architecture rule can define the monitoring technology The macro architecture rules have to be consequently enforced . independence is an important goal of microservices","title":"Macro architecture decisions: Best practices and advice"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#evolution-of-macro-architecture","text":"From restrictive rules into more languages and libraries.","title":"Evolution of macro architecture"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#organizational-aspects","text":"Uncontrolled growth Who defines macro architecture? Independent architecture committee How to enforce? document reasons for each rule. Black-bot testing conformance.","title":"Organizational Aspects"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#independent-systems-architecture-principles","text":"ISA (Independent Systems Architecture) is the term for a collection of fundamental principles for microservices.","title":"Independent Systems Architecture Principles"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#conditions","text":"Should describes principles which have many advantages but do not have to be strictly followed .","title":"Conditions"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#1-the-system-must-be-divided-into-modules-with-interfaces","text":"","title":"1: The system must be divided into modules with interfaces"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#2-two-separate-levels-of-architectural-decisions","text":"","title":"2: Two separate levels of architectural decisions"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#3-modules-must-be-separate-processescontainersvms","text":"","title":"3: Modules must be separate processes/containers/VMs"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#4-standardized-integration--communication-restful-or-messaging","text":"","title":"4: Standardized integration &amp; communication: RESTFul or messaging"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#5-standardized-metadata-token-or-track-id","text":"","title":"5: Standardized metadata: token or track ID."},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#6-independent-continuous-delivery-pipelines","text":"","title":"6: Independent continuous delivery pipelines"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#7-operations-should-be-standardized","text":"configuration deployment log analysis tracing monitoring alarms","title":"7: Operations should be standardized"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#8-standardized-interface","text":"","title":"8: Standardized interface"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#9-modules-have-to-be-resilient-with-asynchronous-communication","text":"","title":"9: Modules have to be resilient with Asynchronous communication"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/2.Micro_and_macro_architecture/#variations","text":"Identifying the right bounded contexts is a central challenge","title":"Variations"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/3.migration/","text":"Migration \u2693\ufe0e From monolith to microservice Reasons \u2693\ufe0e Increased security Robustness Independent scaling of individual microservices speed of development Typical Migration Strategies \u2693\ufe0e Give a preference to asynchronous communication Give preference to UI integration Avoid synchronous communication Reuse old interfaces? Integrating authentication Replicating data Replication should be done in one direction Black box migration Choosing the first microservice for the migration Analyze the domain logic of the legacy system into bounded contexts. Extreme migration strategy: all changes in microservices Further procedure: step-by-step migration","title":"Migration"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/3.migration/#migration","text":"From monolith to microservice","title":"Migration"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/3.migration/#reasons","text":"Increased security Robustness Independent scaling of individual microservices speed of development","title":"Reasons"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/3.migration/#typical-migration-strategies","text":"Give a preference to asynchronous communication Give preference to UI integration Avoid synchronous communication Reuse old interfaces? Integrating authentication Replicating data Replication should be done in one direction Black box migration Choosing the first microservice for the migration Analyze the domain logic of the legacy system into bounded contexts. Extreme migration strategy: all changes in microservices Further procedure: step-by-step migration","title":"Typical Migration Strategies"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/","text":"Docker \u2693\ufe0e Moby The Open Container Initiative ensures via standardization of the compatibility of the different container systems. Basics \u2693\ufe0e Features \u2693\ufe0e Shared kernel Isolated network Optimized file system One process per container. Repository \u2693\ufe0e Nexus and Artifactory overview-of-docker Immutable server with Docker \u2693\ufe0e Docker and tools: Puppet, Chef or Ansible \u2693\ufe0e Idempotent installation means that an installation script provides the same results no matter how often it runs. Docker Compose \u2693\ufe0e In a Docker Compose environment, a service can simply contact another service via a Docker Compose link and then use the service name as the hostname. Docker Compose links also implement load balancing and set the start order so that the dependent Docker containers start first. reference documentation Variations \u2693\ufe0e Virtualization has too much overhead. Processes are not sufficiently isolated. Other container solutions such as rkt are far less common. Clusters \u2693\ufe0e Docker Swarm Mode Kubernetes Mesos is actually a system for managing batches for data analysis in a cluster but it also supports Docker containers. how the load is distributed in the cluster is decided by the scheduler? \u2693\ufe0e Docker containers are used for deployment, keep production and test env identical as Immutable servers. Traditional virtualization is still responsible for high availability, scaling, and distribution to the servers. That is, by Kubernetes or Docker Swarm Mode. Fail-safety Load balancing","title":"Docker"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#docker","text":"Moby The Open Container Initiative ensures via standardization of the compatibility of the different container systems.","title":"Docker"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#basics","text":"","title":"Basics"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#features","text":"Shared kernel Isolated network Optimized file system One process per container.","title":"Features"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#repository","text":"Nexus and Artifactory overview-of-docker","title":"Repository"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#immutable-server-with-docker","text":"","title":"Immutable server with Docker"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#docker-and-tools-puppet-chef-or-ansible","text":"Idempotent installation means that an installation script provides the same results no matter how often it runs.","title":"Docker and tools: Puppet, Chef or Ansible"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#docker-compose","text":"In a Docker Compose environment, a service can simply contact another service via a Docker Compose link and then use the service name as the hostname. Docker Compose links also implement load balancing and set the start order so that the dependent Docker containers start first. reference documentation","title":"Docker Compose"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#variations","text":"Virtualization has too much overhead. Processes are not sufficiently isolated. Other container solutions such as rkt are far less common.","title":"Variations"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#clusters","text":"Docker Swarm Mode Kubernetes Mesos is actually a system for managing batches for data analysis in a cluster but it also supports Docker containers.","title":"Clusters"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/4.docker/#how-the-load-is-distributed-in-the-cluster-is-decided-by-the-scheduler","text":"Docker containers are used for deployment, keep production and test env identical as Immutable servers. Traditional virtualization is still responsible for high availability, scaling, and distribution to the servers. That is, by Kubernetes or Docker Swarm Mode. Fail-safety Load balancing","title":"how the load is distributed in the cluster is decided by the scheduler?"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/","text":"Techincal Micro Architecture \u2693\ufe0e Factors that influence the technical Micro Architecture \u2693\ufe0e Communication Resilience New Microservices Operation logs metrics configuration deployment Reactive Programming \u2693\ufe0e The Reactive Manifesto defines the term \u201creactive\u201d based on the following characteristics: Responsive \u2693\ufe0e Responsive means that the system responds as fast as possible . Resilient \u2693\ufe0e Because of resilience the system remains available even if parts fail. Elastic \u2693\ufe0e The system can deal with different levels of load, for instance by using additional resources. After the load peak subsides the resources are freed again. Asynchronous communication \u2693\ufe0e The system uses asynchronous communication (message-driven). reactive programming means something completely different. This programming concept resembles the data flow Reactive programming and the reactive manifesto \u2693\ufe0e Spring Boot \u2693\ufe0e Communication APIs \u2693\ufe0e REST - By default JAX RS API Java Messaging Service(JMS) AMQP with RabbitMQ Spring Cloud Streams supports messaging systems such as Kafka, RabbitMQ (see above) and Redis . Operations \u2693\ufe0e Deployment - JAR file Configuration: application.properties logs or JSON data to server. Metrics: Actuator Go - Speed and concurrency \u2693\ufe0e Moving to Microservices: Top 5 Languages to Choose From Go vs. C: A Language Comparison of Concurrent Programming Features Communication: REST, AMQP , Redis \u2693\ufe0e Operation \u2693\ufe0e Deployment: docker multi-staging Configuration: Viper for both JSON and YAML logs Metrics: Go Kit , Prometheus, Graphite, InfluxDB Resilience \u2693\ufe0e resilience patterns such as Circuit Breaker , Hystrix library","title":"Techincal Micro Architecture"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#techincal-micro-architecture","text":"","title":"Techincal Micro Architecture"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#factors-that-influence-the-technical-micro-architecture","text":"Communication Resilience New Microservices Operation logs metrics configuration deployment","title":"Factors that influence the technical Micro Architecture"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#reactive-programming","text":"The Reactive Manifesto defines the term \u201creactive\u201d based on the following characteristics:","title":"Reactive Programming"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#responsive","text":"Responsive means that the system responds as fast as possible .","title":"Responsive"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#resilient","text":"Because of resilience the system remains available even if parts fail.","title":"Resilient"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#elastic","text":"The system can deal with different levels of load, for instance by using additional resources. After the load peak subsides the resources are freed again.","title":"Elastic"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#asynchronous-communication","text":"The system uses asynchronous communication (message-driven). reactive programming means something completely different. This programming concept resembles the data flow","title":"Asynchronous communication"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#reactive-programming-and-the-reactive-manifesto","text":"","title":"Reactive programming and the reactive manifesto"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#spring-boot","text":"","title":"Spring Boot"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#communication-apis","text":"REST - By default JAX RS API Java Messaging Service(JMS) AMQP with RabbitMQ Spring Cloud Streams supports messaging systems such as Kafka, RabbitMQ (see above) and Redis .","title":"Communication APIs"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#operations","text":"Deployment - JAR file Configuration: application.properties logs or JSON data to server. Metrics: Actuator","title":"Operations"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#go---speed-and-concurrency","text":"Moving to Microservices: Top 5 Languages to Choose From Go vs. C: A Language Comparison of Concurrent Programming Features","title":"Go - Speed and concurrency"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#communication-rest-amqp--redis","text":"","title":"Communication: REST, AMQP , Redis"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#operation","text":"Deployment: docker multi-staging Configuration: Viper for both JSON and YAML logs Metrics: Go Kit , Prometheus, Graphite, InfluxDB","title":"Operation"},{"location":"blog/system_design/Intro_to_microservice_principles_and_concepts/5.technical_micro_architecture/#resilience","text":"resilience patterns such as Circuit Breaker , Hystrix library","title":"Resilience"},{"location":"blog/system_design/basics/CAP/","tags":["System Design"],"text":"IBM CAP doc 1. Consistency \u2693\ufe0e Week consistency \u2693\ufe0e After a W, R may or may not see it. VoIP, video chat, realtime Memcached Eventual Consistency - Data is replicated asynchronously. \u2693\ufe0e Highly available systems. After a W, R will eventually see it. Email or DNS. Strong consistency - transaction based systems. \u2693\ufe0e After W, R will see it. file systems and RDBMSes. Google I/O 2009 - Transactions Across Datacenters.. - YouTube 2. Availability \u2693\ufe0e Fail-over \u2693\ufe0e Active-passive (master-slave) failover \u2693\ufe0e Active-active (master-master) failover \u2693\ufe0e Potential data loss 3. Replication \u2693\ufe0e Database. Master-Slave Master-Master 4. DBs \u2693\ufe0e DB types: CP AP CA System Properties Comparison Cassandra vs. CouchDB vs. MongoDB SQL vs. NoSQL Databases: What\u2019s the Difference? Name Type Features Tech MongoDB CP a BSON(Binary JSON) doc, single-master arch, SQL query via Connector C++ Cassandra c AP wide-column, master-less arch, repair functionality, SQL-like support Java CouchDB c AP JSON Erlang","title":"Basics"},{"location":"blog/system_design/basics/CAP/#1-consistency","text":"","title":"1. Consistency"},{"location":"blog/system_design/basics/CAP/#week-consistency","text":"After a W, R may or may not see it. VoIP, video chat, realtime Memcached","title":"Week consistency"},{"location":"blog/system_design/basics/CAP/#eventual-consistency---data-is-replicated-asynchronously","text":"Highly available systems. After a W, R will eventually see it. Email or DNS.","title":"Eventual Consistency - Data is replicated asynchronously."},{"location":"blog/system_design/basics/CAP/#strong-consistency---transaction-based-systems","text":"After W, R will see it. file systems and RDBMSes. Google I/O 2009 - Transactions Across Datacenters.. - YouTube","title":"Strong consistency - transaction based systems."},{"location":"blog/system_design/basics/CAP/#2-availability","text":"","title":"2. Availability"},{"location":"blog/system_design/basics/CAP/#fail-over","text":"","title":"Fail-over"},{"location":"blog/system_design/basics/CAP/#active-passive-master-slave-failover","text":"","title":"Active-passive (master-slave) failover"},{"location":"blog/system_design/basics/CAP/#active-active-master-master-failover","text":"Potential data loss","title":"Active-active (master-master) failover"},{"location":"blog/system_design/basics/CAP/#3-replication","text":"Database. Master-Slave Master-Master","title":"3. Replication"},{"location":"blog/system_design/basics/CAP/#4-dbs","text":"DB types: CP AP CA System Properties Comparison Cassandra vs. CouchDB vs. MongoDB SQL vs. NoSQL Databases: What\u2019s the Difference? Name Type Features Tech MongoDB CP a BSON(Binary JSON) doc, single-master arch, SQL query via Connector C++ Cassandra c AP wide-column, master-less arch, repair functionality, SQL-like support Java CouchDB c AP JSON Erlang","title":"4. DBs"},{"location":"blog/system_design/basics/CD/","tags":["System Design"],"text":"Blue-Green Deployment \u2693\ufe0e Intro to blue-green, canary, and rolling deployments on OpenShift | Opensource.com Using Blue-Green Deployment to Reduce Downtime and Risk Deployment patterns - Octopus Deploy","title":"CD"},{"location":"blog/system_design/basics/CD/#blue-green-deployment","text":"Intro to blue-green, canary, and rolling deployments on OpenShift | Opensource.com Using Blue-Green Deployment to Reduce Downtime and Risk Deployment patterns - Octopus Deploy","title":"Blue-Green Deployment"},{"location":"blog/system_design/basics/CDN/","tags":["System Design"],"text":"Static files such as HTML/CSS/JS, photos, and videos are served from CDN The Differences Between Push And Pull CDNs Push CDNs \u2693\ufe0e You take full responsibility for providing content, uploading directly to the CDN and rewriting URLs to point to the CDN. Pull CDNs \u2693\ufe0e Pull CDNs grab new content from your server when the first user requests the content.","title":"CDN"},{"location":"blog/system_design/basics/CDN/#push-cdns","text":"You take full responsibility for providing content, uploading directly to the CDN and rewriting URLs to point to the CDN.","title":"Push CDNs"},{"location":"blog/system_design/basics/CDN/#pull-cdns","text":"Pull CDNs grab new content from your server when the first user requests the content.","title":"Pull CDNs"},{"location":"blog/system_design/basics/DB/","tags":["System Design"],"text":"Notes from: SQL vs. NoSQL Databases: What\u2019s the Difference? SQL \u2693\ufe0e Pros \u2693\ufe0e Flexible queries: Enables support for diverse workloads. Abstracts data over underlying implementations and allows engines to optimize queries to fit on-disk representations. Reduced data storage footprint: Due to normalization and other optimization opportunities, a reduced footprint maximizes database performance and resource usage. Strong and well-understood data integrity semantics: Atomicity, consistency, isolation and durability, or ACID , are database properties that guarantee valid transactions. Cons \u2693\ufe0e Rigid data models: Requires careful up-front design to ensure adequate performance and resistance to evolution. SQL has a predefined schema, so changing it often includes downtime. Limited horizontal scalability: It is either completely unsupported, supported in an ad-hoc way or only supported on relatively immature technologies. Single point of failure: Non-distributed engines are mitigated by replication and failover techniques. Db2 MySQL PostgreSQL YugabyteDB CockroachDB Oracle Database Microsoft SQL Server No-SQL(Not only SQL) \u2693\ufe0e ( BigTable and Dynamo ) reveals the problem of hotizontal scalability. Pros \u2693\ufe0e Scalable and highly available: Many NoSQL databases are designed to support seamless, online horizontal scalability without significant single points of failure. Flexible data models: Most non-relational systems do not require developers to make up-front commitments to data models. Existing schemas are dynamic, so they can often be changed \u201con the fly.\u201d Dynamic schema for unstructured data: Documents can be created without a defined structure first, which enables each to have its own unique structure. Syntax varies per database and fields can be added as you build the document. High performance: A limited database functionality range (e.g., by relaxing durability guarantees) enables high performance amongst many NoSQL databases. High-level data abstractions: Beyond the \u201cvalue in a cell\u201d data model, NoSQL systems provide high-level APIs for powerful data structures. For example, Redis includes a native-sorted set abstraction. Cons \u2693\ufe0e Vague interpretations of ACID constraints: Despite the widespread belief that it supports NoSQL systems, ACID interpretations can be too broad to make clear determinations about database semantics. Distributed systems have distributed systems problems: Though not specific to NoSQL systems, encountering such problems is common amongst NoSQL developers and may require SME troubleshooting. Write consistency, eventual consistency and sharding Lack of flexibility in access patterns: Without the abstraction found in relational databases, the on-disk representation of data leaks into the application\u2019s queries and leaves no room for NoSQL engines to optimize queries. Redis - quick access to a key-value store without strong integrity guarantees FaunaDB CouchDB MongoDB Cassandra Elasticsearch - complex or flexible search across a lot of data","title":"DB"},{"location":"blog/system_design/basics/DB/#sql","text":"","title":"SQL"},{"location":"blog/system_design/basics/DB/#pros","text":"Flexible queries: Enables support for diverse workloads. Abstracts data over underlying implementations and allows engines to optimize queries to fit on-disk representations. Reduced data storage footprint: Due to normalization and other optimization opportunities, a reduced footprint maximizes database performance and resource usage. Strong and well-understood data integrity semantics: Atomicity, consistency, isolation and durability, or ACID , are database properties that guarantee valid transactions.","title":"Pros"},{"location":"blog/system_design/basics/DB/#cons","text":"Rigid data models: Requires careful up-front design to ensure adequate performance and resistance to evolution. SQL has a predefined schema, so changing it often includes downtime. Limited horizontal scalability: It is either completely unsupported, supported in an ad-hoc way or only supported on relatively immature technologies. Single point of failure: Non-distributed engines are mitigated by replication and failover techniques. Db2 MySQL PostgreSQL YugabyteDB CockroachDB Oracle Database Microsoft SQL Server","title":"Cons"},{"location":"blog/system_design/basics/DB/#no-sqlnot-only-sql","text":"( BigTable and Dynamo ) reveals the problem of hotizontal scalability.","title":"No-SQL(Not only SQL)"},{"location":"blog/system_design/basics/DB/#pros_1","text":"Scalable and highly available: Many NoSQL databases are designed to support seamless, online horizontal scalability without significant single points of failure. Flexible data models: Most non-relational systems do not require developers to make up-front commitments to data models. Existing schemas are dynamic, so they can often be changed \u201con the fly.\u201d Dynamic schema for unstructured data: Documents can be created without a defined structure first, which enables each to have its own unique structure. Syntax varies per database and fields can be added as you build the document. High performance: A limited database functionality range (e.g., by relaxing durability guarantees) enables high performance amongst many NoSQL databases. High-level data abstractions: Beyond the \u201cvalue in a cell\u201d data model, NoSQL systems provide high-level APIs for powerful data structures. For example, Redis includes a native-sorted set abstraction.","title":"Pros"},{"location":"blog/system_design/basics/DB/#cons_1","text":"Vague interpretations of ACID constraints: Despite the widespread belief that it supports NoSQL systems, ACID interpretations can be too broad to make clear determinations about database semantics. Distributed systems have distributed systems problems: Though not specific to NoSQL systems, encountering such problems is common amongst NoSQL developers and may require SME troubleshooting. Write consistency, eventual consistency and sharding Lack of flexibility in access patterns: Without the abstraction found in relational databases, the on-disk representation of data leaks into the application\u2019s queries and leaves no room for NoSQL engines to optimize queries. Redis - quick access to a key-value store without strong integrity guarantees FaunaDB CouchDB MongoDB Cassandra Elasticsearch - complex or flexible search across a lot of data","title":"Cons"},{"location":"blog/system_design/basics/DNS/","tags":["System Design"],"text":"Amazon R53 Traffic Flow: Latency Based Routing, Geo DNS, Geoproximity, Weighted Round Robin","title":"DNS"},{"location":"blog/system_design/basics/ELK/","text":"System Design hide: disqus","title":"ELK"},{"location":"blog/system_design/basics/caching/","tags":["System Design"],"text":".html MySQL Query Cache memcached Redis Name Feature Eviction argorithm Memcached very large hash table across machines. Least Recently Used(LRU) Memcached vs Redis Memcached Redis Sub-millisecond latency Yes Yes Developer ease of use Yes Yes Data partitioning Yes Yes Support for a broad set of programming languages Yes Yes Advanced data structures - Yes Multithreaded architecture Yes - Snapshots - Yes Replication - Yes Transactions - Yes Pub/Sub - Yes Lua scripting - Yes Geospatial support - Yes","title":"Caching"},{"location":"blog/system_design/basics/embedded_system/","text":"Embedded system \u2693\ufe0e Technical study \u2693\ufe0e EETimes_Embedded_2019_Embedded_Markets_Study Market study \u2693\ufe0e Embedded System Market Size, Share & Trends \\| Industry Report, 2020 2020 IT (Information Technology) Industry Trends Analysis \\| Business of Technology | CompTIA","title":"Embedded system"},{"location":"blog/system_design/basics/embedded_system/#embedded-system","text":"","title":"Embedded system"},{"location":"blog/system_design/basics/embedded_system/#technical-study","text":"EETimes_Embedded_2019_Embedded_Markets_Study","title":"Technical study"},{"location":"blog/system_design/basics/embedded_system/#market-study","text":"Embedded System Market Size, Share & Trends \\| Industry Report, 2020 2020 IT (Information Technology) Industry Trends Analysis \\| Business of Technology | CompTIA","title":"Market study"},{"location":"blog/system_design/basics/kafka/","tags":["System Design"],"text":"Kafka intro The Kafka cluster stores streams of records in categories called topics .","title":"Kafka"},{"location":"blog/system_design/basics/load_balancer/","tags":["System Design"],"text":"scalability \u2693\ufe0e Vertical(hardware) Scaling \u2693\ufe0e CPU: L2 Cache Disk: SATA SAS SSD PATA RAM: Horizontal scalling: \u2693\ufe0e Cheaper hardware Distributed backend server. Load balancer DNS return IP of load balancer. \u2693\ufe0e BIND: heuristic: round roubin policy. Caching: TTL 1 hrs. Storing sessions in load balancer. File server with the same session RAID drive \u2693\ufe0e RIAD0 : strip write for performance RAID1: two drives redundancy. RIAD10: Striping and redundancy 4 drives. RAID5:One drive can die RAID6:Any two drives can die. Robustness and redundancy. How to solve Downtime problem? \u2693\ufe0e replication issue. Software \u2693\ufe0e ELB HAProxy LVS Hardware \u2693\ufe0e Barracuda Cisco Citrix 100K F5 Sticky Sessions \u2693\ufe0e Layer 7 load balancing Shared Storage: \u2693\ufe0e FC, ISCSI, MySQL, NFS. Cookies in Load balancer. \u2693\ufe0e Storing the ID of the server in cookies Store big random number in the load balancer.","title":"LB"},{"location":"blog/system_design/basics/load_balancer/#scalability","text":"","title":"scalability"},{"location":"blog/system_design/basics/load_balancer/#verticalhardware-scaling","text":"CPU: L2 Cache Disk: SATA SAS SSD PATA RAM:","title":"Vertical(hardware) Scaling"},{"location":"blog/system_design/basics/load_balancer/#horizontal-scalling","text":"Cheaper hardware Distributed backend server. Load balancer","title":"Horizontal scalling:"},{"location":"blog/system_design/basics/load_balancer/#dns-return-ip-of-load-balancer","text":"BIND: heuristic: round roubin policy. Caching: TTL 1 hrs. Storing sessions in load balancer. File server with the same session","title":"DNS return IP of load balancer."},{"location":"blog/system_design/basics/load_balancer/#raid-drive","text":"RIAD0 : strip write for performance RAID1: two drives redundancy. RIAD10: Striping and redundancy 4 drives. RAID5:One drive can die RAID6:Any two drives can die. Robustness and redundancy.","title":"RAID drive"},{"location":"blog/system_design/basics/load_balancer/#how-to-solve-downtime-problem","text":"replication issue.","title":"How to solve Downtime problem?"},{"location":"blog/system_design/basics/load_balancer/#software","text":"ELB HAProxy LVS","title":"Software"},{"location":"blog/system_design/basics/load_balancer/#hardware","text":"Barracuda Cisco Citrix 100K F5","title":"Hardware"},{"location":"blog/system_design/basics/load_balancer/#sticky-sessions","text":"Layer 7 load balancing","title":"Sticky Sessions"},{"location":"blog/system_design/basics/load_balancer/#shared-storage","text":"FC, ISCSI, MySQL, NFS.","title":"Shared Storage:"},{"location":"blog/system_design/basics/load_balancer/#cookies-in-load-balancer","text":"Storing the ID of the server in cookies Store big random number in the load balancer.","title":"Cookies in Load balancer."},{"location":"blog/system_design/basics/message_broker/","tags":["System Design"],"text":"Problem statement \u2693\ufe0e Is there anyone to pickup the phone? Otherwise, we need to have a voicemail. If the server cannot accept the request right away, we need to have a broker to store the message first. RabbitMQ - AMQP \u2693\ufe0e ZMQ - TCP socket \u2693\ufe0e https://www.educba.com/zeromq-vs-rabbitmq/ Architecture of ZeroMQ \u2693\ufe0e Architecture of ZeroMQ \u2693\ufe0e Components of RabbitMQ \u2693\ufe0e Components of RabbitMQ Head to Head Comparison Between ZeroMQ vs RabbitMQ \u2693\ufe0e","title":"Message Broker"},{"location":"blog/system_design/basics/message_broker/#problem-statement","text":"Is there anyone to pickup the phone? Otherwise, we need to have a voicemail. If the server cannot accept the request right away, we need to have a broker to store the message first.","title":"Problem statement"},{"location":"blog/system_design/basics/message_broker/#rabbitmq---amqp","text":"","title":"RabbitMQ - AMQP"},{"location":"blog/system_design/basics/message_broker/#zmq---tcp-socket","text":"https://www.educba.com/zeromq-vs-rabbitmq/","title":"ZMQ - TCP socket"},{"location":"blog/system_design/basics/message_broker/#architecture-of-zeromq","text":"","title":"Architecture of ZeroMQ"},{"location":"blog/system_design/basics/message_broker/#architecture-of-zeromq_1","text":"","title":"Architecture of ZeroMQ"},{"location":"blog/system_design/basics/message_broker/#components-of-rabbitmq","text":"Components of RabbitMQ","title":"Components of RabbitMQ"},{"location":"blog/system_design/basics/message_broker/#head-to-head-comparison-between-zeromq-vs-rabbitmq","text":"","title":"Head to Head Comparison Between ZeroMQ vs RabbitMQ"},{"location":"blog/system_design/basics/replication/","tags":["System Design"],"text":"Master-Slave Master-Master Service tier architecture Load balancer: active-active active-passive Partition \u2693\ufe0e DNS: Geography based load balancing. Amazon Avalability Zone. TCP: 80 - Web 443 - SSL 23 - SSH VPN","title":"Replication"},{"location":"blog/system_design/basics/replication/#partition","text":"DNS: Geography based load balancing. Amazon Avalability Zone. TCP: 80 - Web 443 - SSL 23 - SSH VPN","title":"Partition"},{"location":"blog/system_design/basics/topic_lists/","tags":["System Design"],"text":"GitHub - donnemartin/system-design-primer: Learn how to design large-scale systems. Prep for the system design interview. Includes Anki flashcards. Vertical scaling Horizontal scaling Caching Load balancing Database replication Database partitioning Clones Databases Caches Asynchronism Index of system design topics Resources: HiredInTech\u2019s Training Camp for Coding Interviews Amazon CTO: A Word on Scalability - All Things Distributed Typesafe CTO: Scalability, Availability & Stability Patterns","title":"Topics"},{"location":"blog/system_design/web/","text":"Tech \u2693\ufe0e Javascript HTML CSS Static website/Personal website \u2693\ufe0e Gatsby Netify CMS Gatsby + Netify Architecture \u2693\ufe0e How to design microservices architecture in Django framework?","title":"Web"},{"location":"blog/system_design/web/#tech","text":"Javascript HTML CSS","title":"Tech"},{"location":"blog/system_design/web/#static-websitepersonal-website","text":"Gatsby Netify CMS Gatsby + Netify","title":"Static website/Personal website"},{"location":"blog/system_design/web/#architecture","text":"How to design microservices architecture in Django framework?","title":"Architecture"},{"location":"blog/system_design/web/REST/","text":"Understanding And Using REST APIs \u2014 Smashing Magazine","title":"REST"},{"location":"blog/system_design/web/_web_developer/","text":"Web developer Study \u2693\ufe0e Roadmap The 12 factor App","title":"Web developer Study"},{"location":"blog/system_design/web/_web_developer/#web-developer-study","text":"Roadmap The 12 factor App","title":"Web developer Study"},{"location":"blog/system_design/web/flask/","text":"","title":"Flask"},{"location":"blog/system_design/web/frontend/","text":"Learning \u2693\ufe0e \u5927\u524d\u7aef Groovy Grails Personal website \u2693\ufe0e https://github.com/kevwang/kevin-wang-app","title":"Learning"},{"location":"blog/system_design/web/frontend/#learning","text":"\u5927\u524d\u7aef Groovy Grails","title":"Learning"},{"location":"blog/system_design/web/frontend/#personal-website","text":"https://github.com/kevwang/kevin-wang-app","title":"Personal website"},{"location":"blog/system_design/web/github_page/","text":"Use github pages to store notes. \u2693\ufe0e Idea: To have markdown as the source, build the book, publish it either in github pages or gitbook. Deploy Gatsby Site GitHub - gatsbyjs/gatsby-starter-default: The default Gatsby starter Deploy a Gatsby Site on GitHub Pages for Free Deploy Gatsby website to GitHub Pages - DEV \ud83c\udf89 Creating my blog with Gatsby and Github Pages - DEV gatsby/examples/recipe-sourcing-markdown at master \u00b7 gatsbyjs/gatsby \u00b7 GitHub Deploying to GitHub Pages | Codecademy","title":"Use github pages to store notes."},{"location":"blog/system_design/web/github_page/#use-github-pages-to-store-notes","text":"Idea: To have markdown as the source, build the book, publish it either in github pages or gitbook. Deploy Gatsby Site GitHub - gatsbyjs/gatsby-starter-default: The default Gatsby starter Deploy a Gatsby Site on GitHub Pages for Free Deploy Gatsby website to GitHub Pages - DEV \ud83c\udf89 Creating my blog with Gatsby and Github Pages - DEV gatsby/examples/recipe-sourcing-markdown at master \u00b7 gatsbyjs/gatsby \u00b7 GitHub Deploying to GitHub Pages | Codecademy","title":"Use github pages to store notes."},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/","text":"Web app and architecture \u2693\ufe0e Web Application & Software Architecture Architectural styles: client-server , peer to peer decentralized architecture , microservices Overview \u2693\ufe0e architects, developers and product owners study and discuss business requirements (Requirement Gathering & Analysis). Proof of Concept(POC) Software Tiers \u2693\ufe0e Tiers are logical separation of components in an application or a service. Not just code level, component level like database, UI, backend, message caching. web-architecture Single-Tier - UI, Backend business logic, DB in the same machine single-tier.jpeg Pros: no latency, data safety Cons: The business cannot control after software releases. Two-Tier - Client with UI and business logic, backend server includes DB. client-server-architecture.jpeg Pros: UI, application logic & DB all in different machines. Three-Tier - Client with UI, three-tier-architecture.jpeg N Tier > 3 components. Cache, Message queues for asynchronous behavior, load balancers. search server web microservice. Layers and Tiers \u2693\ufe0e web-layers.jpeg What\u2019s web architecture \u2693\ufe0e Multiple components like DB, message queue, cache, UI runs together to form an online service. web-architecture Client Server Architecture(request-response model) \u2693\ufe0e Client: presentation part of the application, HTML, JS, CSS. open-source technologies popular for writing the web-based user interface are ReactJS, AngularJS, VueJS, Jquery StackOverflow popular technology Client \u2693\ufe0e Thin client: just UI. No business logic. Just like a three-tier application. Thick(Fat) client: holds some business logic. Two-tier applications. Utility apps (docker registry), online games. client-types.jpeg Server \u2693\ufe0e Web servers means application servers. Other servers include proxy server, mail server, file server, virtual server. Server side rendering \u2693\ufe0e Render the UI on the backend and send it to the client. Communication \u2693\ufe0e HTTP protocol Stateless protocol. REST API \u2693\ufe0e REST stands for Representational State Transfer . It\u2019s a software architectural style for implementing web services. Web services implemented using the REST architectural style are known as the RESTful Web services. RESTful Web services allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations. REST-API.jpeg Stateless communication between client and server. REST Endpoint: url of a service. REST-API gateway. REST-Gateway.jpeg HTTP Push & Pull \u2693\ufe0e Clients use AJAX (Asynchronous JavaScript & XML) to send requests to the server in the HTTP Pull based mechanism. There are multiple technologies involved in the HTTP Push based mechanism such as: Ajax Long polling Web Sockets HTML5 Event Source Message Queues Streaming over HTTP ajex.jpeg AJAX uses an XMLHttpRequest (XHR) object for sending the requests to the server which is built-in the browser and uses JavaScript to update the HTML DOM AJAX is commonly used with the Jquery This dynamic technique of requesting information from the server after regular intervals is known as Polling . HTTP Pull-Push differences: http-push-pull.jpeg Persistent connection and heartbeat interceptors, which is resource intensive. Long opened connections can be implemented by multiple techniques such as Ajax Long Polling , Web Sockets , *Server-Sent Events * etc. Web sockets - bidirectional data flow \u2693\ufe0e messaging, chat applications, real-time social streams & browser-based massive multiplayer games which have quite a number of read writes in comparison to a regular web app The WebSocket API & Introducing WebSockets \u2013 Bringing Sockets to the Web Long Polling \u2693\ufe0e lies somewhere between Ajax & Web Sockets . instead of immediately returning the response, the server holds the response until it finds an update to be sent to the client. HTML5 Event Source API & Server Sent Events(SSE) \u2693\ufe0e Server-sent events - Web APIs | MDN SSE is ideal for scenarios such as a real-time feed like that of Twitter, displaying stock quotes on the UI, real-time notifications etc . HTML5 & a JavaScript Stream API \u2693\ufe0e Streams API concepts - Web APIs Client-Side Vs Server-Side Rendering \u2693\ufe0e We can use server-side rendering for the home page & for the other static content on our website & use client-side rendering for the dynamic pages.","title":"Web application&architecture"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#web-app-and-architecture","text":"Web Application & Software Architecture Architectural styles: client-server , peer to peer decentralized architecture , microservices","title":"Web app and architecture"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#overview","text":"architects, developers and product owners study and discuss business requirements (Requirement Gathering & Analysis). Proof of Concept(POC)","title":"Overview"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#software-tiers","text":"Tiers are logical separation of components in an application or a service. Not just code level, component level like database, UI, backend, message caching. web-architecture Single-Tier - UI, Backend business logic, DB in the same machine single-tier.jpeg Pros: no latency, data safety Cons: The business cannot control after software releases. Two-Tier - Client with UI and business logic, backend server includes DB. client-server-architecture.jpeg Pros: UI, application logic & DB all in different machines. Three-Tier - Client with UI, three-tier-architecture.jpeg N Tier > 3 components. Cache, Message queues for asynchronous behavior, load balancers. search server web microservice.","title":"Software Tiers"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#layers-and-tiers","text":"web-layers.jpeg","title":"Layers and Tiers"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#whats-web-architecture","text":"Multiple components like DB, message queue, cache, UI runs together to form an online service. web-architecture","title":"What's web architecture"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#client-server-architecturerequest-response-model","text":"Client: presentation part of the application, HTML, JS, CSS. open-source technologies popular for writing the web-based user interface are ReactJS, AngularJS, VueJS, Jquery StackOverflow popular technology","title":"Client Server Architecture(request-response model)"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#client","text":"Thin client: just UI. No business logic. Just like a three-tier application. Thick(Fat) client: holds some business logic. Two-tier applications. Utility apps (docker registry), online games. client-types.jpeg","title":"Client"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#server","text":"Web servers means application servers. Other servers include proxy server, mail server, file server, virtual server.","title":"Server"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#server-side-rendering","text":"Render the UI on the backend and send it to the client.","title":"Server side rendering"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#communication","text":"HTTP protocol Stateless protocol.","title":"Communication"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#rest-api","text":"REST stands for Representational State Transfer . It\u2019s a software architectural style for implementing web services. Web services implemented using the REST architectural style are known as the RESTful Web services. RESTful Web services allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations. REST-API.jpeg Stateless communication between client and server. REST Endpoint: url of a service. REST-API gateway. REST-Gateway.jpeg","title":"REST API"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#http-push--pull","text":"Clients use AJAX (Asynchronous JavaScript & XML) to send requests to the server in the HTTP Pull based mechanism. There are multiple technologies involved in the HTTP Push based mechanism such as: Ajax Long polling Web Sockets HTML5 Event Source Message Queues Streaming over HTTP ajex.jpeg AJAX uses an XMLHttpRequest (XHR) object for sending the requests to the server which is built-in the browser and uses JavaScript to update the HTML DOM AJAX is commonly used with the Jquery This dynamic technique of requesting information from the server after regular intervals is known as Polling . HTTP Pull-Push differences: http-push-pull.jpeg Persistent connection and heartbeat interceptors, which is resource intensive. Long opened connections can be implemented by multiple techniques such as Ajax Long Polling , Web Sockets , *Server-Sent Events * etc.","title":"HTTP Push &amp; Pull"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#web-sockets---bidirectional-data-flow","text":"messaging, chat applications, real-time social streams & browser-based massive multiplayer games which have quite a number of read writes in comparison to a regular web app The WebSocket API & Introducing WebSockets \u2013 Bringing Sockets to the Web","title":"Web sockets - bidirectional data flow"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#long-polling","text":"lies somewhere between Ajax & Web Sockets . instead of immediately returning the response, the server holds the response until it finds an update to be sent to the client.","title":"Long Polling"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#html5-event-source-api--server-sent-eventssse","text":"Server-sent events - Web APIs | MDN SSE is ideal for scenarios such as a real-time feed like that of Twitter, displaying stock quotes on the UI, real-time notifications etc .","title":"HTML5 Event Source API &amp; Server Sent Events(SSE)"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#html5--a-javascript-stream-api","text":"Streams API concepts - Web APIs","title":"HTML5 &amp; a JavaScript Stream API"},{"location":"blog/system_design/web_application%26architecture/0.web_architecture/#client-side-vs-server-side-rendering","text":"We can use server-side rendering for the home page & for the other static content on our website & use client-side rendering for the dynamic pages.","title":"Client-Side Vs Server-Side Rendering"},{"location":"blog/system_design/web_application%26architecture/1.scalability/","text":"Scalability \u2693\ufe0e the ability of the application to handle & withstand increased workload without sacrificing the latency. scalability.jpeg Latency is the amount of time a system takes to respond to a user request. This latency is generally divided into two parts: Network Latency - CDN to cut down. Application Latency - stress & load tests and refactor the bottleneck. latency.jpeg Type of scalatility \u2693\ufe0e Vertical Scaling - hardware scale up. vertical-scale.jpeg Horizontal Scaling - server scale out. horizontal-scale.jpeg Cloud Elasticity \u2693\ufe0e Scale up & down danamically. micro-service-scale.jpeg Scalability approach \u2693\ufe0e No static instances in the class. Static instances hold application data & if a particular server goes down all the static data/state is lost. Development teams today are adopting a distributed micro-services architecture right from the start & the workloads are meant to be deployed on the cloud. So, inherently the workloads are horizontally scaled out on the fly. Primary bottlenecks \u2693\ufe0e application architecture: not using asynchronous processes & modules where ever required rather all the processes are scheduled sequentially. Not using caching via several layers Database: database partitioning, sharding, use multiple database servers to make the module efficient. Having Business logic in DB Not right DB : transactions & strong consistency for Relational DB. horizontal scalability on the fly pick a NoSQL database Code level: unnecessary loops, nested loops, tightly coupled code, Big-O complexity How to improve & Test scalability? \u2693\ufe0e Performance tunning Profiling for concurrency errors, memory errors, robustness, safety Caching CDN Data compression Avoid unnecessary Client-Server requests. Testing the scalability \u2693\ufe0e Different system parameters are taken into account such as the CPU usage, network bandwidth consumption, throughput, the number of requests processed within a stipulated time, latency, memory usage of the program, end-user experience when the system is under heavy load etc. JMeter to load & stress tests. how production engineers support global events on Facebook. how Hotstar a video streaming service scaled with over 10 million concurrent users Cadvisor , Prometheus and Grafana to tracking the system. dashboard-monitoring.jpeg read more about the pre-production monitoring.","title":"Scalability"},{"location":"blog/system_design/web_application%26architecture/1.scalability/#scalability","text":"the ability of the application to handle & withstand increased workload without sacrificing the latency. scalability.jpeg Latency is the amount of time a system takes to respond to a user request. This latency is generally divided into two parts: Network Latency - CDN to cut down. Application Latency - stress & load tests and refactor the bottleneck. latency.jpeg","title":"Scalability"},{"location":"blog/system_design/web_application%26architecture/1.scalability/#type-of-scalatility","text":"Vertical Scaling - hardware scale up. vertical-scale.jpeg Horizontal Scaling - server scale out. horizontal-scale.jpeg","title":"Type of scalatility"},{"location":"blog/system_design/web_application%26architecture/1.scalability/#cloud-elasticity","text":"Scale up & down danamically. micro-service-scale.jpeg","title":"Cloud Elasticity"},{"location":"blog/system_design/web_application%26architecture/1.scalability/#scalability-approach","text":"No static instances in the class. Static instances hold application data & if a particular server goes down all the static data/state is lost. Development teams today are adopting a distributed micro-services architecture right from the start & the workloads are meant to be deployed on the cloud. So, inherently the workloads are horizontally scaled out on the fly.","title":"Scalability approach"},{"location":"blog/system_design/web_application%26architecture/1.scalability/#primary-bottlenecks","text":"application architecture: not using asynchronous processes & modules where ever required rather all the processes are scheduled sequentially. Not using caching via several layers Database: database partitioning, sharding, use multiple database servers to make the module efficient. Having Business logic in DB Not right DB : transactions & strong consistency for Relational DB. horizontal scalability on the fly pick a NoSQL database Code level: unnecessary loops, nested loops, tightly coupled code, Big-O complexity","title":"Primary bottlenecks"},{"location":"blog/system_design/web_application%26architecture/1.scalability/#how-to-improve--test-scalability","text":"Performance tunning Profiling for concurrency errors, memory errors, robustness, safety Caching CDN Data compression Avoid unnecessary Client-Server requests.","title":"How to improve &amp; Test scalability?"},{"location":"blog/system_design/web_application%26architecture/1.scalability/#testing-the-scalability","text":"Different system parameters are taken into account such as the CPU usage, network bandwidth consumption, throughput, the number of requests processed within a stipulated time, latency, memory usage of the program, end-user experience when the system is under heavy load etc. JMeter to load & stress tests. how production engineers support global events on Facebook. how Hotstar a video streaming service scaled with over 10 million concurrent users Cadvisor , Prometheus and Grafana to tracking the system. dashboard-monitoring.jpeg read more about the pre-production monitoring.","title":"Testing the scalability"},{"location":"blog/system_design/web_application%26architecture/10.Mobile_app/","text":"Mobile Apps \u2693\ufe0e Strategy \u2693\ufe0e Mobile only Mobile first Mobile friendly - Responsive \u2693\ufe0e Generally, a responsive web page is divided into rows and columns containing grids. As the screen size gets smaller those grids rearrange themselves based on the screen size. Two approaches to design responsive websites \u2693\ufe0e Mobile first web first Responsive interface: frontend BootstrapJS jQuery Mobile Skyleton HTML5 Boilerplate Less Framework Types of Mobile Apps \u2693\ufe0e Types Technology Example Native App Kotlin for Android, Swift for IOS and Win. Linkedin, Tinder, Hike Hybrid App HTML5, CSS and JS React Native , Ionic , Apache Cordova , Flutter Bloomberg , Walmart , Uber Eats , and Discord . References: React Native at Airbnb Udacity abandoned React Native Facebook admitted counting big on HTML5 for their mobile app was a mistake Who Will Steal Android From Google? The Story Of Firefox OS Progressive Web Apps \u2693\ufe0e The Apps running on Brower in the app. Twitter PWA \u2693\ufe0e It launched its progressive web app in 2017 this Google developers\u2019 resource Mobile Backend as a Service(MBaaS) \u2693\ufe0e Why use the cloud? How is a cloud different from traditional computing? . Providers: Google Firebase , AWS Amplify , and Parse .","title":"Mobile Apps"},{"location":"blog/system_design/web_application%26architecture/10.Mobile_app/#mobile-apps","text":"","title":"Mobile Apps"},{"location":"blog/system_design/web_application%26architecture/10.Mobile_app/#strategy","text":"Mobile only Mobile first","title":"Strategy"},{"location":"blog/system_design/web_application%26architecture/10.Mobile_app/#mobile-friendly---responsive","text":"Generally, a responsive web page is divided into rows and columns containing grids. As the screen size gets smaller those grids rearrange themselves based on the screen size.","title":"Mobile friendly - Responsive"},{"location":"blog/system_design/web_application%26architecture/10.Mobile_app/#two-approaches-to-design-responsive-websites","text":"Mobile first web first Responsive interface: frontend BootstrapJS jQuery Mobile Skyleton HTML5 Boilerplate Less Framework","title":"Two approaches to design responsive websites"},{"location":"blog/system_design/web_application%26architecture/10.Mobile_app/#types-of-mobile-apps","text":"Types Technology Example Native App Kotlin for Android, Swift for IOS and Win. Linkedin, Tinder, Hike Hybrid App HTML5, CSS and JS React Native , Ionic , Apache Cordova , Flutter Bloomberg , Walmart , Uber Eats , and Discord . References: React Native at Airbnb Udacity abandoned React Native Facebook admitted counting big on HTML5 for their mobile app was a mistake Who Will Steal Android From Google? The Story Of Firefox OS","title":"Types of Mobile Apps"},{"location":"blog/system_design/web_application%26architecture/10.Mobile_app/#progressive-web-apps","text":"The Apps running on Brower in the app.","title":"Progressive Web Apps"},{"location":"blog/system_design/web_application%26architecture/10.Mobile_app/#twitter-pwa","text":"It launched its progressive web app in 2017 this Google developers\u2019 resource","title":"Twitter PWA"},{"location":"blog/system_design/web_application%26architecture/10.Mobile_app/#mobile-backend-as-a-servicembaas","text":"Why use the cloud? How is a cloud different from traditional computing? . Providers: Google Firebase , AWS Amplify , and Parse .","title":"Mobile Backend as a Service(MBaaS)"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/","text":"High Availability \u2693\ufe0e Fault tolerance \u2693\ufe0e Fault tolerance is the ability of the system to stay up despite taking hits. Failure reasons: \u2693\ufe0e Software crashes Hardware Failures Human errors This is an interesting read . Planned Downtown: maintenance operations, software, hardware upgrade. Fail soft :A few of the instances/nodes , out of several, running the service go offline & bounce back all the time. In case of these internal failures, the system could work at a reduced level but it will not go down entirely. Highly Available Fault-Tolerant Service. the entire massive service is architecturally broken down into smaller loosely coupled services called the micro-services micro-service-scale.jpeg Redundancy \u2693\ufe0e Active-Passive HA Mode \u2693\ufe0e high-availability.jpeg GPS, aircrafts, communication satellites which have zero downtime. The availability of these systems is ensured by making the components redundant. Single point failure: Distributed systems \u2693\ufe0e Monitoring & Automation - to cut down human errors \u2693\ufe0e Replication \u2693\ufe0e Active-Active High Availability \u2693\ufe0e HA-replication.jpeg Geographical Distribution of Workload \u2693\ufe0e High Availability Clustering \u2693\ufe0e A High Availability cluster also known as the Fail-Over cluster contains a set of nodes running in conjunction with each other that ensures high availability of the service. Heartbeat network monitors the health. A single state across all the nodes in a cluster is achieved with the help of a shared distributed memory & a distributed co-ordination service like the Zookeeper . HA-cluster.jpeg e.g. Jenkins master and clients. Disk mirroring/RAID Redundant Array Of Independent Disks , redundant network connections, redundant electrical power Which of the following statements is true in context to scalability & high availability? Scaling an application horizontally means getting rid of single points of failure & that means the application also becomes highly available.","title":"High Availability"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#high-availability","text":"","title":"High Availability"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#fault-tolerance","text":"Fault tolerance is the ability of the system to stay up despite taking hits.","title":"Fault tolerance"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#failure-reasons","text":"Software crashes Hardware Failures Human errors This is an interesting read . Planned Downtown: maintenance operations, software, hardware upgrade. Fail soft :A few of the instances/nodes , out of several, running the service go offline & bounce back all the time. In case of these internal failures, the system could work at a reduced level but it will not go down entirely. Highly Available Fault-Tolerant Service. the entire massive service is architecturally broken down into smaller loosely coupled services called the micro-services micro-service-scale.jpeg","title":"Failure reasons:"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#redundancy","text":"","title":"Redundancy"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#active-passive-ha-mode","text":"high-availability.jpeg GPS, aircrafts, communication satellites which have zero downtime. The availability of these systems is ensured by making the components redundant.","title":"Active-Passive HA Mode"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#single-point-failure-distributed-systems","text":"","title":"Single point failure: Distributed systems"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#monitoring--automation---to-cut-down-human-errors","text":"","title":"Monitoring &amp; Automation - to cut down human errors"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#replication","text":"","title":"Replication"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#active-active-high-availability","text":"HA-replication.jpeg","title":"Active-Active High Availability"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#geographical-distribution-of-workload","text":"","title":"Geographical Distribution of Workload"},{"location":"blog/system_design/web_application%26architecture/2.high_availabilty/#high-availability-clustering","text":"A High Availability cluster also known as the Fail-Over cluster contains a set of nodes running in conjunction with each other that ensures high availability of the service. Heartbeat network monitors the health. A single state across all the nodes in a cluster is achieved with the help of a shared distributed memory & a distributed co-ordination service like the Zookeeper . HA-cluster.jpeg e.g. Jenkins master and clients. Disk mirroring/RAID Redundant Array Of Independent Disks , redundant network connections, redundant electrical power Which of the following statements is true in context to scalability & high availability? Scaling an application horizontally means getting rid of single points of failure & that means the application also becomes highly available.","title":"High Availability Clustering"},{"location":"blog/system_design/web_application%26architecture/3.load_balancing/","text":"","title":"3.load balancing"},{"location":"blog/system_design/web_application%26architecture/4.db/","text":"Database \u2693\ufe0e Date type \u2693\ufe0e Structured data - normalized fasion. \u2693\ufe0e normalized data means a unique entity occurs in only one place/table, in its simplest and atomic form and is not spread throughout the database. Unstractured Data \u2693\ufe0e User state \u2693\ufe0e Relational DB \u2693\ufe0e Transactions & Data Consistency \u2693\ufe0e ACID \u2013 Atomicity, Consistency, Isolation, Durability . Storing Relationships \u2693\ufe0e Relational databases are built to store relationships. Facebook as the main user-facing database. MySQL , PostgreSQL , MariaDB , Amazon Aurora , Google Cloud SQL NoSQL Databases \u2693\ufe0e JSON-based databases for frequency read & writes, typically required in social applications like Twitter, LIVE real-time sports apps, online massive multi-player games etc. Why no-sql needed from relational DB? \u2693\ufe0e Scalability \u2693\ufe0e Scaling SQL databases is something which is not trivial. They have to be Sharded or Replicated to make them run smoothly on a cluster NoSQL databases have the ability to add new server nodes on the fly & continue the work, Clustering \u2693\ufe0e the server nodes even have self-healing capabilities. Features \u2693\ufe0e Pro \u2693\ufe0e Gentle Learning Curve \u2693\ufe0e Schemaless \u2693\ufe0e Cons \u2693\ufe0e Inconsistency \u2693\ufe0e No ACID \u2693\ufe0e MongoDB , Redis , Neo4J , Cassandra , Google Cloud Datastore When to use? \u2693\ufe0e Handling A Large Number Of Read Write Operations \u2693\ufe0e Since they have the ability to add nodes on the fly, they can handle more concurrent traffic & big amount of data with minimal latency. Flexibility With Data Modeling \u2693\ufe0e Eventual Consistency Over Strong Consistency \u2693\ufe0e Running Data Analytics \u2693\ufe0e Database use cases Time-Series databases , * Wide-Column* - Cassandra or HBase , Document Oriented - ElasticSearch Key-value store - Redis or Memchache Is NoSQL more performant? \u2693\ufe0e MongoDB , ExpressJS , AngularJS/ReactJS , NodeJs pick NoSQL DB. Facebook uses MySQL for storing its social graph of millions of users. Quora uses MySQL by partitioning the data at the application level Polyglot Persistence to use both SQL and NoSQL. \u2693\ufe0e Facebook case study: \u2693\ufe0e facebook-db-example.jpeg Multi-Model Databases \u2693\ufe0e DB supports Graph , Document-Oriented , Relational e.g. Arango DB , Cosmos DB , Orient DB , *Couchbase * facebook-db-multi-node-example.jpeg Eventual consistency \u2693\ufe0e eventual-consistency.jpeg The upside of eventual consistency is that the system can add new nodes on the fly without the need to block any of them, the nodes are available to the end-users to make an update at all times. Strong consistency \u2693\ufe0e Locking down the nodes needs to be updated. strong-consistency.jpeg CAP theorem, queuing all the requests. ACID Trasaction support in the geographic zone. NoSQL for Highly Available and Scalable. Consitency, Availability, Partition tolerance(CAP) \u2693\ufe0e CAP theorem simply states that in case of a network failure , when a few of the nodes of the system are down, we have to make a choice between Availability & *Consistency * Types of Databases \u2693\ufe0e Document-Oriented database \u2693\ufe0e Popular MongoDB, CouchDB, OrientDB, Google Cloud Datastore, Amazon Document DB Use cases Real-time feeds Live sports apps Writing product catalogues Inventory management Storing user comments Web-based multiplayer games SEGA uses Mongo-DB to improve the experience for millions of mobile gamers Coinbase scaled from 15k requests per min to 1.2 million requests per minute with MongoDB Search Engines : Elasticsearch , Splunk , and Solr , Key-value datastore \u2693\ufe0e minimum latency to implement chaching. Popular . Redis , Hazelcast , Riak , Voldemort & Memcache . Caching Persisting user state Persisting user sessions Managing real-time data Implementing queues Creating leaderboards in online games & web apps Implementing a pub-sub system Inovonics uses Redis to drive real-time analytics on millions of sensor data Microsoft uses Redis to handle the traffic spike on its platforms Google Cloud uses Memcache to implement caching on their cloud platform Wide-column database \u2693\ufe0e primarily used to handle massive amounts of data, technically called the Big Data analytical use cases , ensuring scalability , performance & high availability at the same time. column-oriented databases wide-column databases store data in a record with a dynamic number of columns. A record can hold billions of columns Popular : Cassandra*, HBase , Google BigTable , Scylla DB Netflix uses Cassandra as the backend database for the streaming service Adobe uses HBase for processing large amounts of data Relational database \u2693\ufe0e Graph database \u2693\ufe0e Features: visualization Low latency: no need to join in SQL, just follow the edges. e.g. Google Maps Popular . Neo4J* Use cases: building social, knowledge, network graphs. Writing AI-based apps, recommendation engines, fraud analysis app, storing genetic data etc. graph-db.jpeg Walmart shows product recommendations to its customers in real-time using Neo4J graph database NASA uses Neo4J to store \u201clessons learned\u201d data from their previous missions to educate the scientists & engineers. Time-Series database \u2693\ufe0e optimized for tracking & persisting time series data Use cases: data from IoT devices, self-driving vehicles, industry sensors, social networks, stock market financial data Writing an autonomous trading platform which deals with changing stock prices in real-time etc fetching data from IoT devices. Managing data for running analytics & monitoring Primary usage : running analytics, deducing conclusions and making future business decisions looking at the results of the analytics. Popular : Influx DB*, Timescale DB , Prometheus IBM uses Influx DB to run analytics for real-time cognitive fraud detection Spiio uses Influx DB to remotely monitor vertical lining green walls & plant installations. Databases dedicated to mobile apps \u2693\ufe0e Five of the Most Popular Databases for Mobile Apps - Trigent Vantage The Types of Modern Databases | Alooma","title":"Database"},{"location":"blog/system_design/web_application%26architecture/4.db/#database","text":"","title":"Database"},{"location":"blog/system_design/web_application%26architecture/4.db/#date-type","text":"","title":"Date type"},{"location":"blog/system_design/web_application%26architecture/4.db/#structured-data---normalized-fasion","text":"normalized data means a unique entity occurs in only one place/table, in its simplest and atomic form and is not spread throughout the database.","title":"Structured data - normalized fasion."},{"location":"blog/system_design/web_application%26architecture/4.db/#unstractured-data","text":"","title":"Unstractured Data"},{"location":"blog/system_design/web_application%26architecture/4.db/#user-state","text":"","title":"User state"},{"location":"blog/system_design/web_application%26architecture/4.db/#relational-db","text":"","title":"Relational DB"},{"location":"blog/system_design/web_application%26architecture/4.db/#transactions--data-consistency","text":"ACID \u2013 Atomicity, Consistency, Isolation, Durability .","title":"Transactions &amp; Data Consistency"},{"location":"blog/system_design/web_application%26architecture/4.db/#storing-relationships","text":"Relational databases are built to store relationships. Facebook as the main user-facing database. MySQL , PostgreSQL , MariaDB , Amazon Aurora , Google Cloud SQL","title":"Storing Relationships"},{"location":"blog/system_design/web_application%26architecture/4.db/#nosql-databases","text":"JSON-based databases for frequency read & writes, typically required in social applications like Twitter, LIVE real-time sports apps, online massive multi-player games etc.","title":"NoSQL Databases"},{"location":"blog/system_design/web_application%26architecture/4.db/#why-no-sql-needed-from-relational-db","text":"","title":"Why no-sql needed from relational DB?"},{"location":"blog/system_design/web_application%26architecture/4.db/#scalability","text":"Scaling SQL databases is something which is not trivial. They have to be Sharded or Replicated to make them run smoothly on a cluster NoSQL databases have the ability to add new server nodes on the fly & continue the work,","title":"Scalability"},{"location":"blog/system_design/web_application%26architecture/4.db/#clustering","text":"the server nodes even have self-healing capabilities.","title":"Clustering"},{"location":"blog/system_design/web_application%26architecture/4.db/#features","text":"","title":"Features"},{"location":"blog/system_design/web_application%26architecture/4.db/#when-to-use","text":"","title":"When to use?"},{"location":"blog/system_design/web_application%26architecture/4.db/#is-nosql-more-performant","text":"MongoDB , ExpressJS , AngularJS/ReactJS , NodeJs pick NoSQL DB. Facebook uses MySQL for storing its social graph of millions of users. Quora uses MySQL by partitioning the data at the application level","title":"Is NoSQL more performant?"},{"location":"blog/system_design/web_application%26architecture/4.db/#multi-model-databases","text":"DB supports Graph , Document-Oriented , Relational e.g. Arango DB , Cosmos DB , Orient DB , *Couchbase * facebook-db-multi-node-example.jpeg","title":"Multi-Model Databases"},{"location":"blog/system_design/web_application%26architecture/4.db/#eventual-consistency","text":"eventual-consistency.jpeg The upside of eventual consistency is that the system can add new nodes on the fly without the need to block any of them, the nodes are available to the end-users to make an update at all times.","title":"Eventual consistency"},{"location":"blog/system_design/web_application%26architecture/4.db/#strong-consistency","text":"Locking down the nodes needs to be updated. strong-consistency.jpeg CAP theorem, queuing all the requests. ACID Trasaction support in the geographic zone. NoSQL for Highly Available and Scalable.","title":"Strong consistency"},{"location":"blog/system_design/web_application%26architecture/4.db/#consitency-availability-partition-tolerancecap","text":"CAP theorem simply states that in case of a network failure , when a few of the nodes of the system are down, we have to make a choice between Availability & *Consistency *","title":"Consitency, Availability, Partition tolerance(CAP)"},{"location":"blog/system_design/web_application%26architecture/4.db/#types-of-databases","text":"","title":"Types of Databases"},{"location":"blog/system_design/web_application%26architecture/4.db/#document-oriented-database","text":"Popular MongoDB, CouchDB, OrientDB, Google Cloud Datastore, Amazon Document DB Use cases Real-time feeds Live sports apps Writing product catalogues Inventory management Storing user comments Web-based multiplayer games SEGA uses Mongo-DB to improve the experience for millions of mobile gamers Coinbase scaled from 15k requests per min to 1.2 million requests per minute with MongoDB Search Engines : Elasticsearch , Splunk , and Solr ,","title":"Document-Oriented database"},{"location":"blog/system_design/web_application%26architecture/4.db/#key-value-datastore","text":"minimum latency to implement chaching. Popular . Redis , Hazelcast , Riak , Voldemort & Memcache . Caching Persisting user state Persisting user sessions Managing real-time data Implementing queues Creating leaderboards in online games & web apps Implementing a pub-sub system Inovonics uses Redis to drive real-time analytics on millions of sensor data Microsoft uses Redis to handle the traffic spike on its platforms Google Cloud uses Memcache to implement caching on their cloud platform","title":"Key-value datastore"},{"location":"blog/system_design/web_application%26architecture/4.db/#wide-column-database","text":"primarily used to handle massive amounts of data, technically called the Big Data analytical use cases , ensuring scalability , performance & high availability at the same time. column-oriented databases wide-column databases store data in a record with a dynamic number of columns. A record can hold billions of columns Popular : Cassandra*, HBase , Google BigTable , Scylla DB Netflix uses Cassandra as the backend database for the streaming service Adobe uses HBase for processing large amounts of data","title":"Wide-column database"},{"location":"blog/system_design/web_application%26architecture/4.db/#relational-database","text":"","title":"Relational database"},{"location":"blog/system_design/web_application%26architecture/4.db/#graph-database","text":"Features: visualization Low latency: no need to join in SQL, just follow the edges. e.g. Google Maps Popular . Neo4J* Use cases: building social, knowledge, network graphs. Writing AI-based apps, recommendation engines, fraud analysis app, storing genetic data etc. graph-db.jpeg Walmart shows product recommendations to its customers in real-time using Neo4J graph database NASA uses Neo4J to store \u201clessons learned\u201d data from their previous missions to educate the scientists & engineers.","title":"Graph database"},{"location":"blog/system_design/web_application%26architecture/4.db/#time-series-database","text":"optimized for tracking & persisting time series data Use cases: data from IoT devices, self-driving vehicles, industry sensors, social networks, stock market financial data Writing an autonomous trading platform which deals with changing stock prices in real-time etc fetching data from IoT devices. Managing data for running analytics & monitoring Primary usage : running analytics, deducing conclusions and making future business decisions looking at the results of the analytics. Popular : Influx DB*, Timescale DB , Prometheus IBM uses Influx DB to run analytics for real-time cognitive fraud detection Spiio uses Influx DB to remotely monitor vertical lining green walls & plant installations.","title":"Time-Series database"},{"location":"blog/system_design/web_application%26architecture/4.db/#databases-dedicated-to-mobile-apps","text":"Five of the Most Popular Databases for Mobile Apps - Trigent Vantage The Types of Modern Databases | Alooma","title":"Databases dedicated to mobile apps"},{"location":"blog/system_design/web_application%26architecture/5.cache/","text":"Caching \u2693\ufe0e Why?It ensures low latency and high throughput . caching.jpeg What? Disk-based -> RAM(Random Access Memory) Caching Dynamic Data \u2693\ufe0e It has expiry time or TTL. Cache invalidation to purse expired data. Caching static data. \u2693\ufe0e Images, Font files, CSS. Not changed often. CDNS Application architecture cache can be used. \u2693\ufe0e Caching-in-web.jpeg Prevent unnecessary network requests with the HTTP Cache cross-module communication in a microservices architecture by saving the shared data a backbone for the microservice communication . Used in in-memory data stream processing and running analytics . Case study: Deployment costs reduction \u2693\ufe0e Caching the writes in Memchae thendo a batch operations to update DB. (Write-back strategy) Caching strategies \u2693\ufe0e Cache Aside \u2693\ufe0e lazy-loaded , the cache works along with the database trying to reduce the hits on it as much as possible Read-Through \u2693\ufe0e the cache always stays consistent with the database. Write-Through \u2693\ufe0e each & every information written to the database goes through the cache. Before the data is written to the DB, the cache is updated with it. Write-Back \u2693\ufe0e In the Write-back caching strategy the data is directly written to the cache instead of the database. And the cache after some delay as per the business logic writes data to the database.","title":"Caching"},{"location":"blog/system_design/web_application%26architecture/5.cache/#caching","text":"Why?It ensures low latency and high throughput . caching.jpeg What? Disk-based -> RAM(Random Access Memory)","title":"Caching"},{"location":"blog/system_design/web_application%26architecture/5.cache/#caching-dynamic-data","text":"It has expiry time or TTL. Cache invalidation to purse expired data.","title":"Caching Dynamic Data"},{"location":"blog/system_design/web_application%26architecture/5.cache/#caching-static-data","text":"Images, Font files, CSS. Not changed often. CDNS","title":"Caching static data."},{"location":"blog/system_design/web_application%26architecture/5.cache/#application-architecture-cache-can-be-used","text":"Caching-in-web.jpeg Prevent unnecessary network requests with the HTTP Cache cross-module communication in a microservices architecture by saving the shared data a backbone for the microservice communication . Used in in-memory data stream processing and running analytics .","title":"Application architecture cache can be used."},{"location":"blog/system_design/web_application%26architecture/5.cache/#case-study-deployment-costs-reduction","text":"Caching the writes in Memchae thendo a batch operations to update DB. (Write-back strategy)","title":"Case study: Deployment costs reduction"},{"location":"blog/system_design/web_application%26architecture/5.cache/#caching-strategies","text":"","title":"Caching strategies"},{"location":"blog/system_design/web_application%26architecture/5.cache/#cache-aside","text":"lazy-loaded , the cache works along with the database trying to reduce the hits on it as much as possible","title":"Cache Aside"},{"location":"blog/system_design/web_application%26architecture/5.cache/#read-through","text":"the cache always stays consistent with the database.","title":"Read-Through"},{"location":"blog/system_design/web_application%26architecture/5.cache/#write-through","text":"each & every information written to the database goes through the cache. Before the data is written to the DB, the cache is updated with it.","title":"Write-Through"},{"location":"blog/system_design/web_application%26architecture/5.cache/#write-back","text":"In the Write-back caching strategy the data is directly written to the cache instead of the database. And the cache after some delay as per the business logic writes data to the database.","title":"Write-Back"},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/","text":"\u2693\ufe0e Message Queues \u2693\ufe0e FIFO (First in First Out) A priority attached with them that makes the queue a priority queue From producer to consumer message-queue.jpeg Message queues facilitate asynchronous behaviour. Message queues are also used to implement notification systems just like Facebook notifications. Publish Subscribe Model \u2693\ufe0e Multiple consuemer receive the same message sent from a single or multiple producers. newspaper service message-queue-pub-sub.jpeg Exchanges Types: direct , topic , headers , *fanout * RabbitMQ The relationship between exchange and the queue is known as Binding . Point to Point Model \u2693\ufe0e Messaging protocols \u2693\ufe0e AMQP Advanced Message Queue Protocol & STOMP Simple or Streaming Text Oriented Message Protocol . Technologies: \u2693\ufe0e RabbitMQ , ActiveMQ , Apache Kafka , ZeroMQ Case study: notification systems&Real-time feeds \u2693\ufe0e How to implement this notifcation system? They involve machine learning, understanding the user behaviour, recommending new relevant information & integration of other modules with them Pull-based approach \u2693\ufe0e notifaction-pull-based.jpeg Two major issues: Polling DB too often Updates not real-time Push-based approach \u2693\ufe0e notifaction-push-based.jpeg","title":"6.message queues"},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/#_1","text":"","title":""},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/#message-queues","text":"FIFO (First in First Out) A priority attached with them that makes the queue a priority queue From producer to consumer message-queue.jpeg Message queues facilitate asynchronous behaviour. Message queues are also used to implement notification systems just like Facebook notifications.","title":"Message Queues"},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/#publish-subscribe-model","text":"Multiple consuemer receive the same message sent from a single or multiple producers. newspaper service message-queue-pub-sub.jpeg Exchanges Types: direct , topic , headers , *fanout * RabbitMQ The relationship between exchange and the queue is known as Binding .","title":"Publish Subscribe Model"},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/#point-to-point-model","text":"","title":"Point to Point Model"},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/#messaging-protocols","text":"AMQP Advanced Message Queue Protocol & STOMP Simple or Streaming Text Oriented Message Protocol .","title":"Messaging protocols"},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/#technologies","text":"RabbitMQ , ActiveMQ , Apache Kafka , ZeroMQ","title":"Technologies:"},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/#case-study-notification-systemsreal-time-feeds","text":"How to implement this notifcation system? They involve machine learning, understanding the user behaviour, recommending new relevant information & integration of other modules with them","title":"Case study: notification systems&amp;Real-time feeds"},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/#pull-based-approach","text":"notifaction-pull-based.jpeg Two major issues: Polling DB too often Updates not real-time","title":"Pull-based approach"},{"location":"blog/system_design/web_application%26architecture/6.message%20queues/#push-based-approach","text":"notifaction-push-based.jpeg","title":"Push-based approach"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/","text":"Steam Processing \u2693\ufe0e Data Ingestion \u2693\ufe0e Data Ingestion is a collective term for the process of collecting data streaming-in from several different sources and making it ready to be processed by the system. Layers of Data Processing Setup \u2693\ufe0e (CPP+VSS) Data collection layer ( Data standardization ) Data preparation layer Data processing layer Data Analysis analytics models such as predictive modelling, statistical analytics, text analytics etc. Data visualization layer Kibana Data storage layer Data security layer data-ingestion.jpeg Ways of ingestion: \u2693\ufe0e Real-time : systems reading medical data like a heartbeat, blood pressure via wearable IoT sensors where the time is of critical importance; financial data like stock market events etc. Batches : estimating the popularity of a sport in a region over a period of time. Challenges: \u2693\ufe0e Conversion of data is tedious analytics information obtained from real-time processing is not that accurate & holistic since the analytics continually runs on a limited set of data as it streams as opposed to the batch processing approach which takes into account the entire data set. Lambda and the Kappa architectures of data processing Gobblin is a data ingestion tool by LinkedIn. At one point in time, LinkedIn had 15 data ingestion pipelines running which created several data management challenges. To tackle this problem, LinkedIn wrote Gobblin in-house. Gobblin Enters Apache Incubation | LinkedIn Engineering Use cases: \u2693\ufe0e Moving Big Data Into Hadoop \u2693\ufe0e Big Data from IoT devices, social apps, treams through data pipelines, moves into the most popular distributed data processing framework Hadoop for analysis & stuff. 15 IoT Big Data Examples You Should Know | Built In Streaming Data from Databases to Elasticsearch Server \u2693\ufe0e Java, String Boot & Elastic Search. Log Processing \u2693\ufe0e And logs are the only way to move back in time, track errors & study the behaviour of the system. Ingest logs to a central server: ELK Elastic LogStash Kibana stack Stream Processing Engines for Real-Time Events \u2693\ufe0e Message queues like Kafka , Stream computation frameworks like Apache Storm, Apache Nifi, Apache Spark, Samza, Kinesis etc are used to implement the real-time large-scale data processing features in online applications. Netflix\u2019s real-time streaming platform Data pipelines \u2693\ufe0e Data pipeline facilitate the efficient flow of data from one point to another & also enable the developers to apply filters on the data streaming-in in real-time. Features \u2693\ufe0e These ensure smooth flow of data. Enables the business to apply filters and business logic on streaming data. Avert any bottlenecks & redundancy in the data flow. Facilitate parallel processing of data. Avoid data being corrupted. The entire flow of data extraction, transformation, combination, validation, converging of data from multiple streams into one etc. is completely automated. Extract Transform Load.(ETL) \u2693\ufe0e Extract means fetching data from single or multiple data sources. Transform means transforming the extracted heterogeneous data into a standardized format based on the rules set by the business. Load means moving the transformed data to a data warehouse or another data storage location for further processing of data. ETL flow is done in batches, not real-time. Apache Flink , Storm , Spark , Kafka Migrating Batch ETL to Stream Processing: A Netflix Case Study with Kafka and Flink Distributed Data Processing \u2693\ufe0e Distributed data processing means diverging large amounts of data to several different nodes, running in a cluster, for parallel processing. Apache Zookeeper is a pretty popular, de-facto, node co-ordinator used in the industry. data-processing-distributed.jpeg Since the nodes are distributed and the tasks are executed parallelly, this makes the entire set-up pretty scalable & highly available . The workload can be scaled both horizontally & vertically. Data is made redundant & replicated across the cluster to avoid any sort of data loss. Distributed Data Processing Technologies \u2693\ufe0e MapReduce \u2013 Apache Hadoop \u2693\ufe0e MapReduce is a programming model written for managing distributed data processing across several different machines in a cluster, distributing tasks to several machines, running work in parallel, managing all the communication and data transfer within different parts of the system. The Map part of the programming model involves sorting the data based on a parameter and the Reduce part involves summarizing the sorted data. The most popular open-source implementation of the MapReduce programming model is Apache Hadoop . The framework is used by all big guns in the industry to manage massive amounts of data in their system. It is used by Twitter for running analytics. It is used by Facebook for storing big data. Apache Spark \u2693\ufe0e Apache Spark is an open-source cluster computing framework. It provides high performance for both batch & real-time in-stream processing. It can work with diverse data sources & facilitates parallel execution of work in a cluster. Spark has a cluster manager and distributed data storage. The cluster manager facilitates communication between different nodes running together in a cluster whereas the distributed storage facilitates storage of big data. Spark seamlessly integrates with distributed data stores like Cassandra, HDFS, MapReduce File System, Amazon S3 etc. Apache Storm # \u2693\ufe0e Apache Storm is a distributed stream processing framework. In the industry, it is primarily used for processing massive amounts of streaming data . It has several different use cases such as real-time analytics, machine learning, distributed remote procedure calls etc. Apache Kafka # \u2693\ufe0e Apache Kafka is an open-source distributed stream processing & messaging platform . It\u2019s written using Java & Scala & was developed by LinkedIn . The storage layer of Kafka involves a distributed scalable pub/sub message queue . It helps read & write streams of data like a messaging system. Kafka is used in the industry to develop real-time features such as notification platforms, managing streams of massive amounts of data, monitoring website activity & metrics, messaging, log aggregation . Hadoop is preferred for batch processing of data whereas Spark, Kafka & *Storm are preferred for processing real-time streaming * data. Lambda Architecture \u2693\ufe0e data-architecture-lambda.jpeg Batch processing does take time considering the massive amount of data businesses have today but with it the accuracy of the approach is high & the results are comprehensive. real-time streaming data processing provides quick access to insights Typically three layers \u2693\ufe0e Batch Layer - deals with the results acquired via batch processing the data Speed Layer - gets data from the real-time streaming data processing Serving layer - combines the results obtained from both the Batch & the Speed layers Kappa Architecture \u2693\ufe0e data-architecture-kappa.jpeg In Kappa architecture, all the data flows through a single data streaming pipeline as opposed to the Lambda architecture which has different data streaming layers that converge into one. Two Layers: \u2693\ufe0e Speed - streaming processing layer Serving Kappa is preferred if the batch and the streaming analytics results are fairly identical in a system. Lambda is preferred if they are not. Limitations \u2693\ufe0e a distributed system does not promise Strong Consistency of data. Not trivial to set up and manage a distributed data processing system, years of work.","title":"Steam Processing"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#steam-processing","text":"","title":"Steam Processing"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#data-ingestion","text":"Data Ingestion is a collective term for the process of collecting data streaming-in from several different sources and making it ready to be processed by the system.","title":"Data Ingestion"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#layers-of-data-processing-setup","text":"(CPP+VSS) Data collection layer ( Data standardization ) Data preparation layer Data processing layer Data Analysis analytics models such as predictive modelling, statistical analytics, text analytics etc. Data visualization layer Kibana Data storage layer Data security layer data-ingestion.jpeg","title":"Layers of Data Processing Setup"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#ways-of-ingestion","text":"Real-time : systems reading medical data like a heartbeat, blood pressure via wearable IoT sensors where the time is of critical importance; financial data like stock market events etc. Batches : estimating the popularity of a sport in a region over a period of time.","title":"Ways of ingestion:"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#challenges","text":"Conversion of data is tedious analytics information obtained from real-time processing is not that accurate & holistic since the analytics continually runs on a limited set of data as it streams as opposed to the batch processing approach which takes into account the entire data set. Lambda and the Kappa architectures of data processing Gobblin is a data ingestion tool by LinkedIn. At one point in time, LinkedIn had 15 data ingestion pipelines running which created several data management challenges. To tackle this problem, LinkedIn wrote Gobblin in-house. Gobblin Enters Apache Incubation | LinkedIn Engineering","title":"Challenges:"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#use-cases","text":"","title":"Use cases:"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#moving-big-data-into-hadoop","text":"Big Data from IoT devices, social apps, treams through data pipelines, moves into the most popular distributed data processing framework Hadoop for analysis & stuff. 15 IoT Big Data Examples You Should Know | Built In","title":"Moving Big Data Into Hadoop"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#streaming-data-from-databases-to-elasticsearch-server","text":"Java, String Boot & Elastic Search.","title":"Streaming Data from Databases to Elasticsearch Server"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#log-processing","text":"And logs are the only way to move back in time, track errors & study the behaviour of the system. Ingest logs to a central server: ELK Elastic LogStash Kibana stack","title":"Log Processing"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#stream-processing-engines-for-real-time-events","text":"Message queues like Kafka , Stream computation frameworks like Apache Storm, Apache Nifi, Apache Spark, Samza, Kinesis etc are used to implement the real-time large-scale data processing features in online applications. Netflix\u2019s real-time streaming platform","title":"Stream Processing Engines for Real-Time Events"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#data-pipelines","text":"Data pipeline facilitate the efficient flow of data from one point to another & also enable the developers to apply filters on the data streaming-in in real-time.","title":"Data pipelines"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#features","text":"These ensure smooth flow of data. Enables the business to apply filters and business logic on streaming data. Avert any bottlenecks & redundancy in the data flow. Facilitate parallel processing of data. Avoid data being corrupted. The entire flow of data extraction, transformation, combination, validation, converging of data from multiple streams into one etc. is completely automated.","title":"Features"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#extract-transform-loadetl","text":"Extract means fetching data from single or multiple data sources. Transform means transforming the extracted heterogeneous data into a standardized format based on the rules set by the business. Load means moving the transformed data to a data warehouse or another data storage location for further processing of data. ETL flow is done in batches, not real-time. Apache Flink , Storm , Spark , Kafka Migrating Batch ETL to Stream Processing: A Netflix Case Study with Kafka and Flink","title":"Extract Transform Load.(ETL)"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#distributed-data-processing","text":"Distributed data processing means diverging large amounts of data to several different nodes, running in a cluster, for parallel processing. Apache Zookeeper is a pretty popular, de-facto, node co-ordinator used in the industry. data-processing-distributed.jpeg Since the nodes are distributed and the tasks are executed parallelly, this makes the entire set-up pretty scalable & highly available . The workload can be scaled both horizontally & vertically. Data is made redundant & replicated across the cluster to avoid any sort of data loss.","title":"Distributed Data Processing"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#distributed-data-processing-technologies","text":"","title":"Distributed Data Processing Technologies"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#mapreduce--apache-hadoop","text":"MapReduce is a programming model written for managing distributed data processing across several different machines in a cluster, distributing tasks to several machines, running work in parallel, managing all the communication and data transfer within different parts of the system. The Map part of the programming model involves sorting the data based on a parameter and the Reduce part involves summarizing the sorted data. The most popular open-source implementation of the MapReduce programming model is Apache Hadoop . The framework is used by all big guns in the industry to manage massive amounts of data in their system. It is used by Twitter for running analytics. It is used by Facebook for storing big data.","title":"MapReduce \u2013 Apache Hadoop"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#apache-spark","text":"Apache Spark is an open-source cluster computing framework. It provides high performance for both batch & real-time in-stream processing. It can work with diverse data sources & facilitates parallel execution of work in a cluster. Spark has a cluster manager and distributed data storage. The cluster manager facilitates communication between different nodes running together in a cluster whereas the distributed storage facilitates storage of big data. Spark seamlessly integrates with distributed data stores like Cassandra, HDFS, MapReduce File System, Amazon S3 etc.","title":"Apache Spark"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#apache-storm","text":"Apache Storm is a distributed stream processing framework. In the industry, it is primarily used for processing massive amounts of streaming data . It has several different use cases such as real-time analytics, machine learning, distributed remote procedure calls etc.","title":"Apache Storm&#160;#"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#apache-kafka","text":"Apache Kafka is an open-source distributed stream processing & messaging platform . It\u2019s written using Java & Scala & was developed by LinkedIn . The storage layer of Kafka involves a distributed scalable pub/sub message queue . It helps read & write streams of data like a messaging system. Kafka is used in the industry to develop real-time features such as notification platforms, managing streams of massive amounts of data, monitoring website activity & metrics, messaging, log aggregation . Hadoop is preferred for batch processing of data whereas Spark, Kafka & *Storm are preferred for processing real-time streaming * data.","title":"Apache Kafka&#160;#"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#lambda-architecture","text":"data-architecture-lambda.jpeg Batch processing does take time considering the massive amount of data businesses have today but with it the accuracy of the approach is high & the results are comprehensive. real-time streaming data processing provides quick access to insights","title":"Lambda Architecture"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#typically-three-layers","text":"Batch Layer - deals with the results acquired via batch processing the data Speed Layer - gets data from the real-time streaming data processing Serving layer - combines the results obtained from both the Batch & the Speed layers","title":"Typically three layers"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#kappa-architecture","text":"data-architecture-kappa.jpeg In Kappa architecture, all the data flows through a single data streaming pipeline as opposed to the Lambda architecture which has different data streaming layers that converge into one.","title":"Kappa Architecture"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#two-layers","text":"Speed - streaming processing layer Serving Kappa is preferred if the batch and the streaming analytics results are fairly identical in a system. Lambda is preferred if they are not.","title":"Two Layers:"},{"location":"blog/system_design/web_application%26architecture/7.stream_processing/#limitations","text":"a distributed system does not promise Strong Consistency of data. Not trivial to set up and manage a distributed data processing system, years of work.","title":"Limitations"},{"location":"blog/system_design/web_application%26architecture/8.more%20architecture/","text":"More architecture \u2693\ufe0e Event Driven Architecture \u2693\ufe0e reactive programming is a declarative programming paradigm concerned with data streams and the propagation of change reactive programming: a:= b+ c where a is automatically updated whenever b or c changes. In MVC, model changes will be reflected in an associated view. Gerrit Dashboard? What Is Blocking? \u2693\ufe0e blocking means the flow of execution is blocked waiting for a process to complete What Is Non-Blocking? \u2693\ufe0e The non-blocking approach facilitates IO Input-Output intensive operations. Besides the disk & other the hardware-based operations, communication and network operations also come under the IO operations. CPU intensive & *IO intensive * Non-blocking architecture is also known as the Reactive or the Event-driven architecture \u2693\ufe0e Technologies like NodeJS , frameworks in the Java ecosystem like Play , Akka.io are non-blocking in nature and are built for modern high IO scalable applications. They enable us to write code without worrying about handling multi-threads, thread lock, out of memory issues due to high IO etc. Node.js Real-time applications (chat, feeds) Event-driven architecture Can perform client-server duties (e.g. serve files), but not well-suited for this Database management, testing tools, etc, available as additional packages Play ! Client-server applications (website, services) Share-nothing architecture Can perform real-time duties (e.g. Websockets), but not well-suited for this Database management (including migrations!), testing tools, etc, built into core","title":"More architecture"},{"location":"blog/system_design/web_application%26architecture/8.more%20architecture/#more-architecture","text":"","title":"More architecture"},{"location":"blog/system_design/web_application%26architecture/8.more%20architecture/#event-driven-architecture","text":"reactive programming is a declarative programming paradigm concerned with data streams and the propagation of change reactive programming: a:= b+ c where a is automatically updated whenever b or c changes. In MVC, model changes will be reflected in an associated view. Gerrit Dashboard?","title":"Event Driven Architecture"},{"location":"blog/system_design/web_application%26architecture/8.more%20architecture/#what-is-blocking","text":"blocking means the flow of execution is blocked waiting for a process to complete","title":"What Is Blocking?"},{"location":"blog/system_design/web_application%26architecture/8.more%20architecture/#what-is-non-blocking","text":"The non-blocking approach facilitates IO Input-Output intensive operations. Besides the disk & other the hardware-based operations, communication and network operations also come under the IO operations. CPU intensive & *IO intensive *","title":"What Is Non-Blocking?"},{"location":"blog/system_design/web_application%26architecture/8.more%20architecture/#non-blocking-architecture-is-also-known-as-the-reactive-or-the-event-driven-architecture","text":"Technologies like NodeJS , frameworks in the Java ecosystem like Play , Akka.io are non-blocking in nature and are built for modern high IO scalable applications. They enable us to write code without worrying about handling multi-threads, thread lock, out of memory issues due to high IO etc. Node.js Real-time applications (chat, feeds) Event-driven architecture Can perform client-server duties (e.g. serve files), but not well-suited for this Database management, testing tools, etc, available as additional packages Play ! Client-server applications (website, services) Share-nothing architecture Can perform real-time duties (e.g. Websockets), but not well-suited for this Database management (including migrations!), testing tools, etc, built into core","title":"Non-blocking architecture is also known as the Reactive or the Event-driven architecture"},{"location":"blog/system_design/web_application%26architecture/9.pick_right_technology/","text":"How to Pick the Right Server-Side Technology? \u2693\ufe0e Use cases Examples Requirements Technology Real time data interaction Spotify, netflix persistent connection , non-blocking technology NodeJS, Python, Tornado, Spring Reactor, Play, Akka.io Uber used NodeJS to write their core trip execution engine P2P web app TV radio service, LiveStation distributed search engine DAT, IPFS, FreedomJS Netflix researching peer-to-peer technology for streaming data. CRUD based app Online booking portal, tax filing app MVC arch View: React, Angular, Vue. Spring MVC, Django, Ruby on Rail, PHP, ASP.net MVC Simple, small app blog, online form not much complexity PHP static site generator: gatsby, Hugo, Jekyll, mkdocs CPU and Mem intensive app Big Data processing, parallel processing, monitoring and analytics Performance, massive data, lower latency, RAM consumption C++, Rust for high performance and safe concurrency Java, Scala, Erlang . Elastic Search, Go, Julia.","title":"How to Pick the Right Server-Side Technology?"},{"location":"blog/system_design/web_application%26architecture/9.pick_right_technology/#how-to-pick-the-right-server-side-technology","text":"Use cases Examples Requirements Technology Real time data interaction Spotify, netflix persistent connection , non-blocking technology NodeJS, Python, Tornado, Spring Reactor, Play, Akka.io Uber used NodeJS to write their core trip execution engine P2P web app TV radio service, LiveStation distributed search engine DAT, IPFS, FreedomJS Netflix researching peer-to-peer technology for streaming data. CRUD based app Online booking portal, tax filing app MVC arch View: React, Angular, Vue. Spring MVC, Django, Ruby on Rail, PHP, ASP.net MVC Simple, small app blog, online form not much complexity PHP static site generator: gatsby, Hugo, Jekyll, mkdocs CPU and Mem intensive app Big Data processing, parallel processing, monitoring and analytics Performance, massive data, lower latency, RAM consumption C++, Rust for high performance and safe concurrency Java, Scala, Erlang . Elastic Search, Go, Julia.","title":"How to Pick the Right Server-Side Technology?"},{"location":"reading_notes/","text":"Reading Notes \u2693\ufe0e","title":"Reading notes"},{"location":"reading_notes/#reading-notes","text":"","title":"Reading Notes"},{"location":"reading_notes/booklist/","text":"\u4fde\u654f\u6d2a \u63a8\u8350 \u4e8c\u5341\u51e0\u5c81\u6539\u53d8\u601d\u60f3\u7684\u4e66 \u2693\ufe0e \u6539\u53d8\u601d\u60f3\u89c2\u5ff5\uff0c\u4e16\u754c\u8ba4\u8bc6\u7684\u4e66 NO \u6210\u529f\u5b66\uff0c\u5c0f\u8bf4\uff0c\u666e\u901a\u5386\u53f2\u4e66\uff0c\u5fc3\u6001 \u4e16\u754c\u89c2 \u8d44\u672c\u8bba - \u9a6c\u514b\u601d \u897f\u65b9\u54f2\u5b66\u53f2 - \u7f57\u7d20 \u4e07\u53e4\u6c5f\u6cb3 - \u8bb8\u502c\u4e91 \u6587\u660e\u7684\u7ec8\u7ed3 \u7ecf\u6d4e\u5b66\u8bb2\u4e49 - \u859b\u5146\u4e30 \u897f\u65b9\u73b0\u4ee3\u601d\u60f3\u8bb2\u4e49 - \u5218\u64ce \u8fdb\u5316\u8bba - \u8fbe\u5c14\u6587 \u8fdb\u5316\u8bba\u8bb2\u4e49 - \u738b\u7acb\u94ed","title":"Reading list"},{"location":"reading_notes/booklist/#\u4fde\u654f\u6d2a-\u63a8\u8350-\u4e8c\u5341\u51e0\u5c81\u6539\u53d8\u601d\u60f3\u7684\u4e66","text":"\u6539\u53d8\u601d\u60f3\u89c2\u5ff5\uff0c\u4e16\u754c\u8ba4\u8bc6\u7684\u4e66 NO \u6210\u529f\u5b66\uff0c\u5c0f\u8bf4\uff0c\u666e\u901a\u5386\u53f2\u4e66\uff0c\u5fc3\u6001 \u4e16\u754c\u89c2 \u8d44\u672c\u8bba - \u9a6c\u514b\u601d \u897f\u65b9\u54f2\u5b66\u53f2 - \u7f57\u7d20 \u4e07\u53e4\u6c5f\u6cb3 - \u8bb8\u502c\u4e91 \u6587\u660e\u7684\u7ec8\u7ed3 \u7ecf\u6d4e\u5b66\u8bb2\u4e49 - \u859b\u5146\u4e30 \u897f\u65b9\u73b0\u4ee3\u601d\u60f3\u8bb2\u4e49 - \u5218\u64ce \u8fdb\u5316\u8bba - \u8fbe\u5c14\u6587 \u8fdb\u5316\u8bba\u8bb2\u4e49 - \u738b\u7acb\u94ed","title":"\u4fde\u654f\u6d2a \u63a8\u8350 \u4e8c\u5341\u51e0\u5c81\u6539\u53d8\u601d\u60f3\u7684\u4e66"},{"location":"reading_notes/history/china/","text":"Current China \u2693\ufe0e \u671d\u9c9c\u6218\u4e89 \u89e3\u653e\u519b\u4e0a\u5c06 \u8d75\u5357\u8d77 \u5f6d\u5fb7\u6000","title":"Chinese"},{"location":"reading_notes/history/china/#current-china","text":"\u671d\u9c9c\u6218\u4e89 \u89e3\u653e\u519b\u4e0a\u5c06 \u8d75\u5357\u8d77 \u5f6d\u5fb7\u6000","title":"Current China"},{"location":"reading_notes/literature/novels/","text":"\u5c0f\u8bf4\u540d\u5355 20\u4ee5\u4e0b \u60b2\u60e8\u4e16\u754c \u8ba4\u8bc6\u771f\u5b9e\u7684\u4e16\u754c 20-40 \u5200\u950b \u4e16\u754c\u591a\u79cd\u751f\u6d3b\u65b9\u5f0f 40\u4ee5\u4e0a \u590d\u6d3b","title":"Novels"},{"location":"reading_notes/politics/","text":"Canadian Politics 2021 Election \u2693\ufe0e Debate Why a Guaranteed Livable Income? Minimum Wage by Province Green Party \u2693\ufe0e NDP \u2693\ufe0e Liberty \u2693\ufe0e Conserative \u2693\ufe0e","title":"Politics"},{"location":"reading_notes/politics/#canadian-politics-2021-election","text":"Debate Why a Guaranteed Livable Income? Minimum Wage by Province","title":"Canadian Politics 2021 Election"},{"location":"reading_notes/politics/#green-party","text":"","title":"Green Party"},{"location":"reading_notes/politics/#ndp","text":"","title":"NDP"},{"location":"reading_notes/politics/#liberty","text":"","title":"Liberty"},{"location":"reading_notes/politics/#conserative","text":"","title":"Conserative"},{"location":"reading_notes/politics/bc/","text":"BC NDP \u2693\ufe0e Bill M 209 \u2014 2016: Speculator Tracking and Housing Affordability Fund Act, 2016","title":"Politics"},{"location":"reading_notes/politics/bc/#bc-ndp","text":"Bill M 209 \u2014 2016: Speculator Tracking and Housing Affordability Fund Act, 2016","title":"BC NDP"},{"location":"reading_notes/psychology/","text":"Psychology Reading list. \u2693\ufe0e \u300a\u4eb2\u5bc6\u5173\u7cfb\u300b / Intimate Relationships - Rowland Miller \u300a\u5fc3\u7406\u5b66\u4e0e\u751f\u6d3b\u300b / Psychology and Life \u300a\u5c11\u6709\u4eba\u8d70\u7684\u8def\u300b/ The Road Less Travelled \u300a\u7231\u7684\u827a\u672f\u300b/ The Art of Loving \u300a\u9ad8\u6548\u80fd\u4eba\u58eb\u76847\u4e2a\u4e60\u60ef\u300b/ The 7 Habits of Highly Effective People \u300a\u4eba\u6027\u7684\u5f31\u70b9\u300b/ How to Win Friends and Influence People \u300a\u4e60\u60ef\u7684\u529b\u91cf\u300b/ The Power of Habit: Why We Do What We Do in Life and Business \u300a\u638c\u63a7\u4e60\u60ef\u300b/ Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones \u300a\u601d\u8003\u5feb\u4e0e\u6162\u300b/ Thinking, Fast and Slow \u300a\u575a\u6bc5\u300b/ Grit: The Power of Passion and Perseverance \u300a\u7985\u4e0e\u6469\u6258\u8f66\u7ef4\u4fee\u827a\u672f\u300b / Zen and the Art of Motorcycle Maintenance \u300a\u6df1\u5ea6\u5b66\u4e60\u300b/ Deep work \u300a\u81ea\u5351\u4e0e\u8d85\u8d8a\u300b/ What Life Could Mean to You","title":"Psychology"},{"location":"reading_notes/psychology/#psychology-reading-list","text":"\u300a\u4eb2\u5bc6\u5173\u7cfb\u300b / Intimate Relationships - Rowland Miller \u300a\u5fc3\u7406\u5b66\u4e0e\u751f\u6d3b\u300b / Psychology and Life \u300a\u5c11\u6709\u4eba\u8d70\u7684\u8def\u300b/ The Road Less Travelled \u300a\u7231\u7684\u827a\u672f\u300b/ The Art of Loving \u300a\u9ad8\u6548\u80fd\u4eba\u58eb\u76847\u4e2a\u4e60\u60ef\u300b/ The 7 Habits of Highly Effective People \u300a\u4eba\u6027\u7684\u5f31\u70b9\u300b/ How to Win Friends and Influence People \u300a\u4e60\u60ef\u7684\u529b\u91cf\u300b/ The Power of Habit: Why We Do What We Do in Life and Business \u300a\u638c\u63a7\u4e60\u60ef\u300b/ Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones \u300a\u601d\u8003\u5feb\u4e0e\u6162\u300b/ Thinking, Fast and Slow \u300a\u575a\u6bc5\u300b/ Grit: The Power of Passion and Perseverance \u300a\u7985\u4e0e\u6469\u6258\u8f66\u7ef4\u4fee\u827a\u672f\u300b / Zen and the Art of Motorcycle Maintenance \u300a\u6df1\u5ea6\u5b66\u4e60\u300b/ Deep work \u300a\u81ea\u5351\u4e0e\u8d85\u8d8a\u300b/ What Life Could Mean to You","title":"Psychology Reading list."},{"location":"reading_notes/psychology/7-habits/","text":"Habits. \u2693\ufe0e","title":"The 7 Habits of Highly Effective People"},{"location":"reading_notes/psychology/7-habits/#habits","text":"","title":"Habits."},{"location":"tags/","text":"Tags \u2693\ufe0e","title":"Tags"},{"location":"tags/#tags","text":"","title":"Tags"}]}